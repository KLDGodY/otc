; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27034.0 

	TITLE	c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@ ; `string'
PUBLIC	??_C@_0BA@GHAAJBKB@steamclient?4dll@		; `string'
PUBLIC	??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@	; `string'
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp____std_terminate:PROC
EXTRN	__imp__strncpy:PROC
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__imp____CxxFrameHandler3:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long@ DB 'vector<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript@
CONST	SEGMENT
??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript@ DB 'invalid vecto'
	DB	'r<T> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHAAJBKB@steamclient?4dll@
CONST	SEGMENT
??_C@_0BA@GHAAJBKB@steamclient?4dll@ DB 'steamclient.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
CONST	SEGMENT
??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@ DB 'Allocation pointe'
	DB	'r is null.', 00H				; `string'
PUBLIC	??$_Copy_memmove@PAPBDPAPBD@std@@YAPAPBDPAPBD00@Z ; std::_Copy_memmove<char const * *,char const * *>
PUBLIC	??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z	; std::_Copy_memmove<unsigned long *,unsigned long *>
PUBLIC	??$_Uninitialized_move_al_unchecked@KKV?$allocator@K@std@@@std@@YAPAKQAK00AAV?$allocator@K@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<unsigned long,unsigned long,std::allocator<unsigned long> >
PUBLIC	??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_move_cat<unsigned long,unsigned long>
PUBLIC	??$_Seek_wrapped@PBD@std@@YAXAAPAPBDQAPBD@Z	; std::_Seek_wrapped<char const *>
PUBLIC	??$_Uninitialized_copy_al_unchecked@PBDPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD00AAV?$allocator@PBD@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<char const *,char const *,std::allocator<char const *> >
PUBLIC	??$_Ptr_copy_cat@PBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBD0@Z ; std::_Ptr_copy_cat<char const *,char const *>
PUBLIC	??$_Get_unwrapped_n@PBDH$0A@@std@@YAPAPBDQAPBDH@Z ; std::_Get_unwrapped_n<char const *,int,0>
PUBLIC	??$_Get_unwrapped@PBD@std@@YAPAPBDQAPBD@Z	; std::_Get_unwrapped<char const *>
PUBLIC	??$_Seek_wrapped@K@std@@YAXAAPAKQAK@Z		; std::_Seek_wrapped<unsigned long>
PUBLIC	??$_Get_unwrapped_n@KH$0A@@std@@YAPAKQAKH@Z	; std::_Get_unwrapped_n<unsigned long,int,0>
PUBLIC	??$_Get_unwrapped@K@std@@YAPAKQAK@Z		; std::_Get_unwrapped<unsigned long>
PUBLIC	??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >
PUBLIC	??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
PUBLIC	??$_Destroy_range1@V?$allocator@PBD@std@@@std@@YAXPAPBD0AAV?$allocator@PBD@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<char const *> >
PUBLIC	??$_Destroy_range1@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<unsigned long> >
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Idl_distance@PAPBDPAPBD@std@@YAHABQAPBD0@Z	; std::_Idl_distance<char const * *,char const * *>
PUBLIC	??$_Uninitialized_copy@PAPBDPAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD0PAPBDAAV?$allocator@PBD@0@@Z ; std::_Uninitialized_copy<char const * *,char const * *,std::allocator<char const *> >
PUBLIC	??$?0V?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PBD@1@@Z ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> >
PUBLIC	??$forward@V?$allocator@PBD@std@@@std@@YA$$QAV?$allocator@PBD@0@AAV10@@Z ; std::forward<std::allocator<char const *> >
PUBLIC	??$_Idl_distance@PAKPAK@std@@YAHABQAK0@Z	; std::_Idl_distance<unsigned long *,unsigned long *>
PUBLIC	?_Umove_if_noexcept1@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00U?$integral_constant@_N$00@2@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept1
PUBLIC	??0?$allocator@K@std@@QAE@XZ			; std::allocator<unsigned long>::allocator<unsigned long>
PUBLIC	?_Umove@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove
PUBLIC	?_Umove_if_noexcept@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@KV?$allocator@K@std@@@std@@ABEII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Change_array
PUBLIC	??0?$_Vector_val@U?$_Simple_types@K@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned long> >::_Vector_val<std::_Simple_types<unsigned long> >
PUBLIC	??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBD0AAV?$allocator@PBD@0@@Z ; std::_Destroy_range<std::allocator<char const *> >
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ; std::_Destroy_range<std::allocator<unsigned long> >
PUBLIC	??$_Deallocate@$07$0A@@std@@YAXPAXI@Z		; std::_Deallocate<8,0>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits,0>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1><>
PUBLIC	??$_Ucopy@PAPBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPAPBD00@Z ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * *>
PUBLIC	??$?0V?$allocator@PBD@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@$$QAV?$allocator@PBD@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > ><std::allocator<char const *>,void>
PUBLIC	??$_Unfancy_maybe_null@K@std@@YAPAKPAK@Z	; std::_Unfancy_maybe_null<unsigned long>
PUBLIC	??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>
PUBLIC	??$construct@KK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAK$$QAK@Z ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long>
PUBLIC	??$_Unfancy@K@std@@YAPAKPAK@Z			; std::_Unfancy<unsigned long>
PUBLIC	??$forward@K@std@@YA$$QAKAAK@Z			; std::forward<unsigned long>
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned long> >::max_size
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_second
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myend
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SAIABV?$allocator@PBD@2@@Z ; std::_Default_allocator_traits<std::allocator<char const *> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_second
PUBLIC	?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z	; std::allocator<char const *>::deallocate
PUBLIC	?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z	; std::allocator<char const *>::allocate
PUBLIC	?max_size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ ; std::vector<char const *,std::allocator<char const *> >::max_size
PUBLIC	?capacity@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ ; std::vector<char const *,std::allocator<char const *> >::capacity
PUBLIC	?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z ; std::vector<char const *,std::allocator<char const *> >::_Destroy
PUBLIC	?_Xlength@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xlength
PUBLIC	?deallocate@?$allocator@K@std@@QAEXQAKI@Z	; std::allocator<unsigned long>::deallocate
PUBLIC	?allocate@?$allocator@K@std@@QAEPAKI@Z		; std::allocator<unsigned long>::allocate
PUBLIC	?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
PUBLIC	?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
PUBLIC	?_Destroy@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
PUBLIC	?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Orphan_all
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myend
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$allocator@K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_second
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Get_data
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAV?$allocator@PBD@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Get_data
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myend
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
PUBLIC	?size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ ; std::vector<char const *,std::allocator<char const *> >::size
PUBLIC	?_Buy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAE_NI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy
PUBLIC	?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ ; std::vector<char const *,std::allocator<char const *> >::_Tidy
PUBLIC	?_Xrange@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xrange
PUBLIC	?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::size
PUBLIC	?_Tidy@?$vector@KV?$allocator@K@std@@@std@@AAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$allocator@K@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myend
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$allocator@K@2@XZ ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Mylast
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABV?$allocator@PBD@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Getal
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Mylast
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SA?AV?$allocator@PBD@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char const *> >::select_on_container_copy_construction
PUBLIC	??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
PUBLIC	??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
PUBLIC	?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end
PUBLIC	?at@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEAAPBDI@Z ; std::vector<char const *,std::allocator<char const *> >::at
PUBLIC	??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	?data@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::data
PUBLIC	?_Has_unused_capacity@?$vector@KV?$allocator@K@std@@@std@@ABE_NXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Has_unused_capacity
PUBLIC	?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@ABEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$allocator@K@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Mylast
PUBLIC	?_Unchecked_begin@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_end
PUBLIC	?SetMenuStatus@SegmentFramework@@QAEX_N@Z	; SegmentFramework::SetMenuStatus
PUBLIC	?UpdateMenuWatermark@SegmentFramework@@QAEXPBD@Z ; SegmentFramework::UpdateMenuWatermark
PUBLIC	?UpdateWatermark@SegmentFramework@@QAEXPBD0@Z	; SegmentFramework::UpdateWatermark
PUBLIC	?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z ; SegmentFramework::CustomVirtualCaller
PUBLIC	?CreateHook@SegmentFramework@@QAEXXZ		; SegmentFramework::CreateHook
PUBLIC	?UpdateNetVars@SegmentFramework@@QAEXXZ		; SegmentFramework::UpdateNetVars
PUBLIC	?__autoclassinit2@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::__autoclassinit2
PUBLIC	??$_Emplace_back_with_unused_capacity@K@?$vector@KV?$allocator@K@std@@@std@@AAEAAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long>
PUBLIC	??$emplace_back@K@?$vector@KV?$allocator@K@std@@@std@@QAEAAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::emplace_back<unsigned long>
PUBLIC	?CreateDependencyTable@SegmentFramework@@QAEXXZ	; SegmentFramework::CreateDependencyTable
PUBLIC	?GetSafeAllocationPointer@Segment@@SAKXZ	; Segment::GetSafeAllocationPointer
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
EXTRN	___std_terminate:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CreateDependencyTable@SegmentFramework@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateDependencyTable@SegmentFramework@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CreateDependencyTable@SegmentFramework@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateDependencyTable@SegmentFramework@@QAEXXZ$0
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT
; __Size$dead$ = ecx
; __Where$ = edx

; 186  :         (void)_Size;
; 187  :         return _Where;

  00000	8b c2		 mov	 eax, edx

; 188  :     }

  00002	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 43   : 		}

  00000	c3		 ret	 0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT
; __Bytes$ = ecx

; 52   : 		return (::operator new(_Bytes));

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00006	83 c4 04	 add	 esp, 4

; 53   : 		}

  00009	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT
; __Ptr$ = ecx
; __Bytes$ = edx

; 115  : 	_Bytes += _Non_user_size;

  00000	83 02 23	 add	 DWORD PTR [edx], 35	; 00000023H

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00008	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0000a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0000d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00010	77 03		 ja	 SHORT $LN7@Adjust_man

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00012	89 11		 mov	 DWORD PTR [ecx], edx

; 134  : 	}

  00014	c3		 ret	 0
$LN7@Adjust_man:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00015	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
;	COMDAT ?GetSafeAllocationPointer@Segment@@SAKXZ
_TEXT	SEGMENT
?GetSafeAllocationPointer@Segment@@SAKXZ PROC		; Segment::GetSafeAllocationPointer, COMDAT
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00005	85 c0		 test	 eax, eax
  00007	75 0d		 jne	 SHORT $LN4@GetSafeAll

; 14   :         PanicUtils::Release (layer, reason);

  00009	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0000e	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00011	e9 00 00 00 00	 jmp	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN4@GetSafeAll:
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h

; 26   : 	}

  00016	c3		 ret	 0
?GetSafeAllocationPointer@Segment@@SAKXZ ENDP		; Segment::GetSafeAllocationPointer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
;	COMDAT ?CreateDependencyTable@SegmentFramework@@QAEXXZ
_TEXT	SEGMENT
tv935 = -40						; size = 4
_this$GSCopy$1$ = -36					; size = 4
_module$1$ = -32					; size = 4
$T44 = -32						; size = 4
$T2 = -32						; size = 4
_info$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CreateDependencyTable@SegmentFramework@@QAEXXZ PROC	; SegmentFramework::CreateDependencyTable, COMDAT
; _this$ = ecx

; 5    : void SegmentFramework::CreateDependencyTable () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CreateDependencyTable@SegmentFramework@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 dc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+8], 0
  0003a	66 0f d6 45 e4	 movq	 QWORD PTR _info$[ebp], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  0003f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _info$[ebp], 0

; 390  : 		_Mylast(),

  00046	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+4], 0

; 391  : 		_Myend()

  0004d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _info$[ebp+8], 0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GHAAJBKB@steamclient?4dll@
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 10   :        std::vector <DWORD> info;                                                                                                                                 //

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4

; 6    : 
; 7    :    if (!hModule) {

  00066	85 c0		 test	 eax, eax
  00068	75 0b		 jne	 SHORT $LN21@CreateDepe

; 8    :        hModule = LoadLibraryA (module);

  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GHAAJBKB@steamclient?4dll@
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
$LN21@CreateDepe:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 17   :        info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule("steamclient.dll") + Datacase::LIBRARY_RVA));                                                //

  00075	05 00 a4 a9 00	 add	 eax, 11117568		; 00a9a400H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  0007a	8d 4d e4	 lea	 ecx, DWORD PTR _info$[ebp]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 17   :        info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule("steamclient.dll") + Datacase::LIBRARY_RVA));                                                //

  0007d	89 45 e0	 mov	 DWORD PTR $T2[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00080	8d 45 e0	 lea	 eax, DWORD PTR $T2[ebp]
  00083	50		 push	 eax
  00084	6a 00		 push	 0
  00086	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>

; 1689 : 		return (this->_Mylast());

  0008b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 24   :        for (const auto& library : m_libraries) info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule(library)));                                          //

  0008e	33 d2		 xor	 edx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1679 : 		return (this->_Myfirst());

  00090	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 24   :        for (const auto& library : m_libraries) info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule(library)));                                          //

  00093	8b c8		 mov	 ecx, eax
  00095	2b cf		 sub	 ecx, edi
  00097	33 db		 xor	 ebx, ebx
  00099	83 c1 03	 add	 ecx, 3
  0009c	c1 e9 02	 shr	 ecx, 2
  0009f	3b f8		 cmp	 edi, eax
  000a1	0f 47 ca	 cmova	 ecx, edx
  000a4	89 4d d8	 mov	 DWORD PTR tv935[ebp], ecx
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 54		 je	 SHORT $LN338@CreateDepe
  000ab	8b 75 e8	 mov	 esi, DWORD PTR _info$[ebp+4]
  000ae	66 90		 npad	 2
$LL4@CreateDepe:
  000b0	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  000b2	50		 push	 eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 24   :        for (const auto& library : m_libraries) info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule(library)));                                          //

  000b3	89 45 e0	 mov	 DWORD PTR _module$1$[ebp], eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4

; 6    : 
; 7    :    if (!hModule) {

  000bc	85 c0		 test	 eax, eax
  000be	75 09		 jne	 SHORT $LN115@CreateDepe

; 8    :        hModule = LoadLibraryA (module);

  000c0	ff 75 e0	 push	 DWORD PTR _module$1$[ebp]
  000c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
$LN115@CreateDepe:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 24   :        for (const auto& library : m_libraries) info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule(library)));                                          //

  000c9	89 45 e0	 mov	 DWORD PTR $T44[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 917  : 		if (_Has_unused_capacity())

  000cc	39 75 ec	 cmp	 DWORD PTR _info$[ebp+8], esi
  000cf	74 0a		 je	 SHORT $LN118@CreateDepe
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000d1	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  000d3	83 c6 04	 add	 esi, 4
  000d6	89 75 e8	 mov	 DWORD PTR _info$[ebp+4], esi

; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  000d9	eb 10		 jmp	 SHORT $LN2@CreateDepe
$LN118@CreateDepe:

; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  000db	8d 45 e0	 lea	 eax, DWORD PTR $T44[ebp]
  000de	50		 push	 eax
  000df	56		 push	 esi
  000e0	8d 4d e4	 lea	 ecx, DWORD PTR _info$[ebp]
  000e3	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>
  000e8	8b 75 e8	 mov	 esi, DWORD PTR _info$[ebp+4]
$LN2@CreateDepe:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 24   :        for (const auto& library : m_libraries) info.emplace_back (reinterpret_cast<DWORD> (Utils::GetModule(library)));                                          //

  000eb	43		 inc	 ebx
  000ec	83 c7 04	 add	 edi, 4
  000ef	3b 5d d8	 cmp	 ebx, DWORD PTR tv935[ebp]
  000f2	75 bc		 jne	 SHORT $LL4@CreateDepe
  000f4	8b 55 dc	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
  000f7	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000fa	8b 7a 0c	 mov	 edi, DWORD PTR [edx+12]
  000fd	eb 03		 jmp	 SHORT $LN3@CreateDepe
$LN338@CreateDepe:
  000ff	8b 55 dc	 mov	 edx, DWORD PTR _this$GSCopy$1$[ebp]
$LN3@CreateDepe:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00102	2b c7		 sub	 eax, edi
  00104	c1 f8 02	 sar	 eax, 2

; 1750 : 		if (size() <= _Pos)

  00107	85 c0		 test	 eax, eax
  00109	0f 84 91 00 00
	00		 je	 $LN342@CreateDepe
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 33   :        Utils::FindOffsetsToVec (m_libraries.at(0), m_signatures, info, true);                                                                                    //

  0010f	8b 37		 mov	 esi, DWORD PTR [edi]
  00111	8d 42 18	 lea	 eax, DWORD PTR [edx+24]
  00114	6a 01		 push	 1
  00116	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00119	8d 7d e4	 lea	 edi, DWORD PTR _info$[ebp]
  0011c	8b cc		 mov	 ecx, esp
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
  00124	8b d7		 mov	 edx, edi
  00126	8b ce		 mov	 ecx, esi
  00128	e8 00 00 00 00	 call	 ?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z ; Utils::FindOffsetsToVec
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  0012d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 33   :        Utils::FindOffsetsToVec (m_libraries.at(0), m_signatures, info, true);                                                                                    //

  00132	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00135	85 c0		 test	 eax, eax
  00137	74 6c		 je	 SHORT $LN343@CreateDepe
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 45   :         std::memmove (reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer () + 0x20), reinterpret_cast<PVOID> (info.data()), Datacase::TABLE_SIZE);      //

  00139	8b 75 e4	 mov	 esi, DWORD PTR _info$[ebp]
  0013c	83 c0 20	 add	 eax, 32			; 00000020H
  0013f	68 8c 01 00 00	 push	 396			; 0000018cH
  00144	56		 push	 esi
  00145	50		 push	 eax
  00146	e8 00 00 00 00	 call	 _memmove
  0014b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1913 : 		if (this->_Myfirst() != pointer())

  0014e	85 f6		 test	 esi, esi
  00150	74 32		 je	 SHORT $LN235@CreateDepe

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00152	8b 4d ec	 mov	 ecx, DWORD PTR _info$[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00155	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00157	2b ce		 sub	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00159	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0015c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00162	72 16		 jb	 SHORT $LN311@CreateDepe

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00164	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  00167	83 c1 23	 add	 ecx, 35			; 00000023H
  0016a	2b c6		 sub	 eax, esi

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0016f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00172	76 06		 jbe	 SHORT $LN311@CreateDepe
  00174	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN311@CreateDepe:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0017a	51		 push	 ecx
  0017b	56		 push	 esi
  0017c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00181	83 c4 08	 add	 esp, 8
$LN235@CreateDepe:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 49   : }

  00184	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00187	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0018e	59		 pop	 ecx
  0018f	5f		 pop	 edi
  00190	5e		 pop	 esi
  00191	5b		 pop	 ebx
  00192	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00195	33 cd		 xor	 ecx, ebp
  00197	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0019c	8b e5		 mov	 esp, ebp
  0019e	5d		 pop	 ebp
  0019f	c3		 ret	 0
$LN342@CreateDepe:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1752 : 			_Xrange();

  001a0	e8 00 00 00 00	 call	 ?_Xrange@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xrange
$LN343@CreateDepe:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  001a5	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  001aa	b9 01 00 00 00	 mov	 ecx, 1
  001af	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN340@CreateDepe:
  001b4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateDependencyTable@SegmentFramework@@QAEXXZ$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _info$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__ehhandler$?CreateDependencyTable@SegmentFramework@@QAEXXZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CreateDependencyTable@SegmentFramework@@QAEXXZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CreateDependencyTable@SegmentFramework@@QAEXXZ ENDP	; SegmentFramework::CreateDependencyTable
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@K@?$vector@KV?$allocator@K@std@@@std@@QAEAAK$$QAK@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@K@?$vector@KV?$allocator@K@std@@@std@@QAEAAK$$QAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::emplace_back<unsigned long>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00005	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00008	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx

; 917  : 		if (_Has_unused_capacity())

  0000b	74 14		 je	 SHORT $LN2@emplace_ba
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 905  : 		++this->_Mylast();

  00017	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@emplace_ba:

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));
; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00021	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  00024	51		 push	 ecx
  00025	8b ca		 mov	 ecx, edx
  00027	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??$emplace_back@K@?$vector@KV?$allocator@K@std@@@std@@QAEAAK$$QAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::emplace_back<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@K@?$vector@KV?$allocator@K@std@@@std@@AAEAAK$$QAK@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@K@?$vector@KV?$allocator@K@std@@@std@@AAEAAK$$QAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00006	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 905  : 		++this->_Mylast();

  00010	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  00013	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@K@?$vector@KV?$allocator@K@std@@@std@@AAEAAK$$QAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0000e	c2 04 00	 ret	 4
?__autoclassinit2@?$vector@KV?$allocator@K@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
;	COMDAT ?UpdateNetVars@SegmentFramework@@QAEXXZ
_TEXT	SEGMENT
?UpdateNetVars@SegmentFramework@@QAEXXZ PROC		; SegmentFramework::UpdateNetVars, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1679 : 		return (this->_Myfirst());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 51   : void SegmentFramework::UpdateNetVars () {

  00002	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1689 : 		return (this->_Mylast());

  00003	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 54   :     for (const auto& netvar : m_netvars) {

  00006	3b c7		 cmp	 eax, edi
  00008	74 20		 je	 SHORT $LN3@UpdateNetV
  0000a	56		 push	 esi
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@UpdateNetV:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00010	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00016	85 f6		 test	 esi, esi
  00018	74 12		 je	 SHORT $LN30@UpdateNetV
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 55   :         *reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer () + netvar.rva) = netvar.new_value;

  0001a	8b 10		 mov	 edx, DWORD PTR [eax]
  0001c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0001f	83 c0 08	 add	 eax, 8
  00022	89 0c 16	 mov	 DWORD PTR [esi+edx], ecx
  00025	3b c7		 cmp	 eax, edi
  00027	75 e7		 jne	 SHORT $LL4@UpdateNetV
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00029	5e		 pop	 esi
$LN3@UpdateNetV:
  0002a	5f		 pop	 edi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 58   : }

  0002b	c3		 ret	 0
$LN30@UpdateNetV:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  0002c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  00031	b9 01 00 00 00	 mov	 ecx, 1
  00036	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN34@UpdateNetV:
  0003b	cc		 int	 3
?UpdateNetVars@SegmentFramework@@QAEXXZ ENDP		; SegmentFramework::UpdateNetVars
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\libs\libs\hooklib\hooklib\hooklib\hooklib.c
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\libs\libs\hooklib\hooklib\hooklib\hooklib.c
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
;	COMDAT ?CreateHook@SegmentFramework@@QAEXXZ
_TEXT	SEGMENT
_FixupInfo$5 = -44					; size = 20
_Address$6 = -24					; size = 4
_Base$7 = -20						; size = 4
_Size$8 = -16						; size = 4
_Size$9 = -12						; size = 4
_OldProtect$10 = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
?CreateHook@SegmentFramework@@QAEXXZ PROC		; SegmentFramework::CreateHook, COMDAT
; _this$dead$ = ecx

; 61   : void SegmentFramework::CreateHook () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	57		 push	 edi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00011	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00017	85 ff		 test	 edi, edi
  00019	0f 84 59 01 00
	00		 je	 $LN55@CreateHook
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 77   :       SetHook (reinterpret_cast<PVOID> (Segment::GetSafeAllocationPointer() + Datacase::VIRTUAL_EXECUTOR_RVA), &CustomVirtualCaller, reinterpret_cast<PVOID*> (&OriginalVirtualCaller)); //

  0001f	81 c7 30 3b 00
	00		 add	 edi, 15152		; 00003b30H
; File c:\users\henry\source\repos\otc\otc\otc\libs\libs\hooklib\hooklib\hooklib\hooklib.c

; 748  :     if (!Target || !Interceptor) return FALSE;

  00025	0f 84 3e 01 00
	00		 je	 $LN14@CreateHook

; 749  : 
; 750  : #ifdef _AMD64_
; 751  :     PVOID EmptyPage = FindEmptyPageIn2Gb(Target);
; 752  :     
; 753  :     BOOLEAN NeedAbsoluteJump = FALSE;
; 754  :     BOOLEAN NeedIntermediateJump = IsGreaterThan2Gb(Target, Interceptor);
; 755  :     if (NeedIntermediateJump)
; 756  :     {
; 757  :         NeedAbsoluteJump = !EmptyPage;
; 758  :     }
; 759  : 
; 760  :     PHOOK_DATA Hook = Alloc(EmptyPage, sizeof(HOOK_DATA), PAGE_EXECUTE_READWRITE);
; 761  : #else
; 762  :     PHOOK_DATA Hook = Alloc(NULL, sizeof(HOOK_DATA), PAGE_EXECUTE_READWRITE);

  0002b	56		 push	 esi

; 254  :     NTSTATUS Status = NtAllocateVirtualMemory(NtCurrentProcess(), &Base, Base ? 12 : 0, &Size, MEM_RESERVE | MEM_COMMIT, Protect);

  0002c	6a 40		 push	 64			; 00000040H
  0002e	68 00 30 00 00	 push	 12288			; 00003000H
  00033	8d 45 f4	 lea	 eax, DWORD PTR _Size$9[ebp]

; 762  :     PHOOK_DATA Hook = Alloc(NULL, sizeof(HOOK_DATA), PAGE_EXECUTE_READWRITE);

  00036	c7 45 f4 4c 00
	00 00		 mov	 DWORD PTR _Size$9[ebp], 76 ; 0000004cH

; 254  :     NTSTATUS Status = NtAllocateVirtualMemory(NtCurrentProcess(), &Base, Base ? 12 : 0, &Size, MEM_RESERVE | MEM_COMMIT, Protect);

  0003d	50		 push	 eax
  0003e	6a 00		 push	 0
  00040	8d 45 ec	 lea	 eax, DWORD PTR _Base$7[ebp]

; 762  :     PHOOK_DATA Hook = Alloc(NULL, sizeof(HOOK_DATA), PAGE_EXECUTE_READWRITE);

  00043	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Base$7[ebp], 0

; 254  :     NTSTATUS Status = NtAllocateVirtualMemory(NtCurrentProcess(), &Base, Base ? 12 : 0, &Size, MEM_RESERVE | MEM_COMMIT, Protect);

  0004a	50		 push	 eax
  0004b	6a ff		 push	 -1
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtAllocateVirtualMemory@24

; 255  :     return NT_SUCCESS(Status) ? Base : NULL;

  00053	33 f6		 xor	 esi, esi
  00055	85 c0		 test	 eax, eax
  00057	0f 49 75 ec	 cmovns	 esi, DWORD PTR _Base$7[ebp]

; 764  :     if (!Hook) return FALSE;

  0005b	85 f6		 test	 esi, esi
  0005d	0f 84 05 01 00
	00		 je	 $LN50@CreateHook

; 765  : 
; 766  :     Hook->OriginalFunction = Target;

  00063	89 3e		 mov	 DWORD PTR [esi], edi

; 663  :     Hook->AffectedBytes = Size;

  00065	c7 46 08 05 00
	00 00		 mov	 DWORD PTR [esi+8], 5

; 664  :     for (unsigned int i = 0; i < Size; ++i)
; 665  :     {
; 666  :         Hook->OriginalBytes[i] = *((PBYTE)Target + i);

  0006c	8a 07		 mov	 al, BYTE PTR [edi]
  0006e	88 46 2c	 mov	 BYTE PTR [esi+44], al
  00071	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00074	88 46 2d	 mov	 BYTE PTR [esi+45], al
  00077	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  0007a	88 46 2e	 mov	 BYTE PTR [esi+46], al
  0007d	8a 47 03	 mov	 al, BYTE PTR [edi+3]

; 766  :     Hook->OriginalFunction = Target;

  00080	53		 push	 ebx

; 666  :         Hook->OriginalBytes[i] = *((PBYTE)Target + i);

  00081	88 46 2f	 mov	 BYTE PTR [esi+47], al

; 774  :     Hook->OriginalDataSize = TransitCode(Target, Hook->OriginalBeginning, REL_TRAMPOLINE_SIZE);

  00084	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]

; 666  :         Hook->OriginalBytes[i] = *((PBYTE)Target + i);

  00087	8a 47 04	 mov	 al, BYTE PTR [edi+4]

; 774  :     Hook->OriginalDataSize = TransitCode(Target, Hook->OriginalBeginning, REL_TRAMPOLINE_SIZE);

  0008a	8b d3		 mov	 edx, ebx
  0008c	51		 push	 ecx
  0008d	8b cf		 mov	 ecx, edi

; 666  :         Hook->OriginalBytes[i] = *((PBYTE)Target + i);

  0008f	88 46 30	 mov	 BYTE PTR [esi+48], al

; 774  :     Hook->OriginalDataSize = TransitCode(Target, Hook->OriginalBeginning, REL_TRAMPOLINE_SIZE);

  00092	e8 00 00 00 00	 call	 _TransitCode
  00097	0f b6 c0	 movzx	 eax, al
  0009a	83 c4 04	 add	 esp, 4
  0009d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 775  : #endif
; 776  : 
; 777  :     if (!Hook->OriginalDataSize)

  000a0	85 c0		 test	 eax, eax
  000a2	74 3d		 je	 SHORT $LN53@CreateHook

; 778  :     {
; 779  :         Free(Hook);
; 780  :         return FALSE;
; 781  :     }
; 782  : 
; 783  : #ifdef _AMD64_
; 784  :     WriteAbsoluteTrampoline((PBYTE)Hook->OriginalBeginning + Hook->OriginalDataSize, (PBYTE)Target + Hook->OriginalDataSize);
; 785  : #else
; 786  :     PBYTE WriteTo = (PBYTE)Hook->OriginalBeginning + Hook->OriginalDataSize;

  000a4	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]

; 791  : #ifdef _AMD64_
; 792  :     if (!NT_SUCCESS(Protect(Target, NeedAbsoluteJump ? ABS_TRAMPOLINE_SIZE : REL_TRAMPOLINE_SIZE, PAGE_EXECUTE_READWRITE, &OldProtect)))
; 793  : #else
; 794  :     if (!NT_SUCCESS(Protect(Target, REL_TRAMPOLINE_SIZE, PAGE_EXECUTE_READWRITE, &OldProtect)))

  000a7	c7 45 f0 05 00
	00 00		 mov	 DWORD PTR _Size$8[ebp], 5
  000ae	03 c8		 add	 ecx, eax
  000b0	89 7d e8	 mov	 DWORD PTR _Address$6[ebp], edi

; 524  :     *(PULONG)((PBYTE)WriteTo + sizeof(BYTE)) = (ULONG)((PBYTE)Dest - ((PBYTE)Src + 5));

  000b3	2b c1		 sub	 eax, ecx
  000b5	83 c0 fb	 add	 eax, -5			; fffffffbH
  000b8	03 c7		 add	 eax, edi
  000ba	89 41 01	 mov	 DWORD PTR [ecx+1], eax

; 269  :     return NtProtectVirtualMemory(NtCurrentProcess(), &Address, &Size, Protect, OldProtect);

  000bd	8d 45 f8	 lea	 eax, DWORD PTR _OldProtect$10[ebp]
  000c0	50		 push	 eax
  000c1	6a 40		 push	 64			; 00000040H
  000c3	8d 45 f0	 lea	 eax, DWORD PTR _Size$8[ebp]

; 523  :     *(PBYTE)(WriteTo) = 0xE9;

  000c6	c6 01 e9	 mov	 BYTE PTR [ecx], 233	; 000000e9H

; 269  :     return NtProtectVirtualMemory(NtCurrentProcess(), &Address, &Size, Protect, OldProtect);

  000c9	50		 push	 eax
  000ca	8d 45 e8	 lea	 eax, DWORD PTR _Address$6[ebp]

; 790  :     ULONG OldProtect = 0;

  000cd	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _OldProtect$10[ebp], 0

; 269  :     return NtProtectVirtualMemory(NtCurrentProcess(), &Address, &Size, Protect, OldProtect);

  000d4	50		 push	 eax
  000d5	6a ff		 push	 -1
  000d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtProtectVirtualMemory@20

; 794  :     if (!NT_SUCCESS(Protect(Target, REL_TRAMPOLINE_SIZE, PAGE_EXECUTE_READWRITE, &OldProtect)))

  000dd	85 c0		 test	 eax, eax
  000df	79 18		 jns	 SHORT $LN17@CreateHook
$LN53@CreateHook:

; 795  : #endif
; 796  :     {
; 797  :         Free(Hook);

  000e1	8b ce		 mov	 ecx, esi
  000e3	e8 00 00 00 00	 call	 _Free
  000e8	5b		 pop	 ebx
  000e9	5e		 pop	 esi
  000ea	5f		 pop	 edi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 80   : }

  000eb	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ee	33 cd		 xor	 ecx, ebp
  000f0	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000f5	8b e5		 mov	 esp, ebp
  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
$LN17@CreateHook:
; File c:\users\henry\source\repos\otc\otc\otc\libs\libs\hooklib\hooklib\hooklib\hooklib.c

; 801  :     SuspendThreads();

  000f9	e8 00 00 00 00	 call	 _SuspendThreads

; 524  :     *(PULONG)((PBYTE)WriteTo + sizeof(BYTE)) = (ULONG)((PBYTE)Dest - ((PBYTE)Src + 5));

  000fe	b8 00 00 00 00	 mov	 eax, OFFSET ?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z ; SegmentFramework::CustomVirtualCaller
  00103	c6 07 e9	 mov	 BYTE PTR [edi], 233	; 000000e9H
  00106	2b c7		 sub	 eax, edi

; 828  :     Protect(Target, REL_TRAMPOLINE_SIZE, OldProtect, &OldProtect);

  00108	8b cf		 mov	 ecx, edi

; 524  :     *(PULONG)((PBYTE)WriteTo + sizeof(BYTE)) = (ULONG)((PBYTE)Dest - ((PBYTE)Src + 5));

  0010a	83 e8 05	 sub	 eax, 5
  0010d	89 47 01	 mov	 DWORD PTR [edi+1], eax

; 828  :     Protect(Target, REL_TRAMPOLINE_SIZE, OldProtect, &OldProtect);

  00110	8d 45 f8	 lea	 eax, DWORD PTR _OldProtect$10[ebp]
  00113	50		 push	 eax
  00114	ff 75 f8	 push	 DWORD PTR _OldProtect$10[ebp]
  00117	89 1d 00 00 00
	00		 mov	 DWORD PTR ?OriginalVirtualCaller@SegmentFramework@@2P6IIPAXH@ZA, ebx ; SegmentFramework::OriginalVirtualCaller
  0011d	e8 00 00 00 00	 call	 _Protect

; 35   :     return (void*)__readfsdword(0x18);

  00122	64 a1 18 00 00
	00		 mov	 eax, DWORD PTR fs:24

; 837  :     EnumProcesses(FixupContextsCallback, &FixupInfo);

  00128	8d 55 d4	 lea	 edx, DWORD PTR _FixupInfo$5[ebp]
  0012b	83 c4 08	 add	 esp, 8
  0012e	b9 00 00 00 00	 mov	 ecx, OFFSET _FixupContextsCallback
  00133	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  00136	89 45 d4	 mov	 DWORD PTR _FixupInfo$5[ebp], eax

; 35   :     return (void*)__readfsdword(0x18);

  00139	64 a1 18 00 00
	00		 mov	 eax, DWORD PTR fs:24

; 833  :     FixupInfo.CurrentTid = __tid();

  0013f	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00142	89 45 d8	 mov	 DWORD PTR _FixupInfo$5[ebp+4], eax

; 834  :     FixupInfo.AffectedCode = Target;

  00145	89 7d dc	 mov	 DWORD PTR _FixupInfo$5[ebp+8], edi

; 835  :     FixupInfo.OriginalCode = Hook->OriginalBeginning;

  00148	89 5d e0	 mov	 DWORD PTR _FixupInfo$5[ebp+12], ebx

; 836  :     FixupInfo.Size = Hook->OriginalDataSize;

  0014b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0014e	89 45 e4	 mov	 DWORD PTR _FixupInfo$5[ebp+16], eax

; 837  :     EnumProcesses(FixupContextsCallback, &FixupInfo);

  00151	e8 00 00 00 00	 call	 _EnumProcesses@8

; 838  : 
; 839  :     NtFlushInstructionCache(NtCurrentProcess(), NULL, 0);

  00156	6a 00		 push	 0
  00158	6a 00		 push	 0
  0015a	6a ff		 push	 -1
  0015c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtFlushInstructionCache@12

; 840  :     ResumeThreads();

  00162	e8 00 00 00 00	 call	 _ResumeThreads
  00167	5b		 pop	 ebx
$LN50@CreateHook:
  00168	5e		 pop	 esi
$LN14@CreateHook:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 80   : }

  00169	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016c	33 cd		 xor	 ecx, ebp
  0016e	5f		 pop	 edi
  0016f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	c3		 ret	 0
$LN55@CreateHook:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  00178	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0017d	b9 01 00 00 00	 mov	 ecx, 1
  00182	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN52@CreateHook:
  00187	cc		 int	 3
?CreateHook@SegmentFramework@@QAEXXZ ENDP		; SegmentFramework::CreateHook
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
;	COMDAT ?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z
_TEXT	SEGMENT
?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z PROC	; SegmentFramework::CustomVirtualCaller, COMDAT
; _vTable$ = ecx
; _index$ = edx

; 82   : UINT SegmentFramework::CustomVirtualCaller (PVOID vTable, INT index) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 83   : 
; 84   :     //Last index update you can found on UC. (https://www.unknowncheats.me/forum/counterstrike-global-offensive/310246-updates-megathread.html)
; 85   : 
; 86   :     if (index >= 152) {

  00003	81 fa 98 00 00
	00		 cmp	 edx, 152		; 00000098H
  00009	7c 27		 jl	 SHORT $LN5@CustomVirt

; 87   : 
; 88   :         index += 2;

  0000b	8d 42 02	 lea	 eax, DWORD PTR [edx+2]

; 89   : 
; 90   :         if (index >= 256) index++;
; 91   :         if (index >= 300) index += 2;
; 92   :         if (index >= 300) index++;

  0000e	33 c9		 xor	 ecx, ecx
  00010	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00015	0f 9d c1	 setge	 cl
  00018	83 c2 02	 add	 edx, 2
  0001b	03 ca		 add	 ecx, edx
  0001d	81 f9 2c 01 00
	00		 cmp	 ecx, 300		; 0000012cH
  00023	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
  00026	0f 4c d1	 cmovl	 edx, ecx
  00029	81 fa 2c 01 00
	00		 cmp	 edx, 300		; 0000012cH
  0002f	7c 01		 jl	 SHORT $LN5@CustomVirt
  00031	42		 inc	 edx
$LN5@CustomVirt:

; 93   : 
; 94   :     }
; 95   : 
; 96   :     return SegmentFramework::OriginalVirtualCaller(vTable, index);

  00032	a1 00 00 00 00	 mov	 eax, DWORD PTR ?OriginalVirtualCaller@SegmentFramework@@2P6IIPAXH@ZA ; SegmentFramework::OriginalVirtualCaller
  00037	8b ce		 mov	 ecx, esi
  00039	5e		 pop	 esi
  0003a	ff e0		 jmp	 eax
?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z ENDP	; SegmentFramework::CustomVirtualCaller
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
;	COMDAT ?UpdateWatermark@SegmentFramework@@QAEXPBD0@Z
_TEXT	SEGMENT
_watermark$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_mark$ = 8						; size = 4
_player$dead$ = 12					; size = 4
?UpdateWatermark@SegmentFramework@@QAEXPBD0@Z PROC	; SegmentFramework::UpdateWatermark, COMDAT
; _this$dead$ = ecx

; 102  : void SegmentFramework::UpdateWatermark (const char* mark, const char* player) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _mark$[ebp]
  00013	56		 push	 esi

; 114  :        std::strncpy (watermark, mark, 16);                                                                                                                       //

  00014	6a 10		 push	 16			; 00000010H
  00016	50		 push	 eax
  00017	8d 45 ec	 lea	 eax, DWORD PTR _watermark$[ebp]
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00021	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 114  :        std::strncpy (watermark, mark, 16);                                                                                                                       //

  00027	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  0002a	85 f6		 test	 esi, esi
  0002c	74 44		 je	 SHORT $LN25@UpdateWate
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h

; 25   : 		return UnsafeAllocatedPointer;

  0002e	33 c9		 xor	 ecx, ecx
  00030	8d 55 ec	 lea	 edx, DWORD PTR _watermark$[ebp]
$LL13@UpdateWate:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 126  :         std::memcpy (reinterpret_cast <DWORD*> (base + offsetToInstructions + instructionsIterator), compressedArray + segmentedCharIterator, instructionCharMoveCount);

  00033	8b 02		 mov	 eax, DWORD PTR [edx]

; 127  :         segmentedCharIterator += arrayCharCycleUpdate;

  00035	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  00038	89 84 0e 81 d3
	12 00		 mov	 DWORD PTR [esi+ecx+1233793], eax
  0003f	83 c1 07	 add	 ecx, 7
  00042	83 f9 1c	 cmp	 ecx, 28			; 0000001cH
  00045	7c ec		 jl	 SHORT $LL13@UpdateWate
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  0004c	5e		 pop	 esi
  0004d	85 c0		 test	 eax, eax
  0004f	74 21		 je	 SHORT $LN25@UpdateWate
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 128  :        std::memmove (reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer() + 0x1), player, 0x20);                                                        //

  00051	6a 20		 push	 32			; 00000020H
  00053	40		 inc	 eax
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EEMOAPMJ@OTC?5Rehost@
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 _memmove

; 132  : }

  0005f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	33 cd		 xor	 ecx, ebp
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c2 08 00	 ret	 8
$LN25@UpdateWate:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  00072	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  00077	b9 01 00 00 00	 mov	 ecx, 1
  0007c	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN26@UpdateWate:
  00081	cc		 int	 3
?UpdateWatermark@SegmentFramework@@QAEXPBD0@Z ENDP	; SegmentFramework::UpdateWatermark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
;	COMDAT ?UpdateMenuWatermark@SegmentFramework@@QAEXPBD@Z
_TEXT	SEGMENT
_watermark$ = -16					; size = 12
__$ArrayPad$ = -4					; size = 4
_value$dead$ = 8					; size = 4
?UpdateMenuWatermark@SegmentFramework@@QAEXPBD@Z PROC	; SegmentFramework::UpdateMenuWatermark, COMDAT
; _this$dead$ = ecx

; 134  : void SegmentFramework::UpdateMenuWatermark (const char* value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi

; 146  :        std::strncpy (watermark, value, 12);                                                                                                                      //

  00011	6a 0c		 push	 12			; 0000000cH
  00013	8d 45 f0	 lea	 eax, DWORD PTR _watermark$[ebp]
  00016	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BBKHIBA@yajjihack?5@
  0001b	50		 push	 eax
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncpy
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00022	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 146  :        std::strncpy (watermark, value, 12);                                                                                                                      //

  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  0002b	85 f6		 test	 esi, esi
  0002d	74 2a		 je	 SHORT $LN21@UpdateMenu
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h

; 25   : 		return UnsafeAllocatedPointer;

  0002f	33 c0		 xor	 eax, eax
  00031	8d 55 f0	 lea	 edx, DWORD PTR _watermark$[ebp]
$LL13@UpdateMenu:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 126  :         std::memcpy (reinterpret_cast <DWORD*> (base + offsetToInstructions + instructionsIterator), compressedArray + segmentedCharIterator, instructionCharMoveCount);

  00034	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 127  :         segmentedCharIterator += arrayCharCycleUpdate;

  00036	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  00039	89 8c 06 5f 02
	0e 00		 mov	 DWORD PTR [esi+eax+918111], ecx
  00040	83 c0 07	 add	 eax, 7
  00043	83 f8 15	 cmp	 eax, 21			; 00000015H
  00046	7c ec		 jl	 SHORT $LL13@UpdateMenu
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 155  : }

  00048	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004b	33 cd		 xor	 ecx, ebp
  0004d	5e		 pop	 esi
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
$LN21@UpdateMenu:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  00059	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0005e	b9 01 00 00 00	 mov	 ecx, 1
  00063	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN19@UpdateMenu:
  00068	cc		 int	 3
?UpdateMenuWatermark@SegmentFramework@@QAEXPBD@Z ENDP	; SegmentFramework::UpdateMenuWatermark
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
;	COMDAT ?SetMenuStatus@SegmentFramework@@QAEX_N@Z
_TEXT	SEGMENT
_status$dead$ = 8					; size = 1
?SetMenuStatus@SegmentFramework@@QAEX_N@Z PROC		; SegmentFramework::SetMenuStatus, COMDAT
; _this$dead$ = ecx
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00005	85 c0		 test	 eax, eax
  00007	74 0d		 je	 SHORT $LN12@SetMenuSta
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 160  : }

  00009	c7 80 67 5f 48
	00 00 00 00 00	 mov	 DWORD PTR [eax+4743015], 0
  00013	c2 04 00	 ret	 4
$LN12@SetMenuSta:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  00016	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0001b	b9 01 00 00 00	 mov	 ecx, 1
  00020	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN10@SetMenuSta:
  00025	cc		 int	 3
?SetMenuStatus@SegmentFramework@@QAEX_N@Z ENDP		; SegmentFramework::SetMenuStatus
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_end@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Unchecked_end@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1689 : 		return (this->_Mylast());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1690 : 		}

  00003	c3		 ret	 0
?_Unchecked_end@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Unchecked_begin@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1679 : 		return (this->_Myfirst());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1680 : 		}

  00002	c3		 ret	 0
?_Unchecked_begin@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Mylast, COMDAT
; _this$ = ecx

; 586  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 587  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$allocator@K@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$allocator@K@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal, COMDAT
; _this$ = ecx

; 545  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 546  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$allocator@K@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@ABEXPAK0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@ABEXPAK0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1960 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@KV?$allocator@K@std@@@std@@ABEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@KV?$allocator@K@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
?_Has_unused_capacity@?$vector@KV?$allocator@K@std@@@std@@ABE_NXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00006	0f 95 c0	 setne	 al

; 1727 : 		}

  00009	c3		 ret	 0
?_Has_unused_capacity@?$vector@KV?$allocator@K@std@@@std@@ABE_NXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?data@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ
_TEXT	SEGMENT
?data@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::data, COMDAT
; _this$ = ecx

; 1609 : 		return (_Unfancy_maybe_null(this->_Myfirst()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1610 : 		}

  00002	c3		 ret	 0
?data@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e2 fc	 and	 edx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00011	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN80@vector

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN77@vector

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b c1		 mov	 eax, ecx
$LN80@vector:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 895  : 		}

  0004a	c3		 ret	 0
$LN77@vector:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN103@vector:
  00051	cc		 int	 3
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 652  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 652  : 		}

  00016	c3		 ret	 0
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?at@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEAAPBDI@Z
_TEXT	SEGMENT
__Pos$dead$ = 8						; size = 4
?at@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEAAPBDI@Z PROC ; std::vector<char const *,std::allocator<char const *> >::at, COMDAT
; _this$ = ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 11		 mov	 edx, DWORD PTR [ecx]
  00005	2b c2		 sub	 eax, edx
  00007	c1 f8 02	 sar	 eax, 2

; 1750 : 		if (size() <= _Pos)

  0000a	85 c0		 test	 eax, eax
  0000c	74 05		 je	 SHORT $LN26@at

; 1753 : 			}
; 1754 : 
; 1755 : 		return (this->_Myfirst()[_Pos]);

  0000e	8b c2		 mov	 eax, edx

; 1756 : 		}

  00010	c2 04 00	 ret	 4
$LN26@at:

; 1751 : 			{
; 1752 : 			_Xrange();

  00013	e8 00 00 00 00	 call	 ?_Xrange@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xrange
$LN24@at:
  00018	cc		 int	 3
?at@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEAAPBDI@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::at
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ
_TEXT	SEGMENT
?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1689 : 		return (this->_Mylast());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1690 : 		}

  00003	c3		 ret	 0
?_Unchecked_end@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ
_TEXT	SEGMENT
?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1679 : 		return (this->_Myfirst());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1680 : 		}

  00002	c3		 ret	 0
?_Unchecked_begin@?$vector@PBDV?$allocator@PBD@std@@@std@@QAEPAPBDXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ PROC	; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e2 fc	 and	 edx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00011	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN80@vector

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN77@vector

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b c1		 mov	 eax, ecx
$LN80@vector:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 895  : 		}

  0004a	c3		 ret	 0
$LN77@vector:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN103@vector:
  00051	cc		 int	 3
??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ENDP	; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T32 = -1						; size = 1
__Right$ = 8						; size = 4
??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]

; 389  : 		: _Myfirst(),

  0000b	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 390  : 		_Mylast(),

  00011	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 391  : 		_Myend()

  00018	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	2b 06		 sub	 eax, DWORD PTR [esi]
  00024	c1 f8 02	 sar	 eax, 2

; 735  : 		if (_Buy(_Right.size()))

  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?_Buy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAE_NI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy
  0002d	84 c0		 test	 al, al
  0002f	74 25		 je	 SHORT $LN85@vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 211  : 	const auto _UFirst = _Get_unwrapped(_First);

  00031	8b 16		 mov	 edx, DWORD PTR [esi]
  00033	57		 push	 edi

; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00034	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 214  : 	_Seek_wrapped(_Dest,

  00036	51		 push	 ecx
  00037	8d 4d ff	 lea	 ecx, DWORD PTR $T32[ebp]
  0003a	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@PBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBD0@Z ; std::_Ptr_copy_cat<char const *,char const *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0003f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00042	2b f2		 sub	 esi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00044	56		 push	 esi
  00045	52		 push	 edx
  00046	57		 push	 edi
  00047	e8 00 00 00 00	 call	 _memmove
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0004f	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

  00052	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();
; 741  : 			_RERAISE;
; 742  : 			_CATCH_END
; 743  : 			}
; 744  : 		}

  00055	5f		 pop	 edi
$LN85@vector:
  00056	5e		 pop	 esi
  00057	8b c3		 mov	 eax, ebx
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SA?AV?$allocator@PBD@2@ABV32@@Z
_TEXT	SEGMENT
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SA?AV?$allocator@PBD@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char const *> >::select_on_container_copy_construction, COMDAT
; ___$ReturnUdt$ = ecx
; __Al$dead$ = edx

; 897  : 		return (_Al);

  00000	8b c1		 mov	 eax, ecx

; 898  : 		}

  00002	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SA?AV?$allocator@PBD@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char const *> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Mylast, COMDAT
; _this$ = ecx

; 591  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 592  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Mylast, COMDAT
; _this$ = ecx

; 586  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 587  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 581  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 582  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myfirst, COMDAT
; _this$ = ecx

; 576  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 577  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABV?$allocator@PBD@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Getal, COMDAT
; _this$ = ecx

; 550  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 551  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABV?$allocator@PBD@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Mylast, COMDAT
; _this$ = ecx

; 586  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 587  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myfirst, COMDAT
; _this$ = ecx

; 576  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 577  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$allocator@K@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$allocator@K@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$allocator@K@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myend, COMDAT
; _this$ = ecx

; 601  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 602  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Mylast, COMDAT
; _this$ = ecx

; 591  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 592  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myfirst, COMDAT
; _this$ = ecx

; 581  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 582  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABQAKXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myfirst, COMDAT
; _this$ = ecx

; 576  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 577  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data, COMDAT
; _this$ = ecx

; 555  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 556  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$allocator@K@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$allocator@K@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal, COMDAT
; _this$ = ecx

; 550  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 551  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$allocator@K@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 423  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 423  : 		}

  00016	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@AAEXXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1911 : 		this->_Orphan_all();
; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN2@Tidy

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e2 fc	 and	 edx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00011	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN78@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN75@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b c1		 mov	 eax, ecx
$LN78@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 1922 : 		}

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN75@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN100@Tidy:
  00051	cc		 int	 3
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@AAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::size, COMDAT
; _this$ = ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1705 : 		}

  00008	c3		 ret	 0
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ PROC ; std::vector<char const *,std::allocator<char const *> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1911 : 		this->_Orphan_all();
; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN2@Tidy

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e2 fc	 and	 edx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00011	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN78@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN75@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b c1		 mov	 eax, ecx
$LN78@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 1922 : 		}

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN75@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN100@Tidy:
  00051	cc		 int	 3
?_Tidy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAE_NI@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1873 : 		this->_Myfirst() = pointer();
; 1874 : 		this->_Mylast() = pointer();
; 1875 : 		this->_Myend() = pointer();
; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Newcapacity$[ebp]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001e	85 ff		 test	 edi, edi
  00020	75 08		 jne	 SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

  00022	5f		 pop	 edi
  00023	32 c0		 xor	 al, al

; 1892 : 		}

  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

  0002a	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00030	77 7f		 ja	 SHORT $LN99@Buy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00032	c1 e7 02	 shl	 edi, 2

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00035	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0003b	72 3d		 jb	 SHORT $LN45@Buy

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0003d	8d 47 23	 lea	 eax, DWORD PTR [edi+35]

; 94   : 	if (_Block_size <= _Bytes)

  00040	83 c9 ff	 or	 ecx, -1
  00043	3b c7		 cmp	 eax, edi
  00045	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0004e	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00050	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00053	85 c9		 test	 ecx, ecx
  00055	74 1d		 je	 SHORT $LN54@Buy

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00057	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0005a	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0005d	89 48 fc	 mov	 DWORD PTR [eax-4], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00060	89 06		 mov	 DWORD PTR [esi], eax

; 1888 : 		this->_Mylast() = this->_Myfirst();

  00062	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	03 c7		 add	 eax, edi
  00069	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  0006c	b0 01		 mov	 al, 1
  0006e	5f		 pop	 edi

; 1892 : 		}

  0006f	5e		 pop	 esi
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN54@Buy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN45@Buy:

; 188  : 	if (_Bytes != 0)

  0007a	85 ff		 test	 edi, edi
  0007c	74 1d		 je	 SHORT $LN46@Buy

; 52   : 		return (::operator new(_Bytes));

  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00084	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00086	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1888 : 		this->_Mylast() = this->_Myfirst();

  00089	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  0008c	8b 06		 mov	 eax, DWORD PTR [esi]
  0008e	03 c7		 add	 eax, edi
  00090	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  00093	b0 01		 mov	 al, 1
  00095	5f		 pop	 edi

; 1892 : 		}

  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
$LN46@Buy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 193  : 	return (nullptr);

  0009b	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  0009d	89 06		 mov	 DWORD PTR [esi], eax

; 1888 : 		this->_Mylast() = this->_Myfirst();

  0009f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  000a2	8b 06		 mov	 eax, DWORD PTR [esi]
  000a4	03 c7		 add	 eax, edi
  000a6	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  000a9	b0 01		 mov	 al, 1
  000ab	5f		 pop	 edi

; 1892 : 		}

  000ac	5e		 pop	 esi
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN99@Buy:

; 1883 : 			{
; 1884 : 			_Xlength();

  000b1	e8 00 00 00 00	 call	 ?_Xlength@?$vector@PBDV?$allocator@PBD@std@@@std@@CAXXZ ; std::vector<char const *,std::allocator<char const *> >::_Xlength
$LN97@Buy:
  000b6	cc		 int	 3
?_Buy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAE_NI@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Buy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ PROC ; std::vector<char const *,std::allocator<char const *> >::size, COMDAT
; _this$ = ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1705 : 		}

  00008	c3		 ret	 0
?size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$allocator@PBD@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myend, COMDAT
; _this$ = ecx

; 596  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 597  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAPAPBDXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Get_data, COMDAT
; _this$ = ecx

; 560  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 561  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Get_data, COMDAT
; _this$ = ecx

; 555  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 556  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAV?$allocator@PBD@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Getal, COMDAT
; _this$ = ecx

; 545  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 546  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEAAV?$allocator@PBD@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 535  : 		_Get_data()._Orphan_all();
; 536  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Get_data, COMDAT
; _this$ = ecx

; 555  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 556  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$allocator@K@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$allocator@K@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$allocator@K@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myend, COMDAT
; _this$ = ecx

; 596  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 597  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAKXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data, COMDAT
; _this$ = ecx

; 560  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 561  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 535  : 		_Get_data()._Orphan_all();
; 536  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK0@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1850 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity, COMDAT
; _this$ = ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1716 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$dead$ = ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@K@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@K@std@@QAEPAKI@Z PROC		; std::allocator<unsigned long>::allocate, COMDAT
; _this$dead$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]

; 26   : 	if (_Max_possible < _Count)

  0000d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00012	76 05		 jbe	 SHORT $LN4@allocate

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00014	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00017	eb 08		 jmp	 SHORT $LN27@allocate
$LN4@allocate:
  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 2d		 jb	 SHORT $LN7@allocate
$LN27@allocate:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00021	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00024	83 ca ff	 or	 edx, -1
  00027	3b c1		 cmp	 eax, ecx
  00029	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00032	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00034	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00037	85 c9		 test	 ecx, ecx
  00039	74 0d		 je	 SHORT $LN16@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0003b	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003e	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00041	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN16@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@allocate:

; 188  : 	if (_Bytes != 0)

  0004e	85 c9		 test	 ecx, ecx
  00050	74 0d		 je	 SHORT $LN8@allocate

; 52   : 		return (::operator new(_Bytes));

  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00058	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN8@allocate:

; 193  : 	return (nullptr);

  0005f	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
$LN28@allocate:
?allocate@?$allocator@K@std@@QAEPAKI@Z ENDP		; std::allocator<unsigned long>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXQAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXQAKI@Z PROC		; std::allocator<unsigned long>::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00010	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00016	72 14		 jb	 SHORT $LN15@deallocate

; 115  : 	_Bytes += _Non_user_size;

  00018	56		 push	 esi

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b ce		 sub	 ecx, esi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 11		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002c	52		 push	 edx
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8

; 993  : 		}

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00040	cc		 int	 3
?deallocate@?$allocator@K@std@@QAEXQAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1850 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPAPBD0@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ PROC ; std::vector<char const *,std::allocator<char const *> >::capacity, COMDAT
; _this$ = ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 02	 sar	 eax, 2

; 1716 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ PROC ; std::vector<char const *,std::allocator<char const *> >::max_size, COMDAT
; _this$dead$ = ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PBDV?$allocator@PBD@std@@@std@@QBEIXZ ENDP ; std::vector<char const *,std::allocator<char const *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z PROC		; std::allocator<char const *>::allocate, COMDAT
; _this$dead$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]

; 26   : 	if (_Max_possible < _Count)

  0000d	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00012	76 05		 jbe	 SHORT $LN4@allocate

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00014	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00017	eb 08		 jmp	 SHORT $LN27@allocate
$LN4@allocate:
  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 2d		 jb	 SHORT $LN7@allocate
$LN27@allocate:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00021	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00024	83 ca ff	 or	 edx, -1
  00027	3b c1		 cmp	 eax, ecx
  00029	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00032	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00034	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00037	85 c9		 test	 ecx, ecx
  00039	74 0d		 je	 SHORT $LN16@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0003b	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003e	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00041	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN16@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@allocate:

; 188  : 	if (_Bytes != 0)

  0004e	85 c9		 test	 ecx, ecx
  00050	74 0d		 je	 SHORT $LN8@allocate

; 52   : 		return (::operator new(_Bytes));

  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00058	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN8@allocate:

; 193  : 	return (nullptr);

  0005f	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
$LN28@allocate:
?allocate@?$allocator@PBD@std@@QAEPAPBDI@Z ENDP		; std::allocator<char const *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z PROC	; std::allocator<char const *>::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00010	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00016	72 14		 jb	 SHORT $LN15@deallocate

; 115  : 	_Bytes += _Non_user_size;

  00018	56		 push	 esi

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b ce		 sub	 ecx, esi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 11		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002c	52		 push	 edx
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8

; 993  : 		}

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00040	cc		 int	 3
?deallocate@?$allocator@PBD@std@@QAEXQAPBDI@Z ENDP	; std::allocator<char const *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@PBD@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAEAAV?$allocator@PBD@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SAIABV?$allocator@PBD@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SAIABV?$allocator@PBD@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char const *> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 893  : 		}

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@PBD@std@@@std@@SAIABV?$allocator@PBD@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char const *> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myend, COMDAT
; _this$ = ecx

; 601  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 602  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QBEABQAPBDXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@K@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned long> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 893  : 		}

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00004	0f 42 ca	 cmovb	 ecx, edx
  00007	8b c1		 mov	 eax, ecx

; 25   : 	}

  00009	c3		 ret	 0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@K@std@@YA$$QAKAAK@Z
_TEXT	SEGMENT
??$forward@K@std@@YA$$QAKAAK@Z PROC			; std::forward<unsigned long>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@K@std@@YA$$QAKAAK@Z ENDP			; std::forward<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@K@std@@YAPAKPAK@Z
_TEXT	SEGMENT
??$_Unfancy@K@std@@YAPAKPAK@Z PROC			; std::_Unfancy<unsigned long>, COMDAT
; __Ptr$ = ecx

; 346  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 347  : 	}

  00002	c3		 ret	 0
??$_Unfancy@K@std@@YAPAKPAK@Z ENDP			; std::_Unfancy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@KK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAK$$QAK@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@KK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAK$$QAK@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@KK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAK$$QAK@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z
_TEXT	SEGMENT
tv761 = -20						; size = 4
__Newsize$1$ = -16					; size = 4
tv759 = -12						; size = 4
__Whereoff$1$ = -12					; size = 4
__Whereptr$GSCopy$1$ = -8				; size = 4
$T89 = -1						; size = 1
$T57 = -1						; size = 1
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 45 f8	 mov	 DWORD PTR __Whereptr$GSCopy$1$[ebp], eax
  0000f	56		 push	 esi
  00010	57		 push	 edi

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  00011	8b 13		 mov	 edx, DWORD PTR [ebx]
  00013	2b c2		 sub	 eax, edx
  00015	c1 f8 02	 sar	 eax, 2
  00018	89 45 f4	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0001b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001e	2b c2		 sub	 eax, edx
  00020	c1 f8 02	 sar	 eax, 2

; 945  : 		_Alty& _Al = this->_Getal();
; 946  : 		const size_type _Oldsize = size();
; 947  : 
; 948  : 		if (_Oldsize == max_size())

  00023	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00028	0f 84 fe 00 00
	00		 je	 $LN222@Emplace_re

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0002e	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  00031	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00034	2b ca		 sub	 ecx, edx

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  00036	89 75 f0	 mov	 DWORD PTR __Newsize$1$[ebp], esi

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00039	c1 f9 02	 sar	 ecx, 2

; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  0003c	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00041	8b d1		 mov	 edx, ecx
  00043	d1 ea		 shr	 edx, 1
  00045	2b c2		 sub	 eax, edx
  00047	3b c8		 cmp	 ecx, eax
  00049	76 04		 jbe	 SHORT $LN48@Emplace_re

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

  0004b	8b fe		 mov	 edi, esi
  0004d	eb 08		 jmp	 SHORT $LN49@Emplace_re
$LN48@Emplace_re:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004f	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  00052	3b fe		 cmp	 edi, esi
  00054	0f 42 fe	 cmovb	 edi, esi
$LN49@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00057	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]

; 26   : 	if (_Max_possible < _Count)

  0005e	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00064	76 05		 jbe	 SHORT $LN80@Emplace_re

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00066	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00069	eb 08		 jmp	 SHORT $LN218@Emplace_re
$LN80@Emplace_re:
  0006b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00071	72 29		 jb	 SHORT $LN83@Emplace_re
$LN218@Emplace_re:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00073	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00076	83 ca ff	 or	 edx, -1
  00079	3b c1		 cmp	 eax, ecx
  0007b	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00084	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00087	85 c0		 test	 eax, eax
  00089	74 0b		 je	 SHORT $LN92@Emplace_re

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0008b	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  0008e	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00091	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00094	eb 19		 jmp	 SHORT $LN82@Emplace_re
$LN92@Emplace_re:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN83@Emplace_re:

; 188  : 	if (_Bytes != 0)

  0009c	85 c9		 test	 ecx, ecx
  0009e	74 0d		 je	 SHORT $LN84@Emplace_re

; 52   : 		return (::operator new(_Bytes));

  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a6	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000a9	8b f0		 mov	 esi, eax
  000ab	eb 02		 jmp	 SHORT $LN82@Emplace_re
$LN84@Emplace_re:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000ad	33 f6		 xor	 esi, esi
$LN82@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000af	8b 45 f4	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000b2	c1 e0 02	 shl	 eax, 2
  000b5	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000b8	89 45 ec	 mov	 DWORD PTR tv761[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000bb	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 964  : 		if (_Whereptr == this->_Mylast())

  000be	51		 push	 ecx
  000bf	89 4d f4	 mov	 DWORD PTR tv759[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000c2	8b 00		 mov	 eax, DWORD PTR [eax]
  000c4	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 964  : 		if (_Whereptr == this->_Mylast())

  000c6	8d 4d ff	 lea	 ecx, DWORD PTR $T57[ebp]
  000c9	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  000cc	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_move_cat<unsigned long,unsigned long>
  000d1	39 55 f8	 cmp	 DWORD PTR __Whereptr$GSCopy$1$[ebp], edx
  000d4	75 09		 jne	 SHORT $LN4@Emplace_re
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000d6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d8	2b d0		 sub	 edx, eax

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000da	52		 push	 edx
  000db	50		 push	 eax
  000dc	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 968  : 		else

  000dd	eb 2b		 jmp	 SHORT $LN220@Emplace_re
$LN4@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000df	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000e1	8b 45 f8	 mov	 eax, DWORD PTR __Whereptr$GSCopy$1$[ebp]
  000e4	2b c1		 sub	 eax, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000e6	50		 push	 eax
  000e7	51		 push	 ecx
  000e8	56		 push	 esi
  000e9	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  000ee	8b 55 f4	 mov	 edx, DWORD PTR tv759[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  000f1	8d 4d ff	 lea	 ecx, DWORD PTR $T89[ebp]
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  000f7	83 c2 04	 add	 edx, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  000fa	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_move_cat<unsigned long,unsigned long>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000ff	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00102	8b 4d f8	 mov	 ecx, DWORD PTR __Whereptr$GSCopy$1$[ebp]
  00105	2b c1		 sub	 eax, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00107	50		 push	 eax
  00108	51		 push	 ecx
  00109	52		 push	 edx
$LN220@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

  0010a	e8 00 00 00 00	 call	 _memmove
  0010f	83 c4 10	 add	 esp, 16			; 00000010H
  00112	8b cb		 mov	 ecx, ebx
  00114	57		 push	 edi
  00115	ff 75 f0	 push	 DWORD PTR __Newsize$1$[ebp]
  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

  0011e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00120	03 45 ec	 add	 eax, DWORD PTR tv761[ebp]
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 982  : 		}

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN222@Emplace_re:

; 949  : 			{
; 950  : 			_Xlength();

  0012c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN219@Emplace_re:
  00131	cc		 int	 3
??$_Emplace_reallocate@K@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAK$$QAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Unfancy_maybe_null@K@std@@YAPAKPAK@Z
_TEXT	SEGMENT
??$_Unfancy_maybe_null@K@std@@YAPAKPAK@Z PROC		; std::_Unfancy_maybe_null<unsigned long>, COMDAT
; __Ptr$ = ecx

; 618  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 619  : 	}

  00002	c3		 ret	 0
??$_Unfancy_maybe_null@K@std@@YAPAKPAK@Z ENDP		; std::_Unfancy_maybe_null<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@PBD@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@$$QAV?$allocator@PBD@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$?0V?$allocator@PBD@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@$$QAV?$allocator@PBD@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > ><std::allocator<char const *>,void>, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 431  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 431  : 		}

  00016	c2 04 00	 ret	 4
??$?0V?$allocator@PBD@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@$$QAV?$allocator@PBD@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > ><std::allocator<char const *>,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAPBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPAPBD00@Z
_TEXT	SEGMENT
$T6 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAPBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPAPBD00@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * *>, COMDAT
; _this$dead$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 214  : 	_Seek_wrapped(_Dest,

  0000f	51		 push	 ecx
  00010	8d 4d ff	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@PBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBD0@Z ; std::_Ptr_copy_cat<char const *,char const *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	2b fa		 sub	 edi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0001a	57		 push	 edi
  0001b	52		 push	 edx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1824 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAPBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPAPBD00@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z
_TEXT	SEGMENT
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits,0>, COMDAT
; __Bytes$ = ecx

; 181  :  #if defined(_M_IX86) || defined(_M_X64)
; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00000	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00006	72 2a		 jb	 SHORT $LN2@Allocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00008	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0000b	83 ca ff	 or	 edx, -1
  0000e	3b c1		 cmp	 eax, ecx
  00010	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00019	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  0001b	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0001e	85 c9		 test	 ecx, ecx
  00020	74 0a		 je	 SHORT $LN11@Allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00022	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00025	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00028	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 194  : 	}

  0002b	c3		 ret	 0
$LN11@Allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0002c	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Allocate:

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));
; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00032	85 c9		 test	 ecx, ecx
  00034	74 0a		 je	 SHORT $LN3@Allocate

; 52   : 		return (::operator new(_Bytes));

  00036	51		 push	 ecx
  00037	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003c	83 c4 04	 add	 esp, 4

; 194  : 	}

  0003f	c3		 ret	 0
$LN3@Allocate:

; 189  : 		{
; 190  : 		return (_Traits::_Allocate(_Bytes));
; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00040	33 c0		 xor	 eax, eax

; 194  : 	}

  00042	c3		 ret	 0
??$_Allocate@$07U_Default_allocate_traits@std@@$0A@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Deallocate@$07$0A@@std@@YAXPAXI@Z
_TEXT	SEGMENT
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z PROC		; std::_Deallocate<8,0>, COMDAT
; __Ptr$ = ecx
; __Bytes$ = edx

; 200  :  #if defined(_M_IX86) || defined(_M_X64)
; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00000	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00006	72 14		 jb	 SHORT $LN13@Deallocate

; 115  : 	_Bytes += _Non_user_size;

  00008	56		 push	 esi

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00009	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0000c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0000f	2b ce		 sub	 ecx, esi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00011	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00014	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00017	77 0e		 ja	 SHORT $LN10@Deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00019	8b ce		 mov	 ecx, esi
  0001b	5e		 pop	 esi
$LN13@Deallocate:

; 202  : 		{	// boost the alignment of big allocations to help autovectorization
; 203  : 		_Adjust_manually_vector_aligned(_Ptr, _Bytes);
; 204  : 		}
; 205  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 206  : 
; 207  : 	::operator delete(_Ptr, _Bytes);

  0001c	52		 push	 edx
  0001d	51		 push	 ecx
  0001e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00023	83 c4 08	 add	 esp, 8

; 208  : 	}

  00026	c3		 ret	 0
$LN10@Deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN15@Deallocate:
  0002d	cc		 int	 3
??$_Deallocate@$07$0A@@std@@YAXPAXI@Z ENDP		; std::_Deallocate<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT
; __Count$ = ecx

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;
; 26   : 	if (_Max_possible < _Count)

  00000	83 ca ff	 or	 edx, -1
  00003	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0000a	81 f9 ff ff ff
	3f		 cmp	 ecx, 1073741823		; 3fffffffH
  00010	0f 47 c2	 cmova	 eax, edx

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

  00013	c3		 ret	 0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBD0AAV?$allocator@PBD@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBD0AAV?$allocator@PBD@0@@Z PROC ; std::_Destroy_range<std::allocator<char const *> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@PBD@std@@@std@@YAXPAPBD0AAV?$allocator@PBD@0@@Z ENDP ; std::_Destroy_range<std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@K@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned long> >::_Vector_val<std::_Simple_types<unsigned long> >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 393  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@K@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned long> >::_Vector_val<std::_Simple_types<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1896 : 		this->_Orphan_all();
; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 2c		 je	 SHORT $LN79@Change_arr

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0000c	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000f	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00011	83 e2 fc	 and	 edx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00014	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN78@Change_arr

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001f	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 28		 ja	 SHORT $LN75@Change_arr

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002c	8b c1		 mov	 eax, ecx
$LN78@Change_arr:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002e	52		 push	 edx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN79@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1904 : 		this->_Myfirst() = _Newvec;

  00038	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  0003b	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003e	89 0e		 mov	 DWORD PTR [esi], ecx
  00040	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00043	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  00046	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00049	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0004c	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004f	5e		 pop	 esi

; 1907 : 		}

  00050	5d		 pop	 ebp
  00051	c2 0c 00	 ret	 12			; 0000000cH
$LN75@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00054	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN100@Change_arr:
  0005a	cc		 int	 3
?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@KV?$allocator@K@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@KV?$allocator@K@std@@@std@@ABEII@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 1854 : 		const size_type _Oldcapacity = capacity();
; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00006	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000d	c1 fa 02	 sar	 edx, 2

; 1854 : 		const size_type _Oldcapacity = capacity();
; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00010	8b ca		 mov	 ecx, edx
  00012	d1 e9		 shr	 ecx, 1
  00014	2b c1		 sub	 eax, ecx
  00016	3b d0		 cmp	 edx, eax
  00018	77 08		 ja	 SHORT $LN31@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow
; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0001a	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  0001d	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  00020	73 03		 jae	 SHORT $LN1@Calculate_
$LN31@Calculate_:

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

  00022	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
$LN1@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient
; 1869 : 		}

  00025	5d		 pop	 ebp
  00026	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@KV?$allocator@K@std@@@std@@ABEII@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00@Z
_TEXT	SEGMENT
$T7 = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00013	56		 push	 esi
  00014	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  0001b	51		 push	 ecx
  0001c	8d 4d fb	 lea	 ecx, DWORD PTR $T7[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_move_cat<unsigned long,unsigned long>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00024	2b d7		 sub	 edx, edi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00026	52		 push	 edx
  00027	57		 push	 edi
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1845 : 		}

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00031	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1845 : 		}

  00034	33 cd		 xor	 ecx, ebp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1845 : 		}

  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z
_TEXT	SEGMENT
$T6 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove, COMDAT
; _this$dead$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  0000f	51		 push	 ecx
  00010	8d 4d ff	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_move_cat<unsigned long,unsigned long>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	2b fa		 sub	 edi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0001a	57		 push	 edi
  0001b	52		 push	 edx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1829 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@K@std@@QAE@XZ PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@K@std@@QAE@XZ ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
$T6 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  0000f	51		 push	 ecx
  00010	8d 4d ff	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_move_cat<unsigned long,unsigned long>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	2b d7		 sub	 edx, edi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0001a	52		 push	 edx
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1834 : 		}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@KV?$allocator@K@std@@@std@@AAEXPAK00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAKPAK@std@@YAHABQAK0@Z
_TEXT	SEGMENT
??$_Idl_distance@PAKPAK@std@@YAHABQAK0@Z PROC		; std::_Idl_distance<unsigned long *,unsigned long *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	2b 01		 sub	 eax, DWORD PTR [ecx]
  00004	c1 f8 02	 sar	 eax, 2

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00007	c3		 ret	 0
??$_Idl_distance@PAKPAK@std@@YAHABQAK0@Z ENDP		; std::_Idl_distance<unsigned long *,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@PBD@std@@@std@@YA$$QAV?$allocator@PBD@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$allocator@PBD@std@@@std@@YA$$QAV?$allocator@PBD@0@AAV10@@Z PROC ; std::forward<std::allocator<char const *> >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$allocator@PBD@std@@@std@@YA$$QAV?$allocator@PBD@0@AAV10@@Z ENDP ; std::forward<std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PBD@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0V?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PBD@1@@Z PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00016	c2 08 00	 ret	 8
??$?0V?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@PBD@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPBDPAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD0PAPBDAAV?$allocator@PBD@0@@Z
_TEXT	SEGMENT
$T4 = -1						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAPBDPAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD0PAPBDAAV?$allocator@PBD@0@@Z PROC ; std::_Uninitialized_copy<char const * *,char const * *,std::allocator<char const *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000a	8b f1		 mov	 esi, ecx

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);
; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 214  : 	_Seek_wrapped(_Dest,

  0000c	51		 push	 ecx
  0000d	8d 4d ff	 lea	 ecx, DWORD PTR $T4[ebp]
  00010	8b da		 mov	 ebx, edx
  00012	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@PBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBD0@Z ; std::_Ptr_copy_cat<char const *,char const *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00017	2b de		 sub	 ebx, esi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00024	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 219  : 	return (_Dest);

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 220  : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninitialized_copy@PAPBDPAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD0PAPBDAAV?$allocator@PBD@0@@Z ENDP ; std::_Uninitialized_copy<char const * *,char const * *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAPBDPAPBD@std@@YAHABQAPBD0@Z
_TEXT	SEGMENT
??$_Idl_distance@PAPBDPAPBD@std@@YAHABQAPBD0@Z PROC	; std::_Idl_distance<char const * *,char const * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	2b 01		 sub	 eax, DWORD PTR [ecx]
  00004	c1 f8 02	 sar	 eax, 2

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00007	c3		 ret	 0
??$_Idl_distance@PAPBDPAPBD@std@@YAHABQAPBD0@Z ENDP	; std::_Idl_distance<char const * *,char const * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT
; __Bytes$ = ecx

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00000	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00003	83 ca ff	 or	 edx, -1
  00006	3b c1		 cmp	 eax, ecx
  00008	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 95   : 		{	// add overflow, try allocating all of memory and assume the
; 96   : 			// allocation function will throw bad_alloc
; 97   : 		_Block_size = static_cast<size_t>(-1);
; 98   : 		}
; 99   : 
; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00011	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00013	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00016	85 c9		 test	 ecx, ecx
  00018	74 0a		 je	 SHORT $LN7@Allocate_m

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0001a	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0001d	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00020	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 105  : 
; 106  :   #ifdef _DEBUG
; 107  : 	static_cast<uintptr_t *>(_Ptr)[-2] = _Big_allocation_sentinel;
; 108  :   #endif /* _DEBUG */
; 109  : 	return (_Ptr);
; 110  : 	}

  00023	c3		 ret	 0
$LN7@Allocate_m:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00024	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range1@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<unsigned long> >, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 1146 : 		// nothing to do
; 1147 : 	}

  00000	c3		 ret	 0
??$_Destroy_range1@V?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@PBD@std@@@std@@YAXPAPBD0AAV?$allocator@PBD@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range1@V?$allocator@PBD@std@@@std@@YAXPAPBD0AAV?$allocator@PBD@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<char const *> >, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 1146 : 		// nothing to do
; 1147 : 	}

  00000	c3		 ret	 0
??$_Destroy_range1@V?$allocator@PBD@std@@@std@@YAXPAPBD0AAV?$allocator@PBD@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT
$T4 = -1						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z PROC ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000a	8b f1		 mov	 esi, ecx

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);
; 254  : 	const auto _ULast = _Get_unwrapped(_Last);
; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 256  : 	_Seek_wrapped(_Dest,

  0000c	51		 push	 ecx
  0000d	8d 4d ff	 lea	 ecx, DWORD PTR $T4[ebp]
  00010	8b da		 mov	 ebx, edx
  00012	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_move_cat<unsigned long,unsigned long>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00017	2b de		 sub	 ebx, esi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00024	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 260  : 	return (_Dest);

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 261  : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninitialized_move@PAKPAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ENDP ; std::_Uninitialized_move<unsigned long *,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 393  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@PBD@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<char const *> >::_Vector_val<std::_Simple_types<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@K@std@@YAPAKQAK@Z
_TEXT	SEGMENT
??$_Get_unwrapped@K@std@@YAPAKQAK@Z PROC		; std::_Get_unwrapped<unsigned long>, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@K@std@@YAPAKQAK@Z ENDP		; std::_Get_unwrapped<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@KH$0A@@std@@YAPAKQAKH@Z
_TEXT	SEGMENT
??$_Get_unwrapped_n@KH$0A@@std@@YAPAKQAKH@Z PROC	; std::_Get_unwrapped_n<unsigned long,int,0>, COMDAT
; __Src$ = ecx
; ___formal$dead$ = edx

; 809  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 810  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped_n@KH$0A@@std@@YAPAKQAKH@Z ENDP	; std::_Get_unwrapped_n<unsigned long,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@K@std@@YAXAAPAKQAK@Z
_TEXT	SEGMENT
??$_Seek_wrapped@K@std@@YAXAAPAKQAK@Z PROC		; std::_Seek_wrapped<unsigned long>, COMDAT
; __It$ = ecx
; __UIt$ = edx

; 872  : 	_It = _UIt;

  00000	89 11		 mov	 DWORD PTR [ecx], edx

; 873  : 	}

  00002	c3		 ret	 0
??$_Seek_wrapped@K@std@@YAXAAPAKQAK@Z ENDP		; std::_Seek_wrapped<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@PBD@std@@YAPAPBDQAPBD@Z
_TEXT	SEGMENT
??$_Get_unwrapped@PBD@std@@YAPAPBDQAPBD@Z PROC		; std::_Get_unwrapped<char const *>, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@PBD@std@@YAPAPBDQAPBD@Z ENDP		; std::_Get_unwrapped<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@PBDH$0A@@std@@YAPAPBDQAPBDH@Z
_TEXT	SEGMENT
??$_Get_unwrapped_n@PBDH$0A@@std@@YAPAPBDQAPBDH@Z PROC	; std::_Get_unwrapped_n<char const *,int,0>, COMDAT
; __Src$ = ecx
; ___formal$dead$ = edx

; 809  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 810  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped_n@PBDH$0A@@std@@YAPAPBDQAPBDH@Z ENDP	; std::_Get_unwrapped_n<char const *,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@PBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBD0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$_Ptr_copy_cat@PBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBD0@Z PROC ; std::_Ptr_copy_cat<char const *,char const *>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 1070 : 	return {};

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00003	8b c1		 mov	 eax, ecx

; 1071 : 	}

  00005	c3		 ret	 0
??$_Ptr_copy_cat@PBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPBD0@Z ENDP ; std::_Ptr_copy_cat<char const *,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@PBDPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD00AAV?$allocator@PBD@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_copy_al_unchecked@PBDPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD00AAV?$allocator@PBD@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<char const *,char const *,std::allocator<char const *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 203  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@PBDPBDV?$allocator@PBD@std@@@std@@YAPAPBDQAPBD00AAV?$allocator@PBD@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<char const *,char const *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@PBD@std@@YAXAAPAPBDQAPBD@Z
_TEXT	SEGMENT
??$_Seek_wrapped@PBD@std@@YAXAAPAPBDQAPBD@Z PROC	; std::_Seek_wrapped<char const *>, COMDAT
; __It$ = ecx
; __UIt$ = edx

; 872  : 	_It = _UIt;

  00000	89 11		 mov	 DWORD PTR [ecx], edx

; 873  : 	}

  00002	c3		 ret	 0
??$_Seek_wrapped@PBD@std@@YAXAAPAPBDQAPBD@Z ENDP	; std::_Seek_wrapped<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z PROC ; std::_Ptr_move_cat<unsigned long,unsigned long>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 1087 : 	return {};

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00003	8b c1		 mov	 eax, ecx

; 1088 : 	}

  00005	c3		 ret	 0
??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ENDP ; std::_Ptr_move_cat<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@KKV?$allocator@K@std@@@std@@YAPAKQAK00AAV?$allocator@K@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_move_al_unchecked@KKV?$allocator@K@std@@@std@@YAPAKQAK00AAV?$allocator@K@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<unsigned long,unsigned long,std::allocator<unsigned long> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 244  : 	return (_Copy_memmove(_First, _Last, _Dest));

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 245  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@KKV?$allocator@K@std@@@std@@YAPAKQAK00AAV?$allocator@K@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<unsigned long,unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z PROC		; std::_Copy_memmove<unsigned long *,unsigned long *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 2405 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PAKPAK@std@@YAPAKPAK00@Z ENDP		; std::_Copy_memmove<unsigned long *,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAPBDPAPBD@std@@YAPAPBDPAPBD00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAPBDPAPBD@std@@YAPAPBDPAPBD00@Z PROC	; std::_Copy_memmove<char const * *,char const * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 2405 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PAPBDPAPBD@std@@YAPAPBDPAPBD00@Z ENDP	; std::_Copy_memmove<char const * *,char const * *>
_TEXT	ENDS
END
