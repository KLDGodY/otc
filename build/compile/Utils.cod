; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27034.0 

	TITLE	c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@	; `string'
PUBLIC	??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP@				; `string'
PUBLIC	??_C@_0M@CPNHGEPL@Signature?3?5@		; `string'
PUBLIC	??_C@_0BJ@CGAJGCJE@Can?8t?5unpack?5signature?4?5@ ; `string'
PUBLIC	??_C@_1IK@NJBBFKEK@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1JO@BMHPCMGB@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1JO@IOMHEKPF@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1JO@NONGKCIC@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1NA@MEIAJFDE@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_1NA@PBKLKMMF@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_1NA@CKCHEBNC@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@ ; `string'
EXTRN	__imp__RegCloseKey@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__strtol:PROC
EXTRN	__imp__K32GetModuleInformation@16:PROC
EXTRN	__imp___errno:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	__imp__GetVersionExW@4:PROC
EXTRN	__imp_?_Xinvalid_argument@std@@YAXPBD@Z:PROC
EXTRN	__imp__RegOpenKeyExW@20:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
;	COMDAT ??_C@_1NA@CKCHEBNC@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@
CONST	SEGMENT
??_C@_1NA@CKCHEBNC@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@ DB 'I'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'e', 00H, 'r', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'i', 00H
	DB	'e', 00H, 's', 00H, '\', 00H, 'V', 00H, 'C', 00H, ',', 00H, 'r'
	DB	00H, 'e', 00H, 'd', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H
	DB	'x', 00H, '8', 00H, '6', 00H, ',', 00H, 'x', 00H, '8', 00H, '6'
	DB	00H, ',', 00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '2', 00H
	DB	',', 00H, 'b', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, '\', 00H, 'D', 00H, 'e', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, '{'
	DB	00H, '5', 00H, 'b', 00H, 'f', 00H, 'c', 00H, '1', 00H, '3', 00H
	DB	'8', 00H, '0', 00H, '-', 00H, 'f', 00H, 'd', 00H, '3', 00H, '5'
	DB	00H, '-', 00H, '4', 00H, 'b', 00H, '8', 00H, '5', 00H, '-', 00H
	DB	'9', 00H, '7', 00H, '1', 00H, '5', 00H, '-', 00H, '7', 00H, '3'
	DB	00H, '5', 00H, '1', 00H, '5', 00H, '3', 00H, '5', 00H, 'd', 00H
	DB	'0', 00H, '7', 00H, '7', 00H, 'e', 00H, '}', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@PBKLKMMF@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@
CONST	SEGMENT
??_C@_1NA@PBKLKMMF@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@ DB 'I'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'e', 00H, 'r', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'i', 00H
	DB	'e', 00H, 's', 00H, '\', 00H, 'V', 00H, 'C', 00H, ',', 00H, 'r'
	DB	00H, 'e', 00H, 'd', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H
	DB	'x', 00H, '8', 00H, '6', 00H, ',', 00H, 'x', 00H, '8', 00H, '6'
	DB	00H, ',', 00H, '1', 00H, '4', 00H, '.', 00H, '2', 00H, '1', 00H
	DB	',', 00H, 'b', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, '\', 00H, 'D', 00H, 'e', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, '{'
	DB	00H, '4', 00H, '9', 00H, '6', 00H, '9', 00H, '7', 00H, '8', 00H
	DB	'6', 00H, '9', 00H, '-', 00H, 'b', 00H, 'e', 00H, '8', 00H, 'e'
	DB	00H, '-', 00H, '4', 00H, '2', 00H, '7', 00H, 'd', 00H, '-', 00H
	DB	'8', 00H, '1', 00H, 'a', 00H, '0', 00H, '-', 00H, 'c', 00H, '3'
	DB	00H, '3', 00H, '4', 00H, 'd', 00H, '1', 00H, 'd', 00H, '1', 00H
	DB	'4', 00H, '9', 00H, '5', 00H, '0', 00H, '}', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@MEIAJFDE@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@
CONST	SEGMENT
??_C@_1NA@MEIAJFDE@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@ DB 'I'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'e', 00H, 'r', 00H, '\', 00H, 'D', 00H, 'e', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'i', 00H
	DB	'e', 00H, 's', 00H, '\', 00H, 'V', 00H, 'C', 00H, ',', 00H, 'r'
	DB	00H, 'e', 00H, 'd', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H
	DB	'x', 00H, '8', 00H, '6', 00H, ',', 00H, 'x', 00H, '8', 00H, '6'
	DB	00H, ',', 00H, '1', 00H, '4', 00H, '.', 00H, '1', 00H, '6', 00H
	DB	',', 00H, 'b', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, '\', 00H, 'D', 00H, 'e', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, '{'
	DB	00H, '6', 00H, '7', 00H, 'f', 00H, '6', 00H, '7', 00H, '5', 00H
	DB	'4', 00H, '7', 00H, '-', 00H, '9', 00H, '6', 00H, '9', 00H, '3'
	DB	00H, '-', 00H, '4', 00H, '9', 00H, '3', 00H, '7', 00H, '-', 00H
	DB	'a', 00H, 'a', 00H, '1', 00H, '3', 00H, '-', 00H, '5', 00H, '6'
	DB	00H, 'e', 00H, '2', 00H, '9', 00H, '6', 00H, 'b', 00H, 'd', 00H
	DB	'4', 00H, '0', 00H, 'f', 00H, '6', 00H, '}', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@NONGKCIC@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@
CONST	SEGMENT
??_C@_1JO@NONGKCIC@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@ DB 'S'
	DB	00H, 'O', 00H, 'F', 00H, 'T', 00H, 'W', 00H, 'A', 00H, 'R', 00H
	DB	'E', 00H, '\', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'I', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'D', 00H, 'e', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'n', 00H, 'c', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, '{', 00H, 'e', 00H, '2', 00H, '8', 00H, '0', 00H, '3', 00H
	DB	'1', 00H, '1', 00H, '0', 00H, '-', 00H, '7', 00H, '8', 00H, 'b'
	DB	00H, '3', 00H, '-', 00H, '4', 00H, '6', 00H, '6', 00H, '4', 00H
	DB	'-', 00H, 'a', 00H, '4', 00H, '7', 00H, '9', 00H, '-', 00H, '3'
	DB	00H, '6', 00H, '1', 00H, '1', 00H, 'a', 00H, '3', 00H, '8', 00H
	DB	'1', 00H, '6', 00H, '5', 00H, '6', 00H, 'a', 00H, '}', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@IOMHEKPF@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@
CONST	SEGMENT
??_C@_1JO@IOMHEKPF@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@ DB 'S'
	DB	00H, 'O', 00H, 'F', 00H, 'T', 00H, 'W', 00H, 'A', 00H, 'R', 00H
	DB	'E', 00H, '\', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'I', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'D', 00H, 'e', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'n', 00H, 'c', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, '{', 00H, 'f', 00H, '6', 00H, '5', 00H, 'd', 00H, 'b', 00H
	DB	'0', 00H, '2', 00H, '7', 00H, '-', 00H, 'a', 00H, 'f', 00H, 'f'
	DB	00H, '3', 00H, '-', 00H, '4', 00H, '0', 00H, '7', 00H, '0', 00H
	DB	'-', 00H, '8', 00H, '8', 00H, '6', 00H, 'a', 00H, '-', 00H, '0'
	DB	00H, 'd', 00H, '8', 00H, '7', 00H, '0', 00H, '6', 00H, '4', 00H
	DB	'a', 00H, 'a', 00H, 'b', 00H, 'b', 00H, '1', 00H, '}', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1JO@BMHPCMGB@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@
CONST	SEGMENT
??_C@_1JO@BMHPCMGB@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@ DB 'S'
	DB	00H, 'O', 00H, 'F', 00H, 'T', 00H, 'W', 00H, 'A', 00H, 'R', 00H
	DB	'E', 00H, '\', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'I', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'D', 00H, 'e', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'n', 00H, 'c', 00H, 'i', 00H, 'e', 00H, 's', 00H, '\'
	DB	00H, '{', 00H, '3', 00H, '3', 00H, 'd', 00H, '1', 00H, 'f', 00H
	DB	'd', 00H, '9', 00H, '0', 00H, '-', 00H, '4', 00H, '2', 00H, '7'
	DB	00H, '4', 00H, '-', 00H, '4', 00H, '8', 00H, 'a', 00H, '1', 00H
	DB	'-', 00H, '9', 00H, 'b', 00H, 'c', 00H, '1', 00H, '-', 00H, '9'
	DB	00H, '7', 00H, 'e', 00H, '3', 00H, '3', 00H, 'd', 00H, '9', 00H
	DB	'c', 00H, '2', 00H, 'd', 00H, '6', 00H, 'f', 00H, '}', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1IK@NJBBFKEK@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@
CONST	SEGMENT
??_C@_1IK@NJBBFKEK@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@ DB 'S'
	DB	00H, 'O', 00H, 'F', 00H, 'T', 00H, 'W', 00H, 'A', 00H, 'R', 00H
	DB	'E', 00H, '\', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'I', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'r', 00H, '\'
	DB	00H, 'P', 00H, 'r', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'c', 00H
	DB	't', 00H, 's', 00H, '\', 00H, '6', 00H, '7', 00H, 'D', 00H, '6'
	DB	00H, 'E', 00H, 'C', 00H, 'F', 00H, '5', 00H, 'C', 00H, 'D', 00H
	DB	'5', 00H, 'F', 00H, 'B', 00H, 'A', 00H, '7', 00H, '3', 00H, '2'
	DB	00H, 'B', 00H, '8', 00H, 'B', 00H, '2', 00H, '2', 00H, 'B', 00H
	DB	'A', 00H, 'C', 00H, '8', 00H, 'D', 00H, 'E', 00H, '1', 00H, 'B'
	DB	00H, '4', 00H, 'D', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CGAJGCJE@Can?8t?5unpack?5signature?4?5@
CONST	SEGMENT
??_C@_0BJ@CGAJGCJE@Can?8t?5unpack?5signature?4?5@ DB 'Can''t unpack signa'
	DB	'ture. ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CPNHGEPL@Signature?3?5@
CONST	SEGMENT
??_C@_0M@CPNHGEPL@Signature?3?5@ DB 'Signature: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@
CONST	SEGMENT
??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@ DB 'stoi argument out '
	DB	'of range', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@
CONST	SEGMENT
??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@ DB 'invalid stoi argument', 00H ; `string'
PUBLIC	??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > > &>
PUBLIC	??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > > >
PUBLIC	??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > > &,bool,0>
PUBLIC	??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool,0>
PUBLIC	??$_Buy_if_not_node@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PAU21@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buy_if_not_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_first
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Getal
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::max_size
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::max_size
PUBLIC	??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator--
PUBLIC	??0?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Release@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
PUBLIC	?__autoclassinit2@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::__autoclassinit2
PUBLIC	?__autoclassinit2@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::__autoclassinit2
PUBLIC	??$_Kfn@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@SAABQAUHKEY__@@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0>::_Kfn<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$_Seek_wrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ; std::_Seek_wrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_move_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Ptr_move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Get_unwrapped_n@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@H@Z ; std::_Get_unwrapped_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,0>
PUBLIC	??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_nohint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
PUBLIC	??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
PUBLIC	??$forward@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAU10@@Z ; std::forward<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>
PUBLIC	??$construct@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@ABU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::construct<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Get_second
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Get_data
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>
PUBLIC	??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator--
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@PAUHKEY__@@@2@XZ ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Get_first
PUBLIC	??R?$less@PAUHKEY__@@@std@@QBE_NABQAUHKEY__@@0@Z ; std::less<HKEY__ *>::operator()
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::size
PUBLIC	?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Destroy_if_node
PUBLIC	?_Kfn@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IBEABQAUHKEY__@@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Kfn
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IBEABQAUHKEY__@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Key
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Freenode0
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@PAUHKEY__@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Getcomp
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
PUBLIC	??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator--
PUBLIC	??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??$_Idl_distance@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAHABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::_Idl_distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
PUBLIC	??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z	; std::_Copy_memmove<unsigned char *,unsigned char *>
PUBLIC	??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
PUBLIC	??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>
PUBLIC	??$forward@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@ABU10@@Z ; std::forward<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
PUBLIC	?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
PUBLIC	?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
PUBLIC	?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept
PUBLIC	?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
PUBLIC	?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
PUBLIC	??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z ; std::_Traits_find<std::char_traits<char> >
PUBLIC	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
PUBLIC	??$_Unfancy_maybe_null@E@std@@YAPAEPAE@Z	; std::_Unfancy_maybe_null<unsigned char>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> * &>
PUBLIC	??$_Seek_wrapped@E@std@@YAXAAPAEQAE@Z		; std::_Seek_wrapped<unsigned char>
PUBLIC	??$_Uninitialized_move_al_unchecked@EEV?$allocator@E@std@@@std@@YAPAEQAE00AAV?$allocator@E@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<unsigned char,unsigned char,std::allocator<unsigned char> >
PUBLIC	??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z ; std::_Ptr_move_cat<unsigned char,unsigned char>
PUBLIC	??$_Get_unwrapped_n@EH$0A@@std@@YAPAEQAEH@Z	; std::_Get_unwrapped_n<unsigned char,int,0>
PUBLIC	??$_Get_unwrapped@E@std@@YAPAEQAE@Z		; std::_Get_unwrapped<unsigned char>
PUBLIC	??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1><>
PUBLIC	??$forward@ABU?$less@PAUHKEY__@@@std@@@std@@YAABU?$less@PAUHKEY__@@@0@ABU10@@Z ; std::forward<std::less<HKEY__ *> const &>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::destroy<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
PUBLIC	??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z		; std::forward<wchar_t * const &>
PUBLIC	??$_Destroy_range1@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<unsigned char> >
PUBLIC	??$emplace_hint@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::emplace_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>
PUBLIC	??$_Get_unwrapped@$$CBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@QBU10@@Z ; std::_Get_unwrapped<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const >
PUBLIC	??$_Adl_verify_range@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PBU12@@std@@YAXABQBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@0@Z ; std::_Adl_verify_range<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const *,std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const *>
PUBLIC	??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
PUBLIC	??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ; std::forward<std::allocator<wchar_t> >
PUBLIC	??$forward@AAY0GI@$$CB_W@std@@YAAAY0GI@$$CB_WAAY0GI@$$CB_W@Z ; std::forward<wchar_t const (&)[104]>
PUBLIC	??$forward@AAY0EP@$$CB_W@std@@YAAAY0EP@$$CB_WAAY0EP@$$CB_W@Z ; std::forward<wchar_t const (&)[79]>
PUBLIC	??$forward@AAY0EF@$$CB_W@std@@YAAAY0EF@$$CB_WAAY0EF@$$CB_W@Z ; std::forward<wchar_t const (&)[69]>
PUBLIC	??$forward@PAUHKEY__@@@std@@YA$$QAPAUHKEY__@@AAPAU1@@Z ; std::forward<HKEY__ *>
PUBLIC	??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
PUBLIC	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??0?$allocator@E@std@@QAE@XZ			; std::allocator<unsigned char>::allocator<unsigned char>
PUBLIC	?data@?$vector@EV?$allocator@E@std@@@std@@QAEPAEXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::data
PUBLIC	?_Umove@?$vector@EV?$allocator@E@std@@@std@@AAEPAEPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove
PUBLIC	?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth
PUBLIC	??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
PUBLIC	?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
PUBLIC	?_Has_unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABE_NXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Has_unused_capacity
PUBLIC	?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::deallocate
PUBLIC	??_G?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAXI@Z ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::`scalar deleting destructor'
PUBLIC	??$_Get_size_of_n@$0CM@@std@@YAII@Z		; std::_Get_size_of_n<44>
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::construct<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> * &>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
PUBLIC	??$_Idl_distance@PAEPAE@std@@YAHABQAE0@Z	; std::_Idl_distance<unsigned char *,unsigned char *>
PUBLIC	??$_Uninitialized_move@PAEPAEV?$allocator@E@std@@@std@@YAPAEQAE0PAEAAV?$allocator@E@0@@Z ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >
PUBLIC	??$destroy@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::destroy<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??$addressof@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAPAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAU10@@Z ; std::addressof<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	??$_Get_size_of_n@$01@std@@YAII@Z		; std::_Get_size_of_n<2>
PUBLIC	??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
PUBLIC	??$?0ABU?$less@PAUHKEY__@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PAUHKEY__@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1><std::less<HKEY__ *> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >
PUBLIC	??$construct@PA_WABQA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QAPA_WABQA_W@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * const &>
PUBLIC	??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>
PUBLIC	??$destroy@PA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QAPA_W@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z		; std::addressof<wchar_t *>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	??$_Unfancy@_W@std@@YAPA_WPA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z ; std::_Destroy_range<std::allocator<unsigned char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><>
PUBLIC	??$insert@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@0@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::insert<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const *>
PUBLIC	??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >
PUBLIC	??$?0V?$allocator@_W@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::allocator<wchar_t>,void>
PUBLIC	??$_Emplace_reallocate@E@?$vector@EV?$allocator@E@std@@@std@@QAEPAEQAE$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_reallocate<unsigned char>
PUBLIC	??$construct@EE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAAV?$allocator@E@1@QAE$$QAE@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char>
PUBLIC	??$_Unfancy@E@std@@YAPAEPAE@Z			; std::_Unfancy<unsigned char>
PUBLIC	??$forward@E@std@@YA$$QAEAAE@Z			; std::forward<unsigned char>
PUBLIC	??$move@AAE@std@@YA$$QAEAAE@Z			; std::move<unsigned char &>
PUBLIC	??$?0PAUHKEY__@@AAY0GI@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0GI@$$CB_W@Z ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><HKEY__ *,wchar_t const (&)[104],0>
PUBLIC	??$?0PAUHKEY__@@AAY0EP@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0EP@$$CB_W@Z ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><HKEY__ *,wchar_t const (&)[79],0>
PUBLIC	??$?0PAUHKEY__@@AAY0EF@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0EF@$$CB_W@Z ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><HKEY__ *,wchar_t const (&)[69],0>
PUBLIC	??$_Emplace_reallocate@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKAAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long &>
PUBLIC	??$construct@KAAK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAKAAK@Z ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long &>
PUBLIC	??$forward@AAK@std@@YAAAKAAK@Z			; std::forward<unsigned long &>
PUBLIC	??$data@V?$vector@EV?$allocator@E@std@@@std@@@std@@YAPAEAAV?$vector@EV?$allocator@E@std@@@0@@Z ; std::data<std::vector<unsigned char,std::allocator<unsigned char> > >
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z ; split<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >::allocate
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Max
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Rrotate
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Erase
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buyheadnode
PUBLIC	?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Root
PUBLIC	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Rmost
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Extract
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator++
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_first
PUBLIC	?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::__autoclassinit2
PUBLIC	?length@?$_WChar_traits@_W@std@@SAIPB_W@Z	; std::_WChar_traits<wchar_t>::length
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
PUBLIC	?_Umove_if_noexcept1@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE00U?$integral_constant@_N$00@2@@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove_if_noexcept1
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$allocator@E@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::clear
PUBLIC	?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Construct
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Getal
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator++
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator!=
PUBLIC	?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::_WChar_traits<wchar_t>::move
PUBLIC	?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z	; std::_WChar_traits<wchar_t>::assign
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$allocator@_W@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
PUBLIC	?deallocate@?$allocator@E@std@@QAEXQAEI@Z	; std::allocator<unsigned char>::deallocate
PUBLIC	?allocate@?$allocator@E@std@@QAEPAEI@Z		; std::allocator<unsigned char>::allocate
PUBLIC	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::size
PUBLIC	?_Umove_if_noexcept@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE00@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove_if_noexcept
PUBLIC	?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array
PUBLIC	?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
PUBLIC	?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
PUBLIC	?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$allocator@E@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myend
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$allocator@E@2@XZ ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::end
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase
PUBLIC	??0?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@PAUHKEY__@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
PUBLIC	?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Freeheadnode
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Min
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Get_second
PUBLIC	?begin@?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::begin
PUBLIC	?end@?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ; std::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::end
PUBLIC	?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::_WChar_traits<wchar_t>::copy
PUBLIC	?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_lv_contents
PUBLIC	??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z ; <lambda_03628ca18370b1f44a99b655e704819b>::operator()
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
PUBLIC	??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$allocator@_W@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
PUBLIC	?_Reallocate_exactly@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate_exactly
PUBLIC	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
PUBLIC	?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@EV?$allocator@E@std@@@std@@ABE_NXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Has_unused_capacity
PUBLIC	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
PUBLIC	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
PUBLIC	?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@ABEXPAE0@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range
PUBLIC	?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$allocator@E@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast
PUBLIC	??0?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@PAUHKEY__@@@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::insert
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Tidy
PUBLIC	??1?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Get_data
PUBLIC	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Lmost
PUBLIC	??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
PUBLIC	??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator*
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator++
PUBLIC	??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator==
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
PUBLIC	??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
PUBLIC	??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBEXQADQBDI@Z ; <lambda_67d87d4aa1269033985980465fd1d824>::operator()
PUBLIC	?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
PUBLIC	??$_Emplace_back_with_unused_capacity@E@?$vector@EV?$allocator@E@std@@@std@@AAEAAE$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_back_with_unused_capacity<unsigned char>
PUBLIC	??$emplace_back@E@?$vector@EV?$allocator@E@std@@@std@@QAEAAE$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::emplace_back<unsigned char>
PUBLIC	?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back
PUBLIC	?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::reserve
PUBLIC	?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::clear
PUBLIC	??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
PUBLIC	?_Unchecked_begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Unchecked_end
PUBLIC	??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z ; std::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::~_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
PUBLIC	?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Unchecked_end
PUBLIC	??D?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@XZ ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator*
PUBLIC	??E?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator++
PUBLIC	??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator!=
PUBLIC	??0?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@0@Z ; std::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
PUBLIC	?__autoclassinit2@?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::__autoclassinit2
PUBLIC	?__autoclassinit2@?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAEXI@Z ; std::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::__autoclassinit2
PUBLIC	??1?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@XZ ; std::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::~map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
PUBLIC	??0?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABU01@@Z ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::~pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	?IsRedistPackagePresent@Utils@@SA_NXZ		; Utils::IsRedistPackagePresent
PUBLIC	?IsWinServBuild@Utils@@SA_NXZ			; Utils::IsWinServBuild
PUBLIC	?IsWinXPOrLater@Utils@@SA_NXZ			; Utils::IsWinXPOrLater
PUBLIC	?__autoclassinit2@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::__autoclassinit2
PUBLIC	??$_Emplace_back_with_unused_capacity@AAK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKAAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long &>
PUBLIC	??$emplace_back@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEAAKAAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::emplace_back<unsigned long &>
PUBLIC	?SearchSignature@@YAKKKPBD0@Z			; SearchSignature
PUBLIC	?__autoclassinit2@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::__autoclassinit2
PUBLIC	?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; UnpackSignature
PUBLIC	?GetModuleInfo@Utils@@SA?AU_MODULEINFO@@PBD@Z	; Utils::GetModuleInfo
PUBLIC	?stoi@std@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAIH@Z ; std::stoi
PUBLIC	?find@?$char_traits@D@std@@SAPBDQBDIABD@Z	; std::char_traits<char>::find
PUBLIC	?compare@?$char_traits@D@std@@SAHQBD0I@Z	; std::char_traits<char>::compare
PUBLIC	_wmemmove
PUBLIC	_wmemcpy
PUBLIC	?GetFunction@Utils@@SAKPBD0@Z			; Utils::GetFunction
PUBLIC	?UpdateInstructionCharArgument@Utils@@SAXKQADHHHHHHH@Z ; Utils::UpdateInstructionCharArgument
PUBLIC	?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z ; Utils::FindOffsetsToVec
PUBLIC	?GetModule@Utils@@SAPAUHINSTANCE__@@PBD@Z	; Utils::GetModule
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?IsRedistPackagePresent@Utils@@SA_NXZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?IsRedistPackagePresent@Utils@@SA_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+4
__unwindtable$?IsRedistPackagePresent@Utils@@SA_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$5
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$7
	DD	06H
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$16
	DD	06H
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$8
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$8
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$3
__catchsym$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z$2
__catchsym$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z$7
__catchsym$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z$0
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?GetModule@Utils@@SAPAUHINSTANCE__@@PBD@Z
_TEXT	SEGMENT
?GetModule@Utils@@SAPAUHINSTANCE__@@PBD@Z PROC		; Utils::GetModule, COMDAT
; _module$ = ecx

; 3    : HMODULE Utils::GetModule (const char* module) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 4    : 
; 5    :    HMODULE hModule = GetModuleHandleA (module);

  00003	56		 push	 esi
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4

; 6    : 
; 7    :    if (!hModule) {

  0000a	85 c0		 test	 eax, eax
  0000c	75 07		 jne	 SHORT $LN2@GetModule

; 8    :        hModule = LoadLibraryA (module);

  0000e	56		 push	 esi
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
$LN2@GetModule:

; 9    :    }
; 10   : 
; 11   :    return hModule;
; 12   : }

  00015	5e		 pop	 esi
  00016	c3		 ret	 0
?GetModule@Utils@@SAPAUHINSTANCE__@@PBD@Z ENDP		; Utils::GetModule
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z
_TEXT	SEGMENT
$T13 = -280						; size = 24
$T1 = -268						; size = 12
_<end>$L0$1$ = -256					; size = 4
$T166 = -252						; size = 4
tv1491 = -248						; size = 4
_vector$GSCopy$1$ = -244				; size = 4
__Ptr$1$ = -240						; size = 4
__Ptr$1$ = -236						; size = 4
_stream$167 = -232					; size = 176
_mask$ = -56						; size = 24
_pattern$ = -32						; size = 12
__Result$2$ = -20					; size = 4
_offset$168 = -20					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_signatures$ = 8					; size = 12
_isPanic$ = 20						; size = 1
?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z PROC ; Utils::FindOffsetsToVec, COMDAT
; _module$ = ecx
; _vector$ = edx

; 94   : void Utils::FindOffsetsToVec (const char* module, std::vector<const char*> signatures, std::vector<DWORD>& vector, bool isPanic) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b da		 mov	 ebx, edx
  00030	89 9d 0c ff ff
	ff		 mov	 DWORD PTR _vector$GSCopy$1$[ebp], ebx
  00036	8b f9		 mov	 edi, ecx
  00038	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003f	0f 57 c0	 xorps	 xmm0, xmm0

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  00042	57		 push	 edi

; 16   :     MODULEINFO modinfo = { 0 };

  00043	66 0f d6 85 f4
	fe ff ff	 movq	 QWORD PTR $T1[ebp], xmm0
  0004b	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp+8], 0

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  00055	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  0005b	8b f0		 mov	 esi, eax

; 6    : 
; 7    :    if (!hModule) {

  0005d	85 f6		 test	 esi, esi
  0005f	75 09		 jne	 SHORT $LN16@FindOffset

; 8    :        hModule = LoadLibraryA (module);

  00061	57		 push	 edi
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  00068	8b f0		 mov	 esi, eax
$LN16@FindOffset:

; 18   :     GetModuleInformation (GetCurrentProcess (), GetModule(module), &modinfo, sizeof (MODULEINFO));

  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00070	6a 0c		 push	 12			; 0000000cH
  00072	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00078	51		 push	 ecx
  00079	56		 push	 esi
  0007a	50		 push	 eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__K32GetModuleInformation@16
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00081	33 f6		 xor	 esi, esi
  00083	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pattern$[ebp+8], 0
  0008a	0f 57 c0	 xorps	 xmm0, xmm0

; 391  : 		_Myend()

  0008d	89 75 e8	 mov	 DWORD PTR _pattern$[ebp+8], esi
  00090	66 0f d6 45 e0	 movq	 QWORD PTR _pattern$[ebp], xmm0

; 389  : 		: _Myfirst(),

  00095	89 75 e0	 mov	 DWORD PTR _pattern$[ebp], esi

; 390  : 		_Mylast(),

  00098	89 75 e4	 mov	 DWORD PTR _pattern$[ebp+4], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0009b	89 75 d8	 mov	 DWORD PTR _mask$[ebp+16], esi

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0009e	c7 45 dc 0f 00
	00 00		 mov	 DWORD PTR _mask$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000a5	c6 45 c8 00	 mov	 BYTE PTR _mask$[ebp], 0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 99   :     std::string mask;

  000a9	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1679 : 		return (this->_Myfirst());

  000ad	8b 7d 08	 mov	 edi, DWORD PTR _signatures$[ebp]

; 1689 : 		return (this->_Mylast());

  000b0	8b 45 0c	 mov	 eax, DWORD PTR _signatures$[ebp+4]

; 1679 : 		return (this->_Myfirst());

  000b3	89 bd 10 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], edi

; 1689 : 		return (this->_Mylast());

  000b9	89 85 00 ff ff
	ff		 mov	 DWORD PTR _<end>$L0$1$[ebp], eax
  000bf	3b f8		 cmp	 edi, eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 101  :     for (const auto& signature : signatures) {

  000c1	0f 84 60 01 00
	00		 je	 $LN343@FindOffset
$LL4@FindOffset:

; 102  : 
; 103  :         if (!UnpackSignature (signature, pattern, mask)) {

  000c7	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000c9	8d 45 c8	 lea	 eax, DWORD PTR _mask$[ebp]
  000cc	50		 push	 eax
  000cd	8d 55 e0	 lea	 edx, DWORD PTR _pattern$[ebp]
  000d0	e8 00 00 00 00	 call	 ?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; UnpackSignature
  000d5	83 c4 04	 add	 esp, 4
  000d8	84 c0		 test	 al, al
  000da	75 09		 jne	 SHORT $LN6@FindOffset

; 104  :             if (isPanic) {

  000dc	38 45 14	 cmp	 BYTE PTR _isPanic$[ebp], al
  000df	0f 85 dc 01 00
	00		 jne	 $LN568@FindOffset
$LN6@FindOffset:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000e5	83 7d dc 10	 cmp	 DWORD PTR _mask$[ebp+20], 16 ; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  000e9	8d 55 c8	 lea	 edx, DWORD PTR _mask$[ebp]

; 1815 : 		if (_Large_string_engaged())

  000ec	0f 43 55 c8	 cmovae	 edx, DWORD PTR _mask$[ebp]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 73   :     DWORD patternLength = strlen (mask);

  000f0	8b f2		 mov	 esi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  000f2	89 55 ec	 mov	 DWORD PTR __Result$2$[ebp], edx
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 73   :     DWORD patternLength = strlen (mask);

  000f5	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
$LL579@FindOffset:
  000f8	8a 06		 mov	 al, BYTE PTR [esi]
  000fa	46		 inc	 esi
  000fb	84 c0		 test	 al, al
  000fd	75 f9		 jne	 SHORT $LL579@FindOffset
  000ff	2b f1		 sub	 esi, ecx

; 74   : 
; 75   :     if (patternLength > moduleSize) return NULL;

  00101	8b 4d e0	 mov	 ecx, DWORD PTR _pattern$[ebp]
  00104	89 8d 14 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], ecx
  0010a	3b b5 f8 fe ff
	ff		 cmp	 esi, DWORD PTR $T1[ebp+4]
  00110	77 72		 ja	 SHORT $LN583@FindOffset

; 76   :     if (baseAddress == 0) return NULL;

  00112	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  00118	85 c0		 test	 eax, eax
  0011a	74 68		 je	 SHORT $LN583@FindOffset

; 77   : 
; 78   :     for (DWORD offset = 0; offset < baseAddress - patternLength; offset++) {

  0011c	33 ff		 xor	 edi, edi
  0011e	2b c6		 sub	 eax, esi
  00120	89 85 04 ff ff
	ff		 mov	 DWORD PTR $T166[ebp], eax
  00126	74 56		 je	 SHORT $LN153@FindOffset
$LL154@FindOffset:

; 79   : 
; 80   :         bool isFound = true;

  00128	33 c0		 xor	 eax, eax
  0012a	b3 01		 mov	 bl, 1

; 81   : 
; 82   :         for (DWORD charIterator = 0; charIterator < patternLength; charIterator++) {

  0012c	85 f6		 test	 esi, esi
  0012e	74 69		 je	 SHORT $LN567@FindOffset

; 79   : 
; 80   :         bool isFound = true;

  00130	2b d1		 sub	 edx, ecx
  00132	89 95 08 ff ff
	ff		 mov	 DWORD PTR tv1491[ebp], edx
$LL157@FindOffset:

; 83   :             isFound &= mask [charIterator] == '?' || pattern [charIterator] == * reinterpret_cast<const char*> (baseAddress + offset + charIterator);

  00138	03 c8		 add	 ecx, eax
  0013a	80 3c 0a 3f	 cmp	 BYTE PTR [edx+ecx], 63	; 0000003fH
  0013e	74 13		 je	 SHORT $LN162@FindOffset
  00140	8b 95 f4 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp]
  00146	8a 09		 mov	 cl, BYTE PTR [ecx]
  00148	03 d0		 add	 edx, eax
  0014a	3a 0c 3a	 cmp	 cl, BYTE PTR [edx+edi]
  0014d	74 04		 je	 SHORT $LN162@FindOffset
  0014f	32 c9		 xor	 cl, cl
  00151	eb 02		 jmp	 SHORT $LN163@FindOffset
$LN162@FindOffset:
  00153	b1 01		 mov	 cl, 1
$LN163@FindOffset:

; 81   : 
; 82   :         for (DWORD charIterator = 0; charIterator < patternLength; charIterator++) {

  00155	8b 95 08 ff ff
	ff		 mov	 edx, DWORD PTR tv1491[ebp]

; 83   :             isFound &= mask [charIterator] == '?' || pattern [charIterator] == * reinterpret_cast<const char*> (baseAddress + offset + charIterator);

  0015b	22 d9		 and	 bl, cl
  0015d	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR __Ptr$1$[ebp]
  00163	40		 inc	 eax
  00164	3b c6		 cmp	 eax, esi
  00166	72 d0		 jb	 SHORT $LL157@FindOffset

; 84   :         }
; 85   : 
; 86   :         if (isFound) {

  00168	84 db		 test	 bl, bl
  0016a	75 2d		 jne	 SHORT $LN567@FindOffset

; 77   : 
; 78   :     for (DWORD offset = 0; offset < baseAddress - patternLength; offset++) {

  0016c	8b 55 ec	 mov	 edx, DWORD PTR __Result$2$[ebp]
  0016f	47		 inc	 edi
  00170	3b bd 04 ff ff
	ff		 cmp	 edi, DWORD PTR $T166[ebp]
  00176	72 b0		 jb	 SHORT $LL154@FindOffset

; 104  :             if (isPanic) {

  00178	8b 9d 0c ff ff
	ff		 mov	 ebx, DWORD PTR _vector$GSCopy$1$[ebp]
$LN153@FindOffset:
  0017e	8b bd 10 ff ff
	ff		 mov	 edi, DWORD PTR __Ptr$1$[ebp]
$LN583@FindOffset:

; 111  :         DWORD offset = SearchSignature (reinterpret_cast<DWORD> (moduleInfo.lpBaseOfDll), moduleInfo.SizeOfImage, reinterpret_cast<const char*> (std::data(pattern)), mask.c_str());

  00184	33 c0		 xor	 eax, eax
$LN151@FindOffset:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00186	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 111  :         DWORD offset = SearchSignature (reinterpret_cast<DWORD> (moduleInfo.lpBaseOfDll), moduleInfo.SizeOfImage, reinterpret_cast<const char*> (std::data(pattern)), mask.c_str());

  00189	89 45 ec	 mov	 DWORD PTR _offset$168[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1726 : 		return (this->_Myend() != this->_Mylast());

  0018c	39 4b 08	 cmp	 DWORD PTR [ebx+8], ecx

; 917  : 		if (_Has_unused_capacity())

  0018f	74 1e		 je	 SHORT $LN165@FindOffset
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00191	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  00193	83 43 04 04	 add	 DWORD PTR [ebx+4], 4

; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  00197	eb 22		 jmp	 SHORT $LN164@FindOffset
$LN567@FindOffset:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 87   :             return baseAddress + offset;

  00199	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR $T1[ebp]
  0019f	8b 9d 0c ff ff
	ff		 mov	 ebx, DWORD PTR _vector$GSCopy$1$[ebp]
  001a5	03 c7		 add	 eax, edi
  001a7	8b bd 10 ff ff
	ff		 mov	 edi, DWORD PTR __Ptr$1$[ebp]
  001ad	eb d7		 jmp	 SHORT $LN151@FindOffset
$LN165@FindOffset:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  001af	8d 45 ec	 lea	 eax, DWORD PTR _offset$168[ebp]
  001b2	50		 push	 eax
  001b3	51		 push	 ecx
  001b4	8b cb		 mov	 ecx, ebx
  001b6	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKAAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long &>
$LN164@FindOffset:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001bb	83 7d dc 10	 cmp	 DWORD PTR _mask$[ebp+20], 16 ; 00000010H

; 1803 : 		value_type * _Result = _Bx._Buf;

  001bf	8d 45 c8	 lea	 eax, DWORD PTR _mask$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1592 : 		this->_Mylast() = this->_Myfirst();

  001c2	8b b5 14 ff ff
	ff		 mov	 esi, DWORD PTR __Ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1804 : 		if (_Large_string_engaged())

  001c8	0f 43 45 c8	 cmovae	 eax, DWORD PTR _mask$[ebp]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 101  :     for (const auto& signature : signatures) {

  001cc	83 c7 04	 add	 edi, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3970 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

  001cf	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _mask$[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1592 : 		this->_Mylast() = this->_Myfirst();

  001d6	89 75 e4	 mov	 DWORD PTR _pattern$[ebp+4], esi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 101  :     for (const auto& signature : signatures) {

  001d9	89 bd 10 ff ff
	ff		 mov	 DWORD PTR __Ptr$1$[ebp], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  001df	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 101  :     for (const auto& signature : signatures) {

  001e2	3b bd 00 ff ff
	ff		 cmp	 edi, DWORD PTR _<end>$L0$1$[ebp]
  001e8	0f 85 d9 fe ff
	ff		 jne	 $LL4@FindOffset
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001ee	8b 55 dc	 mov	 edx, DWORD PTR _mask$[ebp+20]
  001f1	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  001f4	72 2e		 jb	 SHORT $LN580@FindOffset
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001f6	8b 4d c8	 mov	 ecx, DWORD PTR _mask$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  001f9	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001fa	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  001fc	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00202	72 16		 jb	 SHORT $LN342@FindOffset

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00204	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00207	83 c2 23	 add	 edx, 35			; 00000023H
  0020a	2b c1		 sub	 eax, ecx

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0020c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0020f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00212	76 06		 jbe	 SHORT $LN342@FindOffset
  00214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN342@FindOffset:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0021a	52		 push	 edx
  0021b	51		 push	 ecx
  0021c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00221	83 c4 08	 add	 esp, 8
$LN580@FindOffset:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00224	8b 7d 08	 mov	 edi, DWORD PTR _signatures$[ebp]
$LN343@FindOffset:
  00227	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _mask$[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0022e	c7 45 dc 0f 00
	00 00		 mov	 DWORD PTR _mask$[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00235	c6 45 c8 00	 mov	 BYTE PTR _mask$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1913 : 		if (this->_Myfirst() != pointer())

  00239	85 f6		 test	 esi, esi
  0023b	74 32		 je	 SHORT $LN363@FindOffset

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0023d	8b 4d e8	 mov	 ecx, DWORD PTR _pattern$[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00240	8b c6		 mov	 eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00242	2b ce		 sub	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00244	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0024a	72 16		 jb	 SHORT $LN439@FindOffset

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0024c	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  0024f	83 c1 23	 add	 ecx, 35			; 00000023H
  00252	2b c6		 sub	 eax, esi

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00254	83 c0 fc	 add	 eax, -4			; fffffffcH
  00257	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0025a	76 06		 jbe	 SHORT $LN439@FindOffset
  0025c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN439@FindOffset:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00262	51		 push	 ecx
  00263	56		 push	 esi
  00264	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00269	8b 7d 08	 mov	 edi, DWORD PTR _signatures$[ebp]
  0026c	83 c4 08	 add	 esp, 8
$LN363@FindOffset:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1913 : 		if (this->_Myfirst() != pointer())

  0026f	85 ff		 test	 edi, edi
  00271	74 32		 je	 SHORT $LN465@FindOffset

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00273	8b 4d 10	 mov	 ecx, DWORD PTR _signatures$[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00276	8b c7		 mov	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00278	2b cf		 sub	 ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0027a	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0027d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00283	72 16		 jb	 SHORT $LN541@FindOffset

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00285	8b 7f fc	 mov	 edi, DWORD PTR [edi-4]
  00288	83 c1 23	 add	 ecx, 35			; 00000023H
  0028b	2b c7		 sub	 eax, edi

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0028d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00290	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00293	76 06		 jbe	 SHORT $LN541@FindOffset
  00295	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN541@FindOffset:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0029b	51		 push	 ecx
  0029c	57		 push	 edi
  0029d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002a2	83 c4 08	 add	 esp, 8
$LN465@FindOffset:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 119  : }

  002a5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002af	59		 pop	 ecx
  002b0	5f		 pop	 edi
  002b1	5e		 pop	 esi
  002b2	5b		 pop	 ebx
  002b3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002b6	33 cd		 xor	 ecx, ebp
  002b8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002bd	8b e5		 mov	 esp, ebp
  002bf	5d		 pop	 ebp
  002c0	c3		 ret	 0
$LN568@FindOffset:

; 105  :                 std::stringstream stream;

  002c1	51		 push	 ecx
  002c2	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _stream$167[ebp]
  002c8	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
  002cd	83 ec 08	 sub	 esp, 8
  002d0	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _stream$167[ebp]
  002d6	e8 00 00 00 00	 call	 ??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >

; 106  :                 stream << "Can't unpack signature. " << "Signature: " << signature;

  002db	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BJ@CGAJGCJE@Can?8t?5unpack?5signature?4?5@
  002e0	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  002e4	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _stream$167[ebp+16]
  002ea	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002ef	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0M@CPNHGEPL@Signature?3?5@
  002f4	8b c8		 mov	 ecx, eax
  002f6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002fb	8b 17		 mov	 edx, DWORD PTR [edi]
  002fd	8b c8		 mov	 ecx, eax
  002ff	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 107  :                 PanicUtils::Release (PanicUtils::Layers::ROUTINE, stream.str().c_str());

  00304	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR $T13[ebp]
  0030a	50		 push	 eax
  0030b	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _stream$167[ebp]
  00311	e8 00 00 00 00	 call	 ?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00316	8b c8		 mov	 ecx, eax
  00318	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  0031c	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00321	8b d0		 mov	 edx, eax
  00323	b9 01 00 00 00	 mov	 ecx, 1
  00328	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN582@FindOffset:
  0032d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$0:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _signatures$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$1:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR _pattern$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$2:
  00010	8d 4d c8	 lea	 ecx, DWORD PTR _mask$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$3:
  00018	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR _stream$167[ebp]
  0001e	e9 00 00 00 00	 jmp	 ??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z$4:
  00023	8d 8d e8 fe ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00029	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z:
  0002e	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00032	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00035	8b 8a e4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-284]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00045	33 c8		 xor	 ecx, eax
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z
  00051	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?FindOffsetsToVec@Utils@@SAXPBDV?$vector@PBDV?$allocator@PBD@std@@@std@@AAV?$vector@KV?$allocator@K@std@@@3@_N@Z ENDP ; Utils::FindOffsetsToVec
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?UpdateInstructionCharArgument@Utils@@SAXKQADHHHHHHH@Z
_TEXT	SEGMENT
_offsetToInstructions$ = 8				; size = 4
_instructionIteratorBase$dead$ = 12			; size = 4
_instructionCount$ = 16					; size = 4
_iterationCycleUpdate$dead$ = 20			; size = 4
_instructionCharMoveCount$dead$ = 24			; size = 4
_arrayCharIteratorBase$dead$ = 28			; size = 4
_arrayCharCycleUpdate$dead$ = 32			; size = 4
?UpdateInstructionCharArgument@Utils@@SAXKQADHHHHHHH@Z PROC ; Utils::UpdateInstructionCharArgument, COMDAT
; _base$ = ecx
; _compressedArray$ = edx

; 121  : void Utils::UpdateInstructionCharArgument (DWORD base, char compressedArray[], int offsetToInstructions, int instructionIteratorBase, int instructionCount, int iterationCycleUpdate, int instructionCharMoveCount, int arrayCharIteratorBase, int arrayCharCycleUpdate) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 122  : 
; 123  :     int segmentedCharIterator = arrayCharIteratorBase;
; 124  : 
; 125  :     for (int instructionsIterator = instructionIteratorBase; instructionsIterator < instructionCount; instructionsIterator += iterationCycleUpdate) {

  00004	8b 7d 10	 mov	 edi, DWORD PTR _instructionCount$[ebp]
  00007	33 c0		 xor	 eax, eax
  00009	85 ff		 test	 edi, edi
  0000b	7e 16		 jle	 SHORT $LN3@UpdateInst
  0000d	56		 push	 esi
  0000e	8b 75 08	 mov	 esi, DWORD PTR _offsetToInstructions$[ebp]
  00011	03 f1		 add	 esi, ecx
$LL4@UpdateInst:

; 126  :         std::memcpy (reinterpret_cast <DWORD*> (base + offsetToInstructions + instructionsIterator), compressedArray + segmentedCharIterator, instructionCharMoveCount);

  00013	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 127  :         segmentedCharIterator += arrayCharCycleUpdate;

  00015	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  00018	89 0c 06	 mov	 DWORD PTR [esi+eax], ecx
  0001b	83 c0 07	 add	 eax, 7
  0001e	3b c7		 cmp	 eax, edi
  00020	7c f1		 jl	 SHORT $LL4@UpdateInst
  00022	5e		 pop	 esi
$LN3@UpdateInst:
  00023	5f		 pop	 edi

; 128  :     }
; 129  : 
; 130  : }

  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
?UpdateInstructionCharArgument@Utils@@SAXKQADHHHHHHH@Z ENDP ; Utils::UpdateInstructionCharArgument
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?GetFunction@Utils@@SAKPBD0@Z
_TEXT	SEGMENT
?GetFunction@Utils@@SAKPBD0@Z PROC			; Utils::GetFunction, COMDAT
; _module$ = ecx
; _function$ = edx

; 23   : DWORD Utils::GetFunction (const char* module, const char* function) {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx
  00004	8b fa		 mov	 edi, edx

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  00006	56		 push	 esi
  00007	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4

; 6    : 
; 7    :    if (!hModule) {

  0000d	85 c0		 test	 eax, eax
  0000f	75 07		 jne	 SHORT $LN4@GetFunctio

; 8    :        hModule = LoadLibraryA (module);

  00011	56		 push	 esi
  00012	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
$LN4@GetFunctio:

; 24   :    return reinterpret_cast<DWORD> (GetProcAddress(GetModule(module), function));

  00018	57		 push	 edi
  00019	50		 push	 eax
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 25   : }

  00022	c3		 ret	 0
?GetFunction@Utils@@SAKPBD0@Z ENDP			; Utils::GetFunction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__N$ = 8						; size = 4
_wmemcpy PROC						; COMDAT
; __S1$ = ecx
; __S2$ = edx

; 230  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 231  :         #pragma warning(push)
; 232  :         #pragma warning(disable : 4995 4996 6386)
; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  00006	03 c0		 add	 eax, eax
  00008	50		 push	 eax
  00009	52		 push	 edx
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _memcpy
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 234  :         #pragma warning(pop)
; 235  :     }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
;	COMDAT _wmemmove
_TEXT	SEGMENT
__N$ = 8						; size = 4
_wmemmove PROC						; COMDAT
; __S1$ = ecx
; __S2$ = edx

; 243  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 244  :         #pragma warning(push)
; 245  :         #pragma warning(disable : 4996 6386)
; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 08	 mov	 eax, DWORD PTR __N$[ebp]
  00006	03 c0		 add	 eax, eax
  00008	50		 push	 eax
  00009	52		 push	 edx
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _memmove
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH

; 247  :         #pragma warning(pop)
; 248  :     }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHQBD0I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?compare@?$char_traits@D@std@@SAHQBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT
; __First1$ = ecx
; __First2$ = edx

; 451  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 452  : #if _HAS_CXX17
; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));

  00004	8b 75 08	 mov	 esi, DWORD PTR __Count$[ebp]
  00007	83 ee 04	 sub	 esi, 4
  0000a	72 15		 jb	 SHORT $LN5@compare
  0000c	0f 1f 40 00	 npad	 4
$LL6@compare:
  00010	8b 01		 mov	 eax, DWORD PTR [ecx]
  00012	3b 02		 cmp	 eax, DWORD PTR [edx]
  00014	75 10		 jne	 SHORT $LN4@compare
  00016	83 c1 04	 add	 ecx, 4
  00019	83 c2 04	 add	 edx, 4
  0001c	83 ee 04	 sub	 esi, 4
  0001f	73 ef		 jae	 SHORT $LL6@compare
$LN5@compare:
  00021	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00024	74 35		 je	 SHORT $LN3@compare
$LN4@compare:
  00026	8a 01		 mov	 al, BYTE PTR [ecx]
  00028	3a 02		 cmp	 al, BYTE PTR [edx]
  0002a	75 27		 jne	 SHORT $LN7@compare
  0002c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0002f	74 2a		 je	 SHORT $LN3@compare
  00031	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00034	3a 42 01	 cmp	 al, BYTE PTR [edx+1]
  00037	75 1a		 jne	 SHORT $LN7@compare
  00039	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003c	74 1d		 je	 SHORT $LN3@compare
  0003e	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00041	3a 42 02	 cmp	 al, BYTE PTR [edx+2]
  00044	75 0d		 jne	 SHORT $LN7@compare
  00046	83 fe ff	 cmp	 esi, -1
  00049	74 10		 je	 SHORT $LN3@compare
  0004b	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  0004e	3a 42 03	 cmp	 al, BYTE PTR [edx+3]
  00051	74 08		 je	 SHORT $LN3@compare
$LN7@compare:
  00053	1b c0		 sbb	 eax, eax
  00055	83 c8 01	 or	 eax, 1
  00058	5e		 pop	 esi

; 454  : #else /* _HAS_CXX17 */
; 455  : 		return (_CSTD memcmp(_First1, _First2, _Count));
; 456  : #endif /* _HAS_CXX17 */
; 457  : 		}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN3@compare:

; 452  : #if _HAS_CXX17
; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));

  0005b	33 c0		 xor	 eax, eax
  0005d	5e		 pop	 esi

; 454  : #else /* _HAS_CXX17 */
; 455  : 		return (_CSTD memcmp(_First1, _First2, _Count));
; 456  : #endif /* _HAS_CXX17 */
; 457  : 		}

  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
?compare@?$char_traits@D@std@@SAHQBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?find@?$char_traits@D@std@@SAPBDQBDIABD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 4
?find@?$char_traits@D@std@@SAPBDQBDIABD@Z PROC		; std::char_traits<char>::find, COMDAT
; __First$ = ecx
; __Count$ = edx

; 484  : 		{	// look for _Ch in [_First, _First + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 485  : #if _HAS_CXX17
; 486  : 		return (__builtin_char_memchr(_First, _Ch, _Count));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ch$[ebp]
  00006	52		 push	 edx
  00007	0f be 00	 movsx	 eax, BYTE PTR [eax]
  0000a	50		 push	 eax
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 _memchr
  00011	83 c4 0c	 add	 esp, 12			; 0000000cH

; 487  : #else /* _HAS_CXX17 */
; 488  : 		return (static_cast<const char *>(_CSTD memchr(_First, _Ch, _Count)));
; 489  : #endif /* _HAS_CXX17 */
; 490  : 		}

  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?find@?$char_traits@D@std@@SAPBDQBDIABD@Z ENDP		; std::char_traits<char>::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string
;	COMDAT ?stoi@std@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAIH@Z
_TEXT	SEGMENT
__Eptr$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
__Base$dead$ = 8					; size = 4
?stoi@std@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAIH@Z PROC ; std::stoi, COMDAT
; __Str$ = ecx
; __Idx$dead$ = edx

; 181  : 	{	// convert string to int

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	56		 push	 esi
  00011	57		 push	 edi
  00012	8b f1		 mov	 esi, ecx

; 182  : 	int& _Errno_ref = errno;	// Nonzero cost, pay it once

  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0001a	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string

; 182  : 	int& _Errno_ref = errno;	// Nonzero cost, pay it once

  0001e	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  00020	72 02		 jb	 SHORT $LN14@stoi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00022	8b 36		 mov	 esi, DWORD PTR [esi]
$LN14@stoi:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string

; 186  : 	const long _Ans = _CSTD strtol(_Ptr, &_Eptr, _Base);

  00024	6a 10		 push	 16			; 00000010H
  00026	8d 45 f8	 lea	 eax, DWORD PTR __Eptr$[ebp]
  00029	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  0002f	50		 push	 eax
  00030	56		 push	 esi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtol
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH

; 187  : 
; 188  : 	if (_Ptr == _Eptr)

  0003a	3b 75 f8	 cmp	 esi, DWORD PTR __Eptr$[ebp]
  0003d	75 0b		 jne	 SHORT $LN2@stoi

; 189  : 		_Xinvalid_argument("invalid stoi argument");

  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@
  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xinvalid_argument@std@@YAXPBD@Z
$LN2@stoi:

; 190  : 	if (_Errno_ref == ERANGE || _Ans < INT_MIN || INT_MAX < _Ans)

  0004a	83 3f 22	 cmp	 DWORD PTR [edi], 34	; 00000022H
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	75 0b		 jne	 SHORT $LN6@stoi

; 191  : 		_Xout_of_range("stoi argument out of range");

  00051	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN6@stoi:

; 192  : 	if (_Idx != nullptr)
; 193  : 		*_Idx = (size_t)(_Eptr - _Ptr);
; 194  : 	return ((int)_Ans);
; 195  : 	}

  0005c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005f	33 cd		 xor	 ecx, ebp
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
$LN21@stoi:
?stoi@std@@YAHABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@PAIH@Z ENDP ; std::stoi
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?GetModuleInfo@Utils@@SA?AU_MODULEINFO@@PBD@Z
_TEXT	SEGMENT
$T1 = 8							; size = 4
?GetModuleInfo@Utils@@SA?AU_MODULEINFO@@PBD@Z PROC	; Utils::GetModuleInfo, COMDAT
; _module$ = ecx

; 14   : MODULEINFO Utils::GetModuleInfo (const char* module) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 15   : 
; 16   :     MODULEINFO modinfo = { 0 };

  00005	8b 75 08	 mov	 esi, DWORD PTR $T1[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	0f 57 c0	 xorps	 xmm0, xmm0

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  0000e	53		 push	 ebx

; 15   : 
; 16   :     MODULEINFO modinfo = { 0 };

  0000f	66 0f d6 06	 movq	 QWORD PTR [esi], xmm0
  00013	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  00020	8b f8		 mov	 edi, eax

; 6    : 
; 7    :    if (!hModule) {

  00022	85 ff		 test	 edi, edi
  00024	75 09		 jne	 SHORT $LN4@GetModuleI

; 8    :        hModule = LoadLibraryA (module);

  00026	53		 push	 ebx
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  0002d	8b f8		 mov	 edi, eax
$LN4@GetModuleI:

; 17   : 
; 18   :     GetModuleInformation (GetCurrentProcess (), GetModule(module), &modinfo, sizeof (MODULEINFO));

  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCurrentProcess@0
  00035	6a 0c		 push	 12			; 0000000cH
  00037	56		 push	 esi
  00038	57		 push	 edi
  00039	50		 push	 eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__K32GetModuleInformation@16

; 19   : 
; 20   :     return modinfo;

  00040	5f		 pop	 edi
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx

; 21   : }

  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?GetModuleInfo@Utils@@SA?AU_MODULEINFO@@PBD@Z ENDP	; Utils::GetModuleInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
_TEXT	SEGMENT
$T2 = -96						; size = 24
$T7 = -72						; size = 24
_<end>$L0$1$ = -48					; size = 4
_mask$GSCopy$1$ = -44					; size = 4
__Errno_ref$1$ = -40					; size = 4
$T133 = -33						; size = 1
$T93 = -33						; size = 1
__Eptr$209 = -32					; size = 4
_tokens$ = -28						; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_mask$ = 8						; size = 4
?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; UnpackSignature, COMDAT
; _packedSignature$ = ecx
; _pattern$ = edx

; 45   : bool UnpackSignature (const char* packedSignature, std::vector <unsigned char>& pattern, std::string& mask) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b fa		 mov	 edi, edx
  0002d	8b f1		 mov	 esi, ecx
  0002f	8b 5d 08	 mov	 ebx, DWORD PTR _mask$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	66 0f d6 45 e4	 movq	 QWORD PTR _tokens$[ebp], xmm0
  0003a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _tokens$[ebp+8], 0
  00041	89 5d d4	 mov	 DWORD PTR _mask$GSCopy$1$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00044	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _tokens$[ebp], 0

; 390  : 		_Mylast(),

  0004b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _tokens$[ebp+4], 0

; 391  : 		_Myend()

  00052	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _tokens$[ebp+8], 0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 47   :     std::vector <std::string> tokens;

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00060	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00063	6a 01		 push	 1
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@

; 3976 : 		_My_data._Mysize = 0;

  0006a	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00071	c7 45 b4 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00078	c6 45 a0 00	 mov	 BYTE PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0007c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 462  : 		return (__builtin_strlen(_First));

  00081	8b ce		 mov	 ecx, esi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 49   :     size_t count = split <std::string> (std::string (packedSignature), " ", tokens);

  00083	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00087	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0008e	c7 45 cc 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00095	c6 45 b8 00	 mov	 BYTE PTR $T7[ebp], 0

; 462  : 		return (__builtin_strlen(_First));

  00099	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0009c	0f 1f 40 00	 npad	 4
$LL651@UnpackSign:
  000a0	8a 01		 mov	 al, BYTE PTR [ecx]
  000a2	41		 inc	 ecx
  000a3	84 c0		 test	 al, al
  000a5	75 f9		 jne	 SHORT $LL651@UnpackSign
  000a7	2b ca		 sub	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000a9	51		 push	 ecx
  000aa	56		 push	 esi
  000ab	8d 4d b8	 lea	 ecx, DWORD PTR $T7[ebp]
  000ae	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 49   :     size_t count = split <std::string> (std::string (packedSignature), " ", tokens);

  000b3	8d 45 e4	 lea	 eax, DWORD PTR _tokens$[ebp]
  000b6	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  000ba	50		 push	 eax
  000bb	8d 55 a0	 lea	 edx, DWORD PTR $T2[ebp]
  000be	8d 4d b8	 lea	 ecx, DWORD PTR $T7[ebp]
  000c1	e8 00 00 00 00	 call	 ??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z ; split<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000c6	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ca	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000cd	8b 55 cc	 mov	 edx, DWORD PTR $T7[ebp+20]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 49   :     size_t count = split <std::string> (std::string (packedSignature), " ", tokens);

  000d0	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000d2	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  000d5	72 2e		 jb	 SHORT $LN116@UnpackSign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d7	8b 4d b8	 mov	 ecx, DWORD PTR $T7[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  000da	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000db	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000dd	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000e3	72 16		 jb	 SHORT $LN115@UnpackSign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000e5	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  000e8	83 c2 23	 add	 edx, 35			; 00000023H
  000eb	2b c1		 sub	 eax, ecx

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ed	83 c0 fc	 add	 eax, -4			; fffffffcH
  000f0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f3	76 06		 jbe	 SHORT $LN115@UnpackSign
  000f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN115@UnpackSign:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000fb	52		 push	 edx
  000fc	51		 push	 ecx
  000fd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00102	83 c4 08	 add	 esp, 8
$LN116@UnpackSign:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 49   :     size_t count = split <std::string> (std::string (packedSignature), " ", tokens);

  00105	c6 45 fc 00	 mov	 BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00109	8b 55 b4	 mov	 edx, DWORD PTR $T2[ebp+20]

; 3995 : 		_My_data._Mysize = 0;

  0010c	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00113	c7 45 cc 0f 00
	00 00		 mov	 DWORD PTR $T7[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0011a	c6 45 b8 00	 mov	 BYTE PTR $T7[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0011e	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00121	72 2e		 jb	 SHORT $LN177@UnpackSign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00123	8b 4d a0	 mov	 ecx, DWORD PTR $T2[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00126	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00127	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00129	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0012f	72 16		 jb	 SHORT $LN176@UnpackSign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00131	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  00134	83 c2 23	 add	 edx, 35			; 00000023H
  00137	2b c1		 sub	 eax, ecx

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00139	83 c0 fc	 add	 eax, -4			; fffffffcH
  0013c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013f	76 06		 jbe	 SHORT $LN176@UnpackSign
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN176@UnpackSign:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00147	52		 push	 edx
  00148	51		 push	 ecx
  00149	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0014e	83 c4 08	 add	 esp, 8
$LN177@UnpackSign:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 50   :     if (!count) return false;

  00151	85 f6		 test	 esi, esi
  00153	75 0a		 jne	 SHORT $LN5@UnpackSign
  00155	8b 75 e4	 mov	 esi, DWORD PTR _tokens$[ebp]
  00158	32 db		 xor	 bl, bl
  0015a	e9 03 01 00 00	 jmp	 $LN12@UnpackSign
$LN5@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0015f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00162	2b 07		 sub	 eax, DWORD PTR [edi]

; 1515 : 		if (_Newcapacity > capacity())

  00164	3b f0		 cmp	 esi, eax
  00166	76 14		 jbe	 SHORT $LN293@UnpackSign

; 1516 : 			{	// something to do (reserve() never shrinks)
; 1517 : 			if (_Newcapacity > max_size())

  00168	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  0016e	0f 87 7d 01 00
	00		 ja	 $LN658@UnpackSign

; 1520 : 				}
; 1521 : 
; 1522 : 			_Reallocate_exactly(_Newcapacity);

  00174	56		 push	 esi
  00175	8b cf		 mov	 ecx, edi
  00177	e8 00 00 00 00	 call	 ?_Reallocate_exactly@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate_exactly
$LN293@UnpackSign:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 53   :     mask.reserve (count);

  0017c	56		 push	 esi
  0017d	8b cb		 mov	 ecx, ebx
  0017f	e8 00 00 00 00	 call	 ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1689 : 		return (this->_Mylast());

  00184	8b 45 e8	 mov	 eax, DWORD PTR _tokens$[ebp+4]

; 1679 : 		return (this->_Myfirst());

  00187	8b 75 e4	 mov	 esi, DWORD PTR _tokens$[ebp]

; 1689 : 		return (this->_Mylast());

  0018a	89 45 d0	 mov	 DWORD PTR _<end>$L0$1$[ebp], eax
  0018d	3b f0		 cmp	 esi, eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 55   :     for (const auto& token : tokens) {

  0018f	0f 84 cb 00 00
	00		 je	 $LN3@UnpackSign
$LL4@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00195	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  00199	8b c6		 mov	 eax, esi

; 1815 : 		if (_Large_string_engaged())

  0019b	72 02		 jb	 SHORT $LN650@UnpackSign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0019d	8b 06		 mov	 eax, DWORD PTR [esi]
$LN650@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  0019f	83 7e 10 01	 cmp	 DWORD PTR [esi+16], 1
  001a3	75 3f		 jne	 SHORT $LN6@UnpackSign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));

  001a5	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  001a8	3c 3f		 cmp	 al, 63			; 0000003fH
  001aa	75 04		 jne	 SHORT $LN652@UnpackSign
  001ac	33 c0		 xor	 eax, eax
  001ae	eb 05		 jmp	 SHORT $LN653@UnpackSign
$LN652@UnpackSign:
  001b0	1b c0		 sbb	 eax, eax
  001b2	83 c8 01	 or	 eax, 1
$LN653@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  001b5	85 c0		 test	 eax, eax
  001b7	75 2b		 jne	 SHORT $LN6@UnpackSign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 58   :             pattern.push_back (0x00);

  001b9	88 45 df	 mov	 BYTE PTR $T93[ebp], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1726 : 		return (this->_Myend() != this->_Mylast());

  001bc	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  001bf	39 47 08	 cmp	 DWORD PTR [edi+8], eax

; 917  : 		if (_Has_unused_capacity())

  001c2	74 0d		 je	 SHORT $LN366@UnpackSign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  001c4	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  001c7	ff 47 04	 inc	 DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2527 : 		return (append(_Ptr));

  001ca	68 00 00 00 00	 push	 OFFSET ??_C@_01OGPIMHDM@?$DP@
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 61   :         else {

  001cf	eb 79		 jmp	 SHORT $LN656@UnpackSign
$LN366@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  001d1	8d 4d df	 lea	 ecx, DWORD PTR $T93[ebp]
  001d4	51		 push	 ecx
  001d5	50		 push	 eax
  001d6	8b cf		 mov	 ecx, edi
  001d8	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@E@?$vector@EV?$allocator@E@std@@@std@@QAEPAEQAE$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_reallocate<unsigned char>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2527 : 		return (append(_Ptr));

  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_01OGPIMHDM@?$DP@
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 61   :         else {

  001e2	eb 66		 jmp	 SHORT $LN656@UnpackSign
$LN6@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string

; 182  : 	int& _Errno_ref = errno;	// Nonzero cost, pay it once

  001e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___errno
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001ea	83 7e 14 10	 cmp	 DWORD PTR [esi+20], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  001ee	8b de		 mov	 ebx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string

; 182  : 	int& _Errno_ref = errno;	// Nonzero cost, pay it once

  001f0	89 45 d8	 mov	 DWORD PTR __Errno_ref$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  001f3	72 02		 jb	 SHORT $LN649@UnpackSign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  001f5	8b 1e		 mov	 ebx, DWORD PTR [esi]
$LN649@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string

; 185  : 	_Errno_ref = 0;

  001f7	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 186  : 	const long _Ans = _CSTD strtol(_Ptr, &_Eptr, _Base);

  001fd	8d 45 e0	 lea	 eax, DWORD PTR __Eptr$209[ebp]
  00200	6a 10		 push	 16			; 00000010H
  00202	50		 push	 eax
  00203	53		 push	 ebx
  00204	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strtol
  0020a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0020d	8b c8		 mov	 ecx, eax

; 187  : 
; 188  : 	if (_Ptr == _Eptr)

  0020f	3b 5d e0	 cmp	 ebx, DWORD PTR __Eptr$209[ebp]
  00212	0f 84 a6 00 00
	00		 je	 $LN641@UnpackSign

; 190  : 	if (_Errno_ref == ERANGE || _Ans < INT_MIN || INT_MAX < _Ans)

  00218	8b 45 d8	 mov	 eax, DWORD PTR __Errno_ref$1$[ebp]
  0021b	83 38 22	 cmp	 DWORD PTR [eax], 34	; 00000022H
  0021e	0f 84 8f 00 00
	00		 je	 $LN642@UnpackSign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00224	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 62   :             pattern.push_back (static_cast <unsigned char> (std::stoi (token, nullptr, 16)));

  00227	88 4d df	 mov	 BYTE PTR $T133[ebp], cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1726 : 		return (this->_Myend() != this->_Mylast());

  0022a	39 47 08	 cmp	 DWORD PTR [edi+8], eax

; 917  : 		if (_Has_unused_capacity())

  0022d	74 07		 je	 SHORT $LN466@UnpackSign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0022f	88 08		 mov	 BYTE PTR [eax], cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  00231	ff 47 04	 inc	 DWORD PTR [edi+4]

; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  00234	eb 0c		 jmp	 SHORT $LN465@UnpackSign
$LN466@UnpackSign:

; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00236	8d 4d df	 lea	 ecx, DWORD PTR $T133[ebp]
  00239	51		 push	 ecx
  0023a	50		 push	 eax
  0023b	8b cf		 mov	 ecx, edi
  0023d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@E@?$vector@EV?$allocator@E@std@@@std@@QAEPAEQAE$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_reallocate<unsigned char>
$LN465@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2527 : 		return (append(_Ptr));

  00242	8b 5d d4	 mov	 ebx, DWORD PTR _mask$GSCopy$1$[ebp]
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_01LFCBOECM@?4@
$LN656@UnpackSign:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 55   :     for (const auto& token : tokens) {

  0024a	8b cb		 mov	 ecx, ebx
  0024c	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  00251	83 c6 18	 add	 esi, 24			; 00000018H
  00254	3b 75 d0	 cmp	 esi, DWORD PTR _<end>$L0$1$[ebp]
  00257	0f 85 38 ff ff
	ff		 jne	 $LL4@UnpackSign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string

; 190  : 	if (_Errno_ref == ERANGE || _Ans < INT_MIN || INT_MAX < _Ans)

  0025d	8b 75 e4	 mov	 esi, DWORD PTR _tokens$[ebp]
$LN3@UnpackSign:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 68   :     return true;

  00260	b3 01		 mov	 bl, 1
$LN12@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1913 : 		if (this->_Myfirst() != pointer())

  00262	85 f6		 test	 esi, esi
  00264	74 6d		 je	 SHORT $LN545@UnpackSign

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00266	8b 55 e8	 mov	 edx, DWORD PTR _tokens$[ebp+4]
  00269	51		 push	 ecx
  0026a	8b ce		 mov	 ecx, esi
  0026c	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00271	8b 4d ec	 mov	 ecx, DWORD PTR _tokens$[ebp+8]
  00274	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00279	8b 75 e4	 mov	 esi, DWORD PTR _tokens$[ebp]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  0027c	83 c4 04	 add	 esp, 4

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0027f	2b ce		 sub	 ecx, esi
  00281	f7 e9		 imul	 ecx
  00283	c1 fa 02	 sar	 edx, 2
  00286	8b c2		 mov	 eax, edx
  00288	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0028b	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0028d	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00290	8b c6		 mov	 eax, esi
  00292	c1 e1 03	 shl	 ecx, 3

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00295	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0029b	72 2c		 jb	 SHORT $LN617@UnpackSign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0029d	8b 76 fc	 mov	 esi, DWORD PTR [esi-4]
  002a0	83 c1 23	 add	 ecx, 35			; 00000023H
  002a3	2b c6		 sub	 eax, esi

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  002a5	83 c0 fc	 add	 eax, -4			; fffffffcH
  002a8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  002ab	76 1c		 jbe	 SHORT $LN617@UnpackSign
  002ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN642@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\string

; 191  : 		_Xout_of_range("stoi argument out of range");

  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MFFNMGGC@stoi?5argument?5out?5of?5range@
  002b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN641@UnpackSign:

; 189  : 		_Xinvalid_argument("invalid stoi argument");

  002be	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HGEDEDEC@invalid?5stoi?5argument@
  002c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xinvalid_argument@std@@YAXPBD@Z
$LN617@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  002c9	51		 push	 ecx
  002ca	56		 push	 esi
  002cb	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002d0	83 c4 08	 add	 esp, 8
$LN545@UnpackSign:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 68   :     return true;

  002d3	8a c3		 mov	 al, bl

; 69   : }

  002d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002df	59		 pop	 ecx
  002e0	5f		 pop	 edi
  002e1	5e		 pop	 esi
  002e2	5b		 pop	 ebx
  002e3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002e6	33 cd		 xor	 ecx, ebp
  002e8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002ed	8b e5		 mov	 esp, ebp
  002ef	5d		 pop	 ebp
  002f0	c3		 ret	 0
$LN658@UnpackSign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1519 : 				_Xlength();

  002f1	e8 00 00 00 00	 call	 ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
$LN655@UnpackSign:
  002f6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _tokens$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
__unwindfunclet$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1:
  00008	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$2:
  00010	8d 4d b8	 lea	 ecx, DWORD PTR $T7[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:
  00018	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001f	8b 4a 9c	 mov	 ecx, DWORD PTR [edx-100]
  00022	33 c8		 xor	 ecx, eax
  00024	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00029	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  00038	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?UnpackSignature@@YA_NPBDAAV?$vector@EV?$allocator@E@std@@@std@@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; UnpackSignature
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0000e	c2 04 00	 ret	 4
?__autoclassinit2@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?SearchSignature@@YAKKKPBD0@Z
_TEXT	SEGMENT
tv239 = -16						; size = 4
tv237 = -12						; size = 4
_patternLength$1$ = -8					; size = 4
_baseAddress$1$ = -4					; size = 4
_pattern$ = 8						; size = 4
_mask$ = 12						; size = 4
?SearchSignature@@YAKKKPBD0@Z PROC			; SearchSignature, COMDAT
; _baseAddress$ = ecx
; _moduleSize$ = edx

; 71   : DWORD SearchSignature (DWORD baseAddress, DWORD moduleSize, const char* pattern, const char* mask) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 72   : 
; 73   :     DWORD patternLength = strlen (mask);

  00008	8b 75 0c	 mov	 esi, DWORD PTR _mask$[ebp]
  0000b	57		 push	 edi
  0000c	89 4d fc	 mov	 DWORD PTR _baseAddress$1$[ebp], ecx
  0000f	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LL24@SearchSign:
  00012	8a 06		 mov	 al, BYTE PTR [esi]
  00014	46		 inc	 esi
  00015	84 c0		 test	 al, al
  00017	75 f9		 jne	 SHORT $LL24@SearchSign
  00019	2b f7		 sub	 esi, edi
  0001b	89 75 f8	 mov	 DWORD PTR _patternLength$1$[ebp], esi

; 74   : 
; 75   :     if (patternLength > moduleSize) return NULL;

  0001e	3b f2		 cmp	 esi, edx
  00020	77 57		 ja	 SHORT $LN3@SearchSign

; 76   :     if (baseAddress == 0) return NULL;

  00022	85 c9		 test	 ecx, ecx
  00024	74 53		 je	 SHORT $LN3@SearchSign

; 77   : 
; 78   :     for (DWORD offset = 0; offset < baseAddress - patternLength; offset++) {

  00026	8b c1		 mov	 eax, ecx
  00028	33 ff		 xor	 edi, edi
  0002a	2b c6		 sub	 eax, esi
  0002c	89 45 f0	 mov	 DWORD PTR tv239[ebp], eax
  0002f	74 48		 je	 SHORT $LN3@SearchSign
$LL4@SearchSign:

; 79   : 
; 80   :         bool isFound = true;

  00031	33 c0		 xor	 eax, eax
  00033	b3 01		 mov	 bl, 1

; 81   : 
; 82   :         for (DWORD charIterator = 0; charIterator < patternLength; charIterator++) {

  00035	85 f6		 test	 esi, esi
  00037	74 49		 je	 SHORT $LN16@SearchSign

; 79   : 
; 80   :         bool isFound = true;

  00039	8b 55 0c	 mov	 edx, DWORD PTR _mask$[ebp]
  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _pattern$[ebp]
  0003f	2b d1		 sub	 edx, ecx
  00041	89 55 f4	 mov	 DWORD PTR tv237[ebp], edx
$LL7@SearchSign:

; 83   :             isFound &= mask [charIterator] == '?' || pattern [charIterator] == * reinterpret_cast<const char*> (baseAddress + offset + charIterator);

  00044	03 c8		 add	 ecx, eax
  00046	80 3c 0a 3f	 cmp	 BYTE PTR [edx+ecx], 63	; 0000003fH
  0004a	74 14		 je	 SHORT $LN23@SearchSign
  0004c	8b 75 fc	 mov	 esi, DWORD PTR _baseAddress$1$[ebp]
  0004f	8d 14 38	 lea	 edx, DWORD PTR [eax+edi]
  00052	8a 09		 mov	 cl, BYTE PTR [ecx]
  00054	3a 0c 32	 cmp	 cl, BYTE PTR [edx+esi]
  00057	8b 75 f8	 mov	 esi, DWORD PTR _patternLength$1$[ebp]
  0005a	74 04		 je	 SHORT $LN23@SearchSign
  0005c	32 c9		 xor	 cl, cl
  0005e	eb 02		 jmp	 SHORT $LN13@SearchSign
$LN23@SearchSign:
  00060	b1 01		 mov	 cl, 1
$LN13@SearchSign:

; 81   : 
; 82   :         for (DWORD charIterator = 0; charIterator < patternLength; charIterator++) {

  00062	8b 55 f4	 mov	 edx, DWORD PTR tv237[ebp]

; 83   :             isFound &= mask [charIterator] == '?' || pattern [charIterator] == * reinterpret_cast<const char*> (baseAddress + offset + charIterator);

  00065	22 d9		 and	 bl, cl
  00067	8b 4d 08	 mov	 ecx, DWORD PTR _pattern$[ebp]
  0006a	40		 inc	 eax
  0006b	3b c6		 cmp	 eax, esi
  0006d	72 d5		 jb	 SHORT $LL7@SearchSign

; 84   :         }
; 85   : 
; 86   :         if (isFound) {

  0006f	84 db		 test	 bl, bl
  00071	75 0f		 jne	 SHORT $LN16@SearchSign

; 77   : 
; 78   :     for (DWORD offset = 0; offset < baseAddress - patternLength; offset++) {

  00073	47		 inc	 edi
  00074	3b 7d f0	 cmp	 edi, DWORD PTR tv239[ebp]
  00077	72 b8		 jb	 SHORT $LL4@SearchSign
$LN3@SearchSign:
  00079	5f		 pop	 edi

; 88   :         }
; 89   :     }
; 90   : 
; 91   :     return NULL;
; 92   : }

  0007a	5e		 pop	 esi
  0007b	33 c0		 xor	 eax, eax
  0007d	5b		 pop	 ebx
  0007e	8b e5		 mov	 esp, ebp
  00080	5d		 pop	 ebp
  00081	c3		 ret	 0
$LN16@SearchSign:

; 87   :             return baseAddress + offset;

  00082	8b 45 fc	 mov	 eax, DWORD PTR _baseAddress$1$[ebp]
  00085	03 c7		 add	 eax, edi
  00087	5f		 pop	 edi

; 88   :         }
; 89   :     }
; 90   : 
; 91   :     return NULL;
; 92   : }

  00088	5e		 pop	 esi
  00089	5b		 pop	 ebx
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
?SearchSignature@@YAKKKPBD0@Z ENDP			; SearchSignature
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEAAKAAK@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEAAKAAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::emplace_back<unsigned long &>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00005	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00008	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx

; 917  : 		if (_Has_unused_capacity())

  0000b	74 14		 je	 SHORT $LN2@emplace_ba
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 905  : 		++this->_Mylast();

  00017	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@emplace_ba:

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));
; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00021	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  00024	51		 push	 ecx
  00025	8b ca		 mov	 ecx, edx
  00027	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKAAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long &>

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??$emplace_back@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEAAKAAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::emplace_back<unsigned long &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@AAK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKAAK@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@AAK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKAAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long &>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00006	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00009	8b 00		 mov	 eax, DWORD PTR [eax]
  0000b	89 02		 mov	 DWORD PTR [edx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 905  : 		++this->_Mylast();

  00010	8d 50 04	 lea	 edx, DWORD PTR [eax+4]
  00013	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@AAK@?$vector@KV?$allocator@K@std@@@std@@AAEAAKAAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_back_with_unused_capacity<unsigned long &>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0000e	c2 04 00	 ret	 4
?__autoclassinit2@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?IsWinXPOrLater@Utils@@SA_NXZ
_TEXT	SEGMENT
_osVersionInfo$ = -280					; size = 276
__$ArrayPad$ = -4					; size = 4
?IsWinXPOrLater@Utils@@SA_NXZ PROC			; Utils::IsWinXPOrLater, COMDAT

; 132  : bool Utils::IsWinXPOrLater () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 18 01 00
	00		 sub	 esp, 280		; 00000118H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 133  : 
; 134  :     //Source: https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-getversionexa.
; 135  : 
; 136  :     OSVERSIONINFO osVersionInfo;
; 137  :     ZeroMemory (&osVersionInfo, sizeof (OSVERSIONINFO));

  00013	68 14 01 00 00	 push	 276			; 00000114H
  00018	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _osVersionInfo$[ebp]
  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 138  : 
; 139  :     //This causes a little confused. 
; 140  :     //
; 141  :     //If we were unable to fill the structure, then we return true, because the function expects false, 
; 142  :     //this will lead to the fact that the initialization of the loader simply stops, and through the debugger you can see what is wrong. 
; 143  :     if (GetVersionEx (&osVersionInfo)) return true;

  00029	8d 85 e8 fe ff
	ff		 lea	 eax, DWORD PTR _osVersionInfo$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExW@4
  00036	85 c0		 test	 eax, eax
  00038	75 26		 jne	 SHORT $LN5@IsWinXPOrL

; 144  : 
; 145  :     return ((osVersionInfo.dwMajorVersion > 5) || ((osVersionInfo.dwMajorVersion == 5) && (osVersionInfo.dwMinorVersion >= 1)));

  0003a	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _osVersionInfo$[ebp+4]
  00040	83 f8 05	 cmp	 eax, 5
  00043	77 1b		 ja	 SHORT $LN5@IsWinXPOrL
  00045	75 09		 jne	 SHORT $LN4@IsWinXPOrL
  00047	83 bd f0 fe ff
	ff 01		 cmp	 DWORD PTR _osVersionInfo$[ebp+8], 1
  0004e	73 10		 jae	 SHORT $LN5@IsWinXPOrL
$LN4@IsWinXPOrL:
  00050	32 c0		 xor	 al, al

; 146  : 
; 147  : }

  00052	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00055	33 cd		 xor	 ecx, ebp
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
$LN5@IsWinXPOrL:
  00060	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00063	b0 01		 mov	 al, 1
  00065	33 cd		 xor	 ecx, ebp
  00067	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
?IsWinXPOrLater@Utils@@SA_NXZ ENDP			; Utils::IsWinXPOrLater
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?IsWinServBuild@Utils@@SA_NXZ
_TEXT	SEGMENT
_osVersionInfo$ = -288					; size = 284
__$ArrayPad$ = -4					; size = 4
?IsWinServBuild@Utils@@SA_NXZ PROC			; Utils::IsWinServBuild, COMDAT

; 149  : bool Utils::IsWinServBuild () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000e	33 c5		 xor	 eax, ebp
  00010	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 150  : 
; 151  :     OSVERSIONINFOEX osVersionInfo;
; 152  :     ZeroMemory (&osVersionInfo, sizeof(OSVERSIONINFO));

  00013	68 14 01 00 00	 push	 276			; 00000114H
  00018	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _osVersionInfo$[ebp]
  0001e	6a 00		 push	 0
  00020	50		 push	 eax
  00021	e8 00 00 00 00	 call	 _memset
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH

; 153  : 
; 154  :     //This causes a little confused. 
; 155  :     //
; 156  :     //If we were unable to fill the structure, then we return true, because the function expects false, 
; 157  :     //this will lead to the fact that the initialization of the loader simply stops, and through the debugger you can see what is wrong.
; 158  :     if (GetVersionEx ((LPOSVERSIONINFO) &osVersionInfo)) return true;

  00029	8d 85 e0 fe ff
	ff		 lea	 eax, DWORD PTR _osVersionInfo$[ebp]
  0002f	50		 push	 eax
  00030	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExW@4
  00036	85 c0		 test	 eax, eax
  00038	74 10		 je	 SHORT $LN2@IsWinServB
  0003a	b0 01		 mov	 al, 1

; 161  : 
; 162  : }

  0003c	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0003f	33 cd		 xor	 ecx, ebp
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c3		 ret	 0
$LN2@IsWinServB:

; 159  : 
; 160  :     return osVersionInfo.wProductType == VER_NT_WORKSTATION;

  0004a	80 7d fa 01	 cmp	 BYTE PTR _osVersionInfo$[ebp+282], 1

; 161  : 
; 162  : }

  0004e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00051	0f 94 c0	 sete	 al
  00054	33 cd		 xor	 ecx, ebp
  00056	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
?IsWinServBuild@Utils@@SA_NXZ ENDP			; Utils::IsWinServBuild
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ?IsRedistPackagePresent@Utils@@SA_NXZ
_TEXT	SEGMENT
$T3 = -224						; size = 196
$T130 = -28						; size = 4
$T76 = -28						; size = 4
_regSubKeys$ = -24					; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?IsRedistPackagePresent@Utils@@SA_NXZ PROC		; Utils::IsRedistPackagePresent, COMDAT

; 164  : bool Utils::IsRedistPackagePresent () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?IsRedistPackagePresent@Utils@@SA_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 00 00
	00		 sub	 esp, 212		; 000000d4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0002e	6a 44		 push	 68			; 00000044H
  00030	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00033	c7 85 20 ff ff
	ff 02 00 00 80	 mov	 DWORD PTR $T3[ebp], -2147483646 ; 80000002H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0003d	33 c0		 xor	 eax, eax
  0003f	66 0f 13 45 e8	 movlpd	 QWORD PTR _regSubKeys$[ebp], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00044	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@NJBBFKEK@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@
  00049	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp+4]

; 3976 : 		_My_data._Mysize = 0;

  0004f	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00059	c7 85 38 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T3[ebp+24], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00063	66 89 85 24 ff
	ff ff		 mov	 WORD PTR $T3[ebp+4], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0006a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 169  :     std::map <HKEY, std::wstring> regSubKeys = {

  0006f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00076	8d 8d 40 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp+32]
  0007c	6a 4e		 push	 78			; 0000004eH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0007e	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00080	c7 85 3c ff ff
	ff 02 00 00 80	 mov	 DWORD PTR $T3[ebp+28], -2147483646 ; 80000002H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0008a	68 00 00 00 00	 push	 OFFSET ??_C@_1JO@BMHPCMGB@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@

; 3976 : 		_My_data._Mysize = 0;

  0008f	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+48], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00099	c7 85 54 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T3[ebp+52], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  000a3	66 89 85 40 ff
	ff ff		 mov	 WORD PTR $T3[ebp+32], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000aa	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 169  :     std::map <HKEY, std::wstring> regSubKeys = {

  000af	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000b3	8d 8d 5c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp+60]
  000b9	6a 4e		 push	 78			; 0000004eH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  000bb	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  000bd	c7 85 58 ff ff
	ff 02 00 00 80	 mov	 DWORD PTR $T3[ebp+56], -2147483646 ; 80000002H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_1JO@IOMHEKPF@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@

; 3976 : 		_My_data._Mysize = 0;

  000cc	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+76], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000d6	c7 85 70 ff ff
	ff 07 00 00 00	 mov	 DWORD PTR $T3[ebp+80], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  000e0	66 89 85 5c ff
	ff ff		 mov	 WORD PTR $T3[ebp+60], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000e7	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 169  :     std::map <HKEY, std::wstring> regSubKeys = {

  000ec	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  000f0	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp+88]
  000f6	6a 4e		 push	 78			; 0000004eH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  000f8	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  000fa	c7 85 74 ff ff
	ff 02 00 00 80	 mov	 DWORD PTR $T3[ebp+84], -2147483646 ; 80000002H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00104	68 00 00 00 00	 push	 OFFSET ??_C@_1JO@NONGKCIC@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@

; 3976 : 		_My_data._Mysize = 0;

  00109	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+104], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00110	c7 45 8c 07 00
	00 00		 mov	 DWORD PTR $T3[ebp+108], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00117	66 89 85 78 ff
	ff ff		 mov	 WORD PTR $T3[ebp+88], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0011e	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 169  :     std::map <HKEY, std::wstring> regSubKeys = {

  00123	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00127	8d 4d 94	 lea	 ecx, DWORD PTR $T3[ebp+116]
  0012a	6a 67		 push	 103			; 00000067H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0012c	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0012e	c7 45 90 00 00
	00 80		 mov	 DWORD PTR $T3[ebp+112], -2147483648 ; 80000000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00135	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@MEIAJFDE@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@

; 3976 : 		_My_data._Mysize = 0;

  0013a	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+132], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00141	c7 45 a8 07 00
	00 00		 mov	 DWORD PTR $T3[ebp+136], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00148	66 89 45 94	 mov	 WORD PTR $T3[ebp+116], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0014c	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 169  :     std::map <HKEY, std::wstring> regSubKeys = {

  00151	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00155	8d 4d b0	 lea	 ecx, DWORD PTR $T3[ebp+144]
  00158	6a 67		 push	 103			; 00000067H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0015a	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0015c	c7 45 ac 00 00
	00 80		 mov	 DWORD PTR $T3[ebp+140], -2147483648 ; 80000000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00163	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@PBKLKMMF@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@

; 3976 : 		_My_data._Mysize = 0;

  00168	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+160], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0016f	c7 45 c4 07 00
	00 00		 mov	 DWORD PTR $T3[ebp+164], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00176	66 89 45 b0	 mov	 WORD PTR $T3[ebp+144], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0017a	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 169  :     std::map <HKEY, std::wstring> regSubKeys = {

  0017f	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00183	8d 4d cc	 lea	 ecx, DWORD PTR $T3[ebp+172]
  00186	6a 67		 push	 103			; 00000067H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00188	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0018a	c7 45 c8 00 00
	00 80		 mov	 DWORD PTR $T3[ebp+168], -2147483648 ; 80000000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00191	68 00 00 00 00	 push	 OFFSET ??_C@_1NA@CKCHEBNC@?$AAI?$AAn?$AAs?$AAt?$AAa?$AAl?$AAl?$AAe?$AAr?$AA?2?$AAD?$AAe?$AAp?$AAe?$AAn@

; 3976 : 		_My_data._Mysize = 0;

  00196	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T3[ebp+188], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0019d	c7 45 e0 07 00
	00 00		 mov	 DWORD PTR $T3[ebp+192], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  001a4	66 89 45 cc	 mov	 WORD PTR $T3[ebp+172], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  001a8	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 169  :     std::map <HKEY, std::wstring> regSubKeys = {

  001ad	c7 45 fc 06 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 6
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  001b4	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _regSubKeys$[ebp], 0

; 469  : 		_Mysize(0)

  001bb	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _regSubKeys$[ebp+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  001c2	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buyheadnode
  001c7	8b f0		 mov	 esi, eax
  001c9	89 75 e8	 mov	 DWORD PTR _regSubKeys$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 329  : 		: _Mybase(key_compare())

  001cc	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1341 : 		auto _UFirst = _Get_unwrapped(_First);

  001d0	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR $T3[ebp]
$LL275@IsRedistPa:

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  001d6	57		 push	 edi
  001d7	8d 4d e8	 lea	 ecx, DWORD PTR _regSubKeys$[ebp]
  001da	e8 00 00 00 00	 call	 ??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  001df	50		 push	 eax
  001e0	83 c0 10	 add	 eax, 16			; 00000010H
  001e3	8d 4d e8	 lea	 ecx, DWORD PTR _regSubKeys$[ebp]
  001e6	50		 push	 eax
  001e7	56		 push	 esi
  001e8	8d 45 e4	 lea	 eax, DWORD PTR $T76[ebp]
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>

; 1343 : 		for (; _UFirst != _ULast; ++_UFirst)

  001f1	83 c7 1c	 add	 edi, 28			; 0000001cH
  001f4	8d 45 e4	 lea	 eax, DWORD PTR $T3[ebp+196]
  001f7	3b f8		 cmp	 edi, eax
  001f9	74 05		 je	 SHORT $LN592@IsRedistPa
  001fb	8b 75 e8	 mov	 esi, DWORD PTR _regSubKeys$[ebp]
  001fe	eb d6		 jmp	 SHORT $LL275@IsRedistPa
$LN592@IsRedistPa:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 169  :     std::map <HKEY, std::wstring> regSubKeys = {

  00200	68 00 00 00 00	 push	 OFFSET ??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
  00205	6a 07		 push	 7
  00207	6a 1c		 push	 28			; 0000001cH
  00209	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0020f	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  00213	50		 push	 eax
  00214	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  00219	8b 7d e8	 mov	 edi, DWORD PTR _regSubKeys$[ebp]
  0021c	8b 37		 mov	 esi, DWORD PTR [edi]
  0021e	3b f7		 cmp	 esi, edi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 185  :     for (const auto& key : regSubKeys) {

  00220	74 73		 je	 SHORT $LN3@IsRedistPa
  00222	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__RegOpenKeyExW@20
  00228	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL345@IsRedistPa:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00230	83 7e 28 08	 cmp	 DWORD PTR [esi+40], 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 307  : 		return (_Myval2);

  00234	8d 46 14	 lea	 eax, DWORD PTR [esi+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1815 : 		if (_Large_string_engaged())

  00237	72 02		 jb	 SHORT $LN366@IsRedistPa
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00239	8b 00		 mov	 eax, DWORD PTR [eax]
$LN366@IsRedistPa:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 186  :         if (RegOpenKeyExW (key.first, key.second.c_str(), 0, KEY_READ, nullptr)) {

  0023b	6a 00		 push	 0
  0023d	68 19 00 02 00	 push	 131097			; 00020019H
  00242	6a 00		 push	 0
  00244	50		 push	 eax
  00245	ff 76 10	 push	 DWORD PTR [esi+16]
  00248	ff d3		 call	 ebx
  0024a	85 c0		 test	 eax, eax
  0024c	0f 85 7f 00 00
	00		 jne	 $LN573@IsRedistPa
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 59   : 		if (_Ptr->_Right->_Isnil)

  00252	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00255	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00259	74 1d		 je	 SHORT $LN344@IsRedistPa

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0025b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0025e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00262	75 10		 jne	 SHORT $LN343@IsRedistPa
$LL342@IsRedistPa:
  00264	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  00267	75 0b		 jne	 SHORT $LN343@IsRedistPa

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00269	8b f0		 mov	 esi, eax
  0026b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0026e	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00272	74 f0		 je	 SHORT $LL342@IsRedistPa
$LN343@IsRedistPa:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00274	8b f0		 mov	 esi, eax

; 68   : 			}
; 69   : 		else

  00276	eb 16		 jmp	 SHORT $LN577@IsRedistPa
$LN344@IsRedistPa:

; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

  00278	8b f0		 mov	 esi, eax

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0027a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0027c	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00280	75 0c		 jne	 SHORT $LN577@IsRedistPa
$LL348@IsRedistPa:
  00282	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00284	8b f1		 mov	 esi, ecx
  00286	8b c8		 mov	 ecx, eax
  00288	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0028c	74 f4		 je	 SHORT $LL348@IsRedistPa
$LN577@IsRedistPa:

; 120  : 		return (_Ptr == _Right._Ptr);

  0028e	3b f7		 cmp	 esi, edi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 185  :     for (const auto& key : regSubKeys) {

  00290	75 9e		 jne	 SHORT $LL345@IsRedistPa

; 186  :         if (RegOpenKeyExW (key.first, key.second.c_str(), 0, KEY_READ, nullptr)) {

  00292	8b 7d e8	 mov	 edi, DWORD PTR _regSubKeys$[ebp]
$LN3@IsRedistPa:

; 192  :     return false;

  00295	32 db		 xor	 bl, bl
$LN16@IsRedistPa:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2113 : 		erase(begin(), end());

  00297	57		 push	 edi
  00298	ff 37		 push	 DWORD PTR [edi]
  0029a	8d 45 e4	 lea	 eax, DWORD PTR $T130[ebp]
  0029d	50		 push	 eax
  0029e	8d 4d e8	 lea	 ecx, DWORD PTR _regSubKeys$[ebp]
  002a1	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  002a6	6a 2c		 push	 44			; 0000002cH
  002a8	ff 75 e8	 push	 DWORD PTR _regSubKeys$[ebp]
  002ab	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  002b0	83 c4 08	 add	 esp, 8
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 192  :     return false;

  002b3	8a c3		 mov	 al, bl

; 193  : 
; 194  : }

  002b5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002b8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002bf	59		 pop	 ecx
  002c0	5f		 pop	 edi
  002c1	5e		 pop	 esi
  002c2	5b		 pop	 ebx
  002c3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c6	33 cd		 xor	 ecx, ebp
  002c8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002cd	8b e5		 mov	 esp, ebp
  002cf	5d		 pop	 ebp
  002d0	c3		 ret	 0
$LN573@IsRedistPa:

; 187  :             RegCloseKey (key.first);

  002d1	ff 76 10	 push	 DWORD PTR [esi+16]
  002d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
  002da	8b 7d e8	 mov	 edi, DWORD PTR _regSubKeys$[ebp]
  002dd	b3 01		 mov	 bl, 1
  002df	eb b6		 jmp	 SHORT $LN16@IsRedistPa
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$0:
  00000	8d 8d 20 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$1:
  0000b	8d 8d 3c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp+28]
  00011	e9 00 00 00 00	 jmp	 ??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$2:
  00016	8d 8d 58 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp+56]
  0001c	e9 00 00 00 00	 jmp	 ??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$3:
  00021	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp+84]
  00027	e9 00 00 00 00	 jmp	 ??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$4:
  0002c	8d 4d 90	 lea	 ecx, DWORD PTR $T3[ebp+112]
  0002f	e9 00 00 00 00	 jmp	 ??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$5:
  00034	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp+140]
  00037	e9 00 00 00 00	 jmp	 ??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$7:
  0003c	68 00 00 00 00	 push	 OFFSET ??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
  00041	6a 07		 push	 7
  00043	6a 1c		 push	 28			; 0000001cH
  00045	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??_M@YGXPAXIIP6EX0@Z@Z
  00051	c3		 ret	 0
__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$16:
  00052	8d 4d e8	 lea	 ecx, DWORD PTR _regSubKeys$[ebp]
  00055	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::~_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
__unwindfunclet$?IsRedistPackagePresent@Utils@@SA_NXZ$8:
  0005a	8d 4d e8	 lea	 ecx, DWORD PTR _regSubKeys$[ebp]
  0005d	e9 00 00 00 00	 jmp	 ??1?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@XZ
__ehhandler$?IsRedistPackagePresent@Utils@@SA_NXZ:
  00062	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00066	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00069	8b 8a 1c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-228]
  0006f	33 c8		 xor	 ecx, eax
  00071	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00076	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00079	33 c8		 xor	 ecx, eax
  0007b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00080	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?IsRedistPackagePresent@Utils@@SA_NXZ
  00085	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?IsRedistPackagePresent@Utils@@SA_NXZ ENDP		; Utils::IsRedistPackagePresent
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ PROC ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::~pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00006	83 f9 08	 cmp	 ecx, 8

; 3987 : 		if (_My_data._Large_string_engaged())

  00009	72 2e		 jb	 SHORT $LN46@pair
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000e	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN45@pair

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 22		 ja	 SHORT $LN42@pair

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN45@pair:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN46@pair:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00039	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00040	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00042	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00049	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0004d	5e		 pop	 esi
  0004e	c3		 ret	 0
$LN42@pair:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN64@pair:
  00055	cc		 int	 3
??1?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ ENDP ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::~pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ??0?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
__Right_size$1$ = -4					; size = 4
_this$GSCopy$ = -4					; size = 4
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABU01@@Z PROC ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 194  : }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	8b 4d 08	 mov	 ecx, DWORD PTR ___that$[ebp]
  0000b	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  0000e	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00011	89 75 fc	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  00014	57		 push	 edi
  00015	8b 01		 mov	 eax, DWORD PTR [ecx]
  00017	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00019	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  00020	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00027	83 7b 14 08	 cmp	 DWORD PTR [ebx+20], 8

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0002b	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0002e	89 45 fc	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 1815 : 		if (_Large_string_engaged())

  00031	72 02		 jb	 SHORT $LN34@pair
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00033	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN34@pair:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00035	83 f8 08	 cmp	 eax, 8
  00038	73 1d		 jae	 SHORT $LN23@pair
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0003a	0f 10 03	 movups	 xmm0, XMMWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  0003d	bf 07 00 00 00	 mov	 edi, 7
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00042	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 194  : }

  00046	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00049	8b c6		 mov	 eax, esi
  0004b	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  0004e	5f		 pop	 edi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN23@pair:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00057	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00059	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  0005e	83 cf 07	 or	 edi, 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00061	3b f8		 cmp	 edi, eax
  00063	0f 47 f8	 cmova	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00066	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00069	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]

; 26   : 	if (_Max_possible < _Count)

  0006c	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00071	76 05		 jbe	 SHORT $LN67@pair

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00073	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00076	eb 08		 jmp	 SHORT $LN107@pair
$LN67@pair:
  00078	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0007e	72 29		 jb	 SHORT $LN70@pair
$LN107@pair:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00080	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00083	83 ca ff	 or	 edx, -1
  00086	3b c1		 cmp	 eax, ecx
  00088	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0008b	50		 push	 eax
  0008c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00091	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00094	85 c0		 test	 eax, eax
  00096	74 0b		 je	 SHORT $LN79@pair

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00098	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0009b	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0009e	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000a1	eb 19		 jmp	 SHORT $LN69@pair
$LN79@pair:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN70@pair:

; 188  : 	if (_Bytes != 0)

  000a9	85 c9		 test	 ecx, ecx
  000ab	74 0d		 je	 SHORT $LN71@pair

; 52   : 		return (::operator new(_Bytes));

  000ad	51		 push	 ecx
  000ae	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b3	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000b6	8b c8		 mov	 ecx, eax
  000b8	eb 02		 jmp	 SHORT $LN69@pair
$LN71@pair:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000ba	33 c9		 xor	 ecx, ecx
$LN69@pair:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000bc	8b 45 fc	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000bf	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000c2	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  000c9	50		 push	 eax
  000ca	53		 push	 ebx
  000cb	51		 push	 ecx
  000cc	e8 00 00 00 00	 call	 _memcpy
  000d1	8b 45 fc	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  000d4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 194  : }

  000d7	89 46 14	 mov	 DWORD PTR [esi+20], eax
  000da	8b c6		 mov	 eax, esi
  000dc	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  000df	5f		 pop	 edi
  000e0	5e		 pop	 esi
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c2 04 00	 ret	 4
$LN108@pair:
??0?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@ABU01@@Z ENDP ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??1?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T17 = -4						; size = 4
??1?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@XZ PROC ; std::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::~map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 2113 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T17[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00015	6a 2c		 push	 44			; 0000002cH
  00017	ff 36		 push	 DWORD PTR [esi]
  00019	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
  00021	5e		 pop	 esi
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::~map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAEXI@Z PROC ; std::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	c2 04 00	 ret	 4
?__autoclassinit2@?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAEXI@Z ENDP ; std::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c2 04 00	 ret	 4
?__autoclassinit2@?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\initializer_list
;	COMDAT ??0?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@0@Z
_TEXT	SEGMENT
__First_arg$ = 8					; size = 4
__Last_arg$ = 12					; size = 4
??0?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@0@Z PROC ; std::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; _this$ = ecx

; 37   : 		{	// construct with pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 36   : 		: _First(_First_arg), _Last(_Last_arg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 38   : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@0@Z ENDP ; std::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator!=, COMDAT
; _this$ = ecx

; 124  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		return (!(*this == _Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 126  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator++, COMDAT
; _this$ = ecx

; 166  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN6@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL4@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL4@operator
$LN21@operator:

; 167  : 		++static_cast<_Mybase&>(*this);
; 168  : 		return (*this);

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 169  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN6@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN11@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL10@operator
$LN11@operator:

; 167  : 		++static_cast<_Mybase&>(*this);
; 168  : 		return (*this);

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 169  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@XZ PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator*, COMDAT
; _this$ = ecx

; 49   : 		return (_Ptr->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 157  : 		return ((reference)**(_Mybase *)this);
; 158  : 		}

  00005	c3		 ret	 0
??D?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@XZ ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Unchecked_end@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1219 : 		{	// return unchecked iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1220 : 		return (_Unchecked_iterator(this->_Get_data()._Myhead, nullptr));
; 1221 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked_end@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1209 : 		{	// return unchecked iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		return (_Myhead->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 42   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1210 : 		return (_Unchecked_iterator(this->_Get_data()._Lmost(), nullptr));
; 1211 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T17 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::~_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >, COMDAT
; _this$ = ecx

; 1167 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 42   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 2113 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T17[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00015	6a 2c		 push	 44			; 0000002cH
  00017	ff 36		 push	 DWORD PTR [esi]
  00019	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
  00021	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1169 : 		}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::~_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z
_TEXT	SEGMENT
$T18 = -24						; size = 4
_this$GSCopy$ = -20					; size = 4
__ULast$1$ = -16					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ilist$ = 8						; size = 8
??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z PROC ; std::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >, COMDAT
; _this$ = ecx

; 330  : 		{	// construct from initializer_list, defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b f9		 mov	 edi, ecx
  0002a	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002d	89 7d ec	 mov	 DWORD PTR _this$GSCopy$[ebp], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  00030	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0

; 469  : 		_Mysize(0)

  00036	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  0003d	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buyheadnode
  00042	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 329  : 		: _Mybase(key_compare())

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1342 : 		const auto _ULast = _Get_unwrapped(_Last);

  0004b	8b 45 0c	 mov	 eax, DWORD PTR __Ilist$[ebp+4]
  0004e	8b 5d 08	 mov	 ebx, DWORD PTR __Ilist$[ebp]
  00051	89 45 f0	 mov	 DWORD PTR __ULast$1$[ebp], eax
  00054	3b d8		 cmp	 ebx, eax

; 1343 : 		for (; _UFirst != _ULast; ++_UFirst)

  00056	74 23		 je	 SHORT $LN72@map
$LL38@map:

; 42   : 		: _Ptr(_Pnode)

  00058	8b 37		 mov	 esi, DWORD PTR [edi]

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  0005a	8b cf		 mov	 ecx, edi
  0005c	53		 push	 ebx
  0005d	e8 00 00 00 00	 call	 ??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  00062	50		 push	 eax
  00063	83 c0 10	 add	 eax, 16			; 00000010H
  00066	8b cf		 mov	 ecx, edi
  00068	50		 push	 eax
  00069	56		 push	 esi
  0006a	8d 45 e8	 lea	 eax, DWORD PTR $T18[ebp]
  0006d	50		 push	 eax
  0006e	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>

; 1343 : 		for (; _UFirst != _ULast; ++_UFirst)

  00073	83 c3 1c	 add	 ebx, 28			; 0000001cH
  00076	3b 5d f0	 cmp	 ebx, DWORD PTR __ULast$1$[ebp]
  00079	75 dd		 jne	 SHORT $LL38@map
$LN72@map:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 332  : 		}

  0007b	8b c7		 mov	 eax, edi
  0007d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00087	59		 pop	 ecx
  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::~_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
__ehhandler$??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$map@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@@std@@QAE@V?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z ENDP ; std::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::map<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Unchecked_end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1689 : 		return (this->_Mylast());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1690 : 		}

  00003	c3		 ret	 0
?_Unchecked_end@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Unchecked_begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1679 : 		return (this->_Myfirst());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1680 : 		}

  00002	c3		 ret	 0
?_Unchecked_begin@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 64		 je	 SHORT $LN4@vector

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00009	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001b	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  0001d	83 c4 04	 add	 esp, 4

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00020	2b cf		 sub	 ecx, edi
  00022	f7 e9		 imul	 ecx
  00024	c1 fa 02	 sar	 edx, 2
  00027	8b c2		 mov	 eax, edx
  00029	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002c	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00031	c1 e1 03	 shl	 ecx, 3

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00034	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003a	72 12		 jb	 SHORT $LN76@vector

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0003c	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0003f	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00042	2b fa		 sub	 edi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00044	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00047	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004a	77 23		 ja	 SHORT $LN73@vector

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004c	8b fa		 mov	 edi, edx
$LN76@vector:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004e	51		 push	 ecx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00055	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1919 : 			this->_Mylast() = pointer();

  0005e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  00065	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006c	5f		 pop	 edi
$LN4@vector:
  0006d	5e		 pop	 esi

; 895  : 		}

  0006e	c3		 ret	 0
$LN73@vector:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN99@vector:
  00075	cc		 int	 3
??1?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 652  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 652  : 		}

  00016	c3		 ret	 0
??0?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::clear, COMDAT
; _this$ = ecx

; 1590 : 		this->_Orphan_all();
; 1591 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1592 : 		this->_Mylast() = this->_Myfirst();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1593 : 		}

  00005	c3		 ret	 0
?clear@?$vector@EV?$allocator@E@std@@@std@@QAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::reserve, COMDAT
; _this$ = ecx

; 1514 : 		{	// increase capacity to _Newcapacity (without geometric growth), provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00003	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1515 : 		if (_Newcapacity > capacity())

  00008	8b 55 08	 mov	 edx, DWORD PTR __Newcapacity$[ebp]
  0000b	3b d0		 cmp	 edx, eax
  0000d	76 11		 jbe	 SHORT $LN2@reserve

; 1516 : 			{	// something to do (reserve() never shrinks)
; 1517 : 			if (_Newcapacity > max_size())

  0000f	81 fa ff ff ff
	7f		 cmp	 edx, 2147483647		; 7fffffffH
  00015	77 0d		 ja	 SHORT $LN34@reserve

; 1520 : 				}
; 1521 : 
; 1522 : 			_Reallocate_exactly(_Newcapacity);

  00017	89 55 08	 mov	 DWORD PTR __Newcapacity$[ebp], edx

; 1523 : 			}
; 1524 : 		}

  0001a	5d		 pop	 ebp

; 1520 : 				}
; 1521 : 
; 1522 : 			_Reallocate_exactly(_Newcapacity);

  0001b	e9 00 00 00 00	 jmp	 ?_Reallocate_exactly@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate_exactly
$LN2@reserve:

; 1523 : 			}
; 1524 : 		}

  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
$LN34@reserve:

; 1518 : 				{
; 1519 : 				_Xlength();

  00024	e8 00 00 00 00	 call	 ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
$LN32@reserve:
  00029	cc		 int	 3
?reserve@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAE@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back, COMDAT
; _this$ = ecx

; 936  : 		{	// insert by moving into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00003	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00006	39 51 08	 cmp	 DWORD PTR [ecx+8], edx

; 917  : 		if (_Has_unused_capacity())

  00009	74 0e		 je	 SHORT $LN6@push_back
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000b	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]
  0000e	8a 00		 mov	 al, BYTE PTR [eax]
  00010	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  00012	ff 41 04	 inc	 DWORD PTR [ecx+4]

; 937  : 		emplace_back(_STD move(_Val));
; 938  : 		}

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN6@push_back:

; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00019	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  0001c	52		 push	 edx
  0001d	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@E@?$vector@EV?$allocator@E@std@@@std@@QAEPAEQAE$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_reallocate<unsigned char>

; 937  : 		emplace_back(_STD move(_Val));
; 938  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?push_back@?$vector@EV?$allocator@E@std@@@std@@QAEX$$QAE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@E@?$vector@EV?$allocator@E@std@@@std@@QAEAAE$$QAE@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@E@?$vector@EV?$allocator@E@std@@@std@@QAEAAE$$QAE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::emplace_back<unsigned char>, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00005	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00008	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx

; 917  : 		if (_Has_unused_capacity())

  0000b	74 14		 je	 SHORT $LN2@emplace_ba
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00010	8a 00		 mov	 al, BYTE PTR [eax]
  00012	88 01		 mov	 BYTE PTR [ecx], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  00014	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 905  : 		++this->_Mylast();

  00017	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0001a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  0001d	5d		 pop	 ebp
  0001e	c2 04 00	 ret	 4
$LN2@emplace_ba:

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));
; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  00021	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  00024	51		 push	 ecx
  00025	8b ca		 mov	 ecx, edx
  00027	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@E@?$vector@EV?$allocator@E@std@@@std@@QAEPAEQAE$$QAE@Z ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_reallocate<unsigned char>

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??$emplace_back@E@?$vector@EV?$allocator@E@std@@@std@@QAEAAE$$QAE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::emplace_back<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@E@?$vector@EV?$allocator@E@std@@@std@@AAEAAE$$QAE@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@E@?$vector@EV?$allocator@E@std@@@std@@AAEAAE$$QAE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_back_with_unused_capacity<unsigned char>, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00006	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00009	8a 00		 mov	 al, BYTE PTR [eax]
  0000b	88 02		 mov	 BYTE PTR [edx], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 905  : 		++this->_Mylast();

  00010	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00013	89 51 04	 mov	 DWORD PTR [ecx+4], edx

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);
; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

  00016	5d		 pop	 ebp
  00017	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@E@?$vector@EV?$allocator@E@std@@@std@@AAEAAE$$QAE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_back_with_unused_capacity<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 3d		 je	 SHORT $LN4@vector

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN80@vector

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 22		 ja	 SHORT $LN77@vector

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN80@vector:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00035	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  00038	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  0003f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00046	5e		 pop	 esi

; 895  : 		}

  00047	c3		 ret	 0
$LN77@vector:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN103@vector:
  0004e	cc		 int	 3
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::~vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 652  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 652  : 		}

  00016	c3		 ret	 0
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::vector<unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8

; 1815 : 		if (_Large_string_engaged())

  00004	72 03		 jb	 SHORT $LN14@c_str

; 3280 : 		return (this->_Get_data()._Myptr());

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 3281 : 		}

  00008	c3		 ret	 0
$LN14@c_str:

; 3280 : 		return (this->_Get_data()._Myptr());

  00009	8b c1		 mov	 eax, ecx

; 3281 : 		}

  0000b	c3		 ret	 0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2459 : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 08	 cmp	 ecx, 8

; 3987 : 		if (_My_data._Large_string_engaged())

  00009	72 2d		 jb	 SHORT $LN43@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN42@basic_stri

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 21		 ja	 SHORT $LN39@basic_stri

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN42@basic_stri:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN43@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00038	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0003f	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00041	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00048	66 89 06	 mov	 WORD PTR [esi], ax
  0004b	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2461 : 		}

  0004c	c3		 ret	 0
$LN39@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN60@basic_stri:
  00053	cc		 int	 3
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right_size$1$ = -4					; size = 4
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2130 : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]

; 1784 : 		_Mysize(0),

  0000c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1785 : 		_Myres(0)

  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0001a	83 7f 14 08	 cmp	 DWORD PTR [edi+20], 8

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0001e	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00021	89 45 fc	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 1815 : 		if (_Large_string_engaged())

  00024	72 02		 jb	 SHORT $LN31@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00026	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN31@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00028	83 f8 08	 cmp	 eax, 8
  0002b	73 1c		 jae	 SHORT $LN20@basic_stri
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0002d	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  00030	bb 07 00 00 00	 mov	 ebx, 7

; 2132 : 		}

  00035	5f		 pop	 edi
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00036	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2132 : 		}

  00039	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003c	8b c6		 mov	 eax, esi
  0003e	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
$LN20@basic_stri:

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00049	8b d8		 mov	 ebx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0004b	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00050	83 cb 07	 or	 ebx, 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00053	3b d8		 cmp	 ebx, eax
  00055	0f 47 d8	 cmova	 ebx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00058	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  0005b	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]

; 26   : 	if (_Max_possible < _Count)

  0005e	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00063	76 05		 jbe	 SHORT $LN64@basic_stri

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00065	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00068	eb 08		 jmp	 SHORT $LN103@basic_stri
$LN64@basic_stri:
  0006a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00070	72 29		 jb	 SHORT $LN67@basic_stri
$LN103@basic_stri:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00072	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00075	83 ca ff	 or	 edx, -1
  00078	3b c1		 cmp	 eax, ecx
  0007a	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0007d	50		 push	 eax
  0007e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00083	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00086	85 c0		 test	 eax, eax
  00088	74 0b		 je	 SHORT $LN76@basic_stri

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0008a	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0008d	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00090	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00093	eb 19		 jmp	 SHORT $LN66@basic_stri
$LN76@basic_stri:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN67@basic_stri:

; 188  : 	if (_Bytes != 0)

  0009b	85 c9		 test	 ecx, ecx
  0009d	74 0d		 je	 SHORT $LN68@basic_stri

; 52   : 		return (::operator new(_Bytes));

  0009f	51		 push	 ecx
  000a0	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a5	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000a8	8b c8		 mov	 ecx, eax
  000aa	eb 02		 jmp	 SHORT $LN66@basic_stri
$LN68@basic_stri:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000ac	33 c9		 xor	 ecx, ecx
$LN66@basic_stri:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000ae	8b 45 fc	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000b1	89 0e		 mov	 DWORD PTR [esi], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000b3	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  000ba	50		 push	 eax
  000bb	57		 push	 edi
  000bc	51		 push	 ecx
  000bd	e8 00 00 00 00	 call	 _memcpy
  000c2	8b 45 fc	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
  000c5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2132 : 		}

  000c8	89 46 10	 mov	 DWORD PTR [esi+16], eax
  000cb	8b c6		 mov	 eax, esi
  000cd	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi
  000d2	5b		 pop	 ebx
  000d3	8b e5		 mov	 esp, ebp
  000d5	5d		 pop	 ebp
  000d6	c2 04 00	 ret	 4
$LN104@basic_stri:
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Old_size$1$ = -8					; size = 4
__Old$1$ = -4						; size = 4
__Newcap$ = 8						; size = 4
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve, COMDAT
; _this$ = ecx

; 3336 : 		{	// determine new minimum length of allocated storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3337 : 		auto& _My_data = this->_Get_data();
; 3338 : 		if (_My_data._Mysize > _Newcap)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newcap$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00010	89 45 f8	 mov	 DWORD PTR __Old_size$1$[ebp], eax
  00013	3b c3		 cmp	 eax, ebx
  00015	0f 87 70 01 00
	00		 ja	 $LN5@reserve

; 3339 : 			{	// requested capacity is not large enough for current size, ignore
; 3340 : 			return;	// nothing to do
; 3341 : 			}
; 3342 : 
; 3343 : 		if (_My_data._Myres == _Newcap)

  0001b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0001e	89 55 fc	 mov	 DWORD PTR __Old$1$[ebp], edx
  00021	3b d3		 cmp	 edx, ebx
  00023	0f 84 62 01 00
	00		 je	 $LN5@reserve

; 3344 : 			{	// we're already at the requested capacity
; 3345 : 			return;	// nothing to do
; 3346 : 			}
; 3347 : 
; 3348 : 		if (_My_data._Myres < _Newcap)

  00029	57		 push	 edi
  0002a	0f 83 13 01 00
	00		 jae	 $LN4@reserve

; 3349 : 			{	// reallocate to grow
; 3350 : 			const size_type _Old_size = _My_data._Mysize;
; 3351 : 			_Reallocate_grow_by(_Newcap - _Old_size,

  00030	8b cb		 mov	 ecx, ebx
  00032	2b c8		 sub	 ecx, eax

; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00034	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00039	2b 45 f8	 sub	 eax, DWORD PTR __Old_size$1$[ebp]
  0003c	3b c1		 cmp	 eax, ecx
  0003e	0f 82 55 01 00
	00		 jb	 $LN171@reserve

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00044	8b fb		 mov	 edi, ebx
  00046	83 cf 0f	 or	 edi, 15			; 0000000fH
  00049	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH

; 3870 : 		if (_Masked > _Max)

  0004f	76 07		 jbe	 SHORT $LN35@reserve

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00051	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  00056	eb 1e		 jmp	 SHORT $LN34@reserve
$LN35@reserve:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00058	8b ca		 mov	 ecx, edx
  0005a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0005f	d1 e9		 shr	 ecx, 1
  00061	2b c1		 sub	 eax, ecx
  00063	3b d0		 cmp	 edx, eax
  00065	76 07		 jbe	 SHORT $LN36@reserve

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00067	bf ff ff ff 7f	 mov	 edi, 2147483647		; 7fffffffH
  0006c	eb 08		 jmp	 SHORT $LN34@reserve
$LN36@reserve:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0006e	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00071	3b f8		 cmp	 edi, eax
  00073	0f 42 f8	 cmovb	 edi, eax
$LN34@reserve:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00076	33 c9		 xor	 ecx, ecx
  00078	8b c7		 mov	 eax, edi
  0007a	83 c0 01	 add	 eax, 1
  0007d	0f 92 c1	 setb	 cl
  00080	f7 d9		 neg	 ecx
  00082	0b c8		 or	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00084	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0008a	72 2a		 jb	 SHORT $LN67@reserve

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0008c	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0008f	83 ca ff	 or	 edx, -1
  00092	3b c1		 cmp	 eax, ecx
  00094	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0009d	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000a0	85 c0		 test	 eax, eax
  000a2	0f 84 eb 00 00
	00		 je	 $LN161@reserve

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000a8	8b 55 fc	 mov	 edx, DWORD PTR __Old$1$[ebp]

; 103  : 		& ~(_Big_allocation_alignment - 1));

  000ab	8d 58 23	 lea	 ebx, DWORD PTR [eax+35]
  000ae	83 e3 e0	 and	 ebx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000b1	89 43 fc	 mov	 DWORD PTR [ebx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000b4	eb 16		 jmp	 SHORT $LN66@reserve
$LN67@reserve:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  000b6	85 c9		 test	 ecx, ecx
  000b8	74 10		 je	 SHORT $LN68@reserve

; 52   : 		return (::operator new(_Bytes));

  000ba	51		 push	 ecx
  000bb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000c0	8b 55 fc	 mov	 edx, DWORD PTR __Old$1$[ebp]

; 52   : 		return (::operator new(_Bytes));

  000c3	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000c6	8b d8		 mov	 ebx, eax
  000c8	eb 02		 jmp	 SHORT $LN66@reserve
$LN68@reserve:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000ca	33 db		 xor	 ebx, ebx
$LN66@reserve:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3934 : 		_My_data._Mysize = _New_size;

  000cc	8b 45 08	 mov	 eax, DWORD PTR __Newcap$[ebp]
  000cf	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000d2	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  000d5	40		 inc	 eax
  000d6	89 7e 14	 mov	 DWORD PTR [esi+20], edi

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000d9	50		 push	 eax
  000da	83 fa 10	 cmp	 edx, 16			; 00000010H
  000dd	72 49		 jb	 SHORT $LN13@reserve

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000df	8b 3e		 mov	 edi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000e1	57		 push	 edi
  000e2	53		 push	 ebx
  000e3	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000e8	8b 4d fc	 mov	 ecx, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000eb	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000ee	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000ef	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f5	72 16		 jb	 SHORT $LN112@reserve

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000f7	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  000fa	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fd	2b fa		 sub	 edi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000ff	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00102	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00105	0f 87 88 00 00
	00		 ja	 $LN161@reserve

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0010b	8b fa		 mov	 edi, edx
$LN112@reserve:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0010d	51		 push	 ecx
  0010e	57		 push	 edi
  0010f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  00114	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00117	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  0011a	89 1e		 mov	 DWORD PTR [esi], ebx
  0011c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0011f	5f		 pop	 edi
  00120	5e		 pop	 esi

; 3361 : 			{	// deallocate everything; switch back to "small" mode
; 3362 : 			_Become_small();
; 3363 : 			return;
; 3364 : 			}
; 3365 : 
; 3366 : 		// ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3367 : 		}

  00121	5b		 pop	 ebx
  00122	8b e5		 mov	 esp, ebp
  00124	5d		 pop	 ebp
  00125	c2 04 00	 ret	 4
$LN13@reserve:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00128	56		 push	 esi
  00129	53		 push	 ebx
  0012a	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  0012f	8b 45 f8	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00132	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3356 : 			_My_data._Mysize = _Old_size;

  00135	89 1e		 mov	 DWORD PTR [esi], ebx
  00137	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0013a	5f		 pop	 edi
  0013b	5e		 pop	 esi

; 3361 : 			{	// deallocate everything; switch back to "small" mode
; 3362 : 			_Become_small();
; 3363 : 			return;
; 3364 : 			}
; 3365 : 
; 3366 : 		// ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3367 : 		}

  0013c	5b		 pop	 ebx
  0013d	8b e5		 mov	 esp, ebp
  0013f	5d		 pop	 ebp
  00140	c2 04 00	 ret	 4
$LN4@reserve:

; 3357 : 			return;
; 3358 : 			}
; 3359 : 
; 3360 : 		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())

  00143	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00146	73 42		 jae	 SHORT $LN168@reserve

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00148	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3357 : 			return;
; 3358 : 			}
; 3359 : 
; 3360 : 		if (this->_BUF_SIZE > _Newcap && _My_data._Large_string_engaged())

  0014b	72 3d		 jb	 SHORT $LN168@reserve

; 3959 : 		const pointer _Ptr = _My_data._Bx._Ptr;

  0014d	8b 3e		 mov	 edi, DWORD PTR [esi]

; 3960 : 		auto& _Al = this->_Getal();
; 3961 : 		_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3962 : 		_Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);

  0014f	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00150	50		 push	 eax
  00151	57		 push	 edi
  00152	56		 push	 esi
  00153	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3963 : 		_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00158	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0015b	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3963 : 		_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0015e	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0015f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00165	72 12		 jb	 SHORT $LN164@reserve

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00167	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0016a	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0016d	2b fa		 sub	 edi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0016f	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00172	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00175	77 1c		 ja	 SHORT $LN161@reserve

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00177	8b fa		 mov	 edi, edx
$LN164@reserve:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00179	51		 push	 ecx
  0017a	57		 push	 edi
  0017b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00180	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3964 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00183	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
$LN168@reserve:
  0018a	5f		 pop	 edi
$LN5@reserve:
  0018b	5e		 pop	 esi

; 3361 : 			{	// deallocate everything; switch back to "small" mode
; 3362 : 			_Become_small();
; 3363 : 			return;
; 3364 : 			}
; 3365 : 
; 3366 : 		// ignore requests to reserve to [_BUF_SIZE, _Myres)
; 3367 : 		}

  0018c	5b		 pop	 ebx
  0018d	8b e5		 mov	 esp, ebp
  0018f	5d		 pop	 ebp
  00190	c2 04 00	 ret	 4
$LN161@reserve:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00193	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN171@reserve:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3925 : 			_Xlen();	// result too long

  00199	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN169@reserve:
  0019e	cc		 int	 3
?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::reserve
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBEXQADQBDI@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBEXQADQBDI@Z PROC ; <lambda_67d87d4aa1269033985980465fd1d824>::operator(), COMDAT
; _this$dead$ = ecx

; 3352 : 				[](_Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3353 : 				_Traits::copy(_New_ptr, _Old_ptr, _Old_size + 1);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Old_size$[ebp]
  00006	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00007	50		 push	 eax
  00008	ff 75 0c	 push	 DWORD PTR __Old_ptr$[ebp]
  0000b	ff 75 08	 push	 DWORD PTR __New_ptr$[ebp]
  0000e	e8 00 00 00 00	 call	 _memcpy
  00013	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3354 : 				});

  00016	5d		 pop	 ebp
  00017	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_67d87d4aa1269033985980465fd1d824>@@QBEXQADQBDI@Z ENDP ; <lambda_67d87d4aa1269033985980465fd1d824>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00004	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0000b	72 06		 jb	 SHORT $LN18@clear
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0000f	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2872 : 		}

  00012	c3		 ret	 0
$LN18@clear:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00013	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2872 : 		}

  00016	c3		 ret	 0
?clear@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 2526 : 		{	// append [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2528 : 		}

  00003	5d		 pop	 ebp

; 2527 : 		return (append(_Ptr));

  00004	e9 00 00 00 00	 jmp	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$dead$ = ecx
  00000	c3		 ret	 0
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
; _this$dead$ = ecx
  00000	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$dead$ = ecx
  00000	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator==, COMDAT
; _this$ = ecx

; 119  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 		return (_Ptr == _Right._Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 121  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 75   : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 75   : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator*, COMDAT
; _this$ = ecx

; 49   : 		return (_Ptr->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 50   : 		}

  00005	c3		 ret	 0
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >, COMDAT
; _this$ = ecx

; 152  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 153  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Lmost, COMDAT
; _this$ = ecx

; 498  : 		return (_Myhead->_Left);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 499  : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1015 : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 1016 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00000	6a 2c		 push	 44			; 0000002cH
  00002	ff 31		 push	 DWORD PTR [ecx]
  00004	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00009	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 814  : 		}

  0000c	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T17 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2112 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 42   : 		: _Ptr(_Pnode)

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2113 : 		erase(begin(), end());

  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T17[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase

; 2114 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T11 = -8						; size = 4
__ULast$1$ = -4						; size = 4
__Ilist$ = 8						; size = 8
?insert@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::insert, COMDAT
; _this$ = ecx

; 1350 : 		{	// insert initializer_list

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1342 : 		const auto _ULast = _Get_unwrapped(_Last);

  00006	8b 45 0c	 mov	 eax, DWORD PTR __Ilist$[ebp+4]

; 1350 : 		{	// insert initializer_list

  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 1341 : 		auto _UFirst = _Get_unwrapped(_First);

  0000b	8b 75 08	 mov	 esi, DWORD PTR __Ilist$[ebp]

; 1350 : 		{	// insert initializer_list

  0000e	8b d9		 mov	 ebx, ecx

; 1342 : 		const auto _ULast = _Get_unwrapped(_Last);

  00010	89 45 fc	 mov	 DWORD PTR __ULast$1$[ebp], eax
  00013	3b f0		 cmp	 esi, eax

; 1343 : 		for (; _UFirst != _ULast; ++_UFirst)

  00015	74 25		 je	 SHORT $LN9@insert
  00017	57		 push	 edi
$LL10@insert:

; 42   : 		: _Ptr(_Pnode)

  00018	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  0001a	8b cb		 mov	 ecx, ebx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  00022	50		 push	 eax
  00023	83 c0 10	 add	 eax, 16			; 00000010H
  00026	8b cb		 mov	 ecx, ebx
  00028	50		 push	 eax
  00029	57		 push	 edi
  0002a	8d 45 f8	 lea	 eax, DWORD PTR $T11[ebp]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>

; 1343 : 		for (; _UFirst != _ULast; ++_UFirst)

  00033	83 c6 1c	 add	 esi, 28			; 0000001cH
  00036	3b 75 fc	 cmp	 esi, DWORD PTR __ULast$1$[ebp]
  00039	75 dd		 jne	 SHORT $LL10@insert
  0003b	5f		 pop	 edi
$LN9@insert:
  0003c	5e		 pop	 esi

; 1351 : 		insert(_Ilist.begin(), _Ilist.end());
; 1352 : 		}

  0003d	5b		 pop	 ebx
  0003e	8b e5		 mov	 esp, ebp
  00040	5d		 pop	 ebp
  00041	c2 08 00	 ret	 8
?insert@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXV?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@PAUHKEY__@@@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$dead$ = 8					; size = 4
??0?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@PAUHKEY__@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >, COMDAT
; _this$ = ecx

; 1085 : 		{	// construct empty tree from comparator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 468  : 		: _Myhead(),

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 1086 : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@PAUHKEY__@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast, COMDAT
; _this$ = ecx

; 586  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 587  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst, COMDAT
; _this$ = ecx

; 576  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 577  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$allocator@E@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$allocator@E@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal, COMDAT
; _this$ = ecx

; 545  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 546  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$allocator@E@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 535  : 		_Get_data()._Orphan_all();
; 536  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 423  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 423  : 		}

  00016	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast, COMDAT
; _this$ = ecx

; 586  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 587  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 576  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 577  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 423  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 423  : 		}

  00016	c3		 ret	 0
??0?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1911 : 		this->_Orphan_all();
; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00005	85 c9		 test	 ecx, ecx
  00007	74 64		 je	 SHORT $LN2@Tidy

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00009	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00013	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00016	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001b	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  0001d	83 c4 04	 add	 esp, 4

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00020	2b cf		 sub	 ecx, edi
  00022	f7 e9		 imul	 ecx
  00024	c1 fa 02	 sar	 edx, 2
  00027	8b c2		 mov	 eax, edx
  00029	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002c	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0002e	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00031	c1 e1 03	 shl	 ecx, 3

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00034	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003a	72 12		 jb	 SHORT $LN74@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0003c	8b 57 fc	 mov	 edx, DWORD PTR [edi-4]
  0003f	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00042	2b fa		 sub	 edi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00044	8d 47 fc	 lea	 eax, DWORD PTR [edi-4]
  00047	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004a	77 23		 ja	 SHORT $LN71@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004c	8b fa		 mov	 edi, edx
$LN74@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004e	51		 push	 ecx
  0004f	57		 push	 edi
  00050	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00055	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1919 : 			this->_Mylast() = pointer();

  0005e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  00065	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0006c	5f		 pop	 edi
$LN2@Tidy:

; 1922 : 		}

  0006d	5e		 pop	 esi
  0006e	c3		 ret	 0
$LN71@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN96@Tidy:
  00075	cc		 int	 3
?_Tidy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@ABEXPAE0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@ABEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1960 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@ABEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1911 : 		this->_Orphan_all();
; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 3d		 je	 SHORT $LN2@Tidy

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00009	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000c	2b c8		 sub	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN78@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 22		 ja	 SHORT $LN75@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN78@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00035	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  00038	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  0003f	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 1922 : 		}

  00046	5e		 pop	 esi
  00047	c3		 ret	 0
$LN75@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN100@Tidy:
  0004e	cc		 int	 3
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@AAEXXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1850 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE0@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@EV?$allocator@E@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
?_Has_unused_capacity@?$vector@EV?$allocator@E@std@@@std@@ABE_NXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00006	0f 95 c0	 setne	 al

; 1727 : 		}

  00009	c3		 ret	 0
?_Has_unused_capacity@?$vector@EV?$allocator@E@std@@@std@@ABE_NXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity, COMDAT
; _this$ = ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1716 : 		}

  00005	c3		 ret	 0
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size, COMDAT
; _this$dead$ = ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Reallocate_exactly@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Size$1$ = -8						; size = 4
$T25 = -1						; size = 1
__Newcapacity$ = 8					; size = 4
?_Reallocate_exactly@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate_exactly, COMDAT
; _this$ = ecx

; 1497 : 		{	// set capacity to _Newcapacity (without geometric growth), provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Newcapacity$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0000e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00011	2b 07		 sub	 eax, DWORD PTR [edi]
  00013	89 45 f8	 mov	 DWORD PTR __Size$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00016	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  0001c	72 27		 jb	 SHORT $LN31@Reallocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0001e	8d 43 23	 lea	 eax, DWORD PTR [ebx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00021	83 c9 ff	 or	 ecx, -1
  00024	3b c3		 cmp	 eax, ebx
  00026	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002f	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00032	85 c0		 test	 eax, eax
  00034	0f 84 81 00 00
	00		 je	 $LN162@Reallocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0003a	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  0003d	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00040	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00043	eb 13		 jmp	 SHORT $LN30@Reallocate
$LN31@Reallocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00045	85 db		 test	 ebx, ebx
  00047	74 0d		 je	 SHORT $LN32@Reallocate

; 52   : 		return (::operator new(_Bytes));

  00049	53		 push	 ebx
  0004a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004f	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00052	8b f0		 mov	 esi, eax
  00054	eb 02		 jmp	 SHORT $LN30@Reallocate
$LN32@Reallocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00056	33 f6		 xor	 esi, esi
$LN30@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 253  : 	const auto _UFirst = _Get_unwrapped(_First);

  00058	8b 17		 mov	 edx, DWORD PTR [edi]

; 254  : 	const auto _ULast = _Get_unwrapped(_Last);
; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 256  : 	_Seek_wrapped(_Dest,

  0005a	51		 push	 ecx
  0005b	8d 4d ff	 lea	 ecx, DWORD PTR $T25[ebp]
  0005e	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z ; std::_Ptr_move_cat<unsigned char,unsigned char>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00063	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00066	2b c2		 sub	 eax, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00068	50		 push	 eax
  00069	52		 push	 edx
  0006a	56		 push	 esi
  0006b	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1898 : 		if (this->_Myfirst() != pointer())

  00070	8b 07		 mov	 eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00072	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1898 : 		if (this->_Myfirst() != pointer())

  00075	85 c0		 test	 eax, eax
  00077	74 29		 je	 SHORT $LN166@Reallocate

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00079	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0007c	2b c8		 sub	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0007e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00084	72 12		 jb	 SHORT $LN165@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00086	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00089	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0008c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0008e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00091	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00094	77 25		 ja	 SHORT $LN162@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00096	8b c2		 mov	 eax, edx
$LN165@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00098	51		 push	 ecx
  00099	50		 push	 eax
  0009a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0009f	83 c4 08	 add	 esp, 8
$LN166@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  000a2	8b 45 f8	 mov	 eax, DWORD PTR __Size$1$[ebp]
  000a5	89 37		 mov	 DWORD PTR [edi], esi
  000a7	03 c6		 add	 eax, esi
  000a9	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  000ac	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  000af	89 47 08	 mov	 DWORD PTR [edi+8], eax
  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx

; 1510 : 		}

  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c2 04 00	 ret	 4
$LN162@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN187@Reallocate:
  000c1	cc		 int	 3
?_Reallocate_exactly@?$vector@EV?$allocator@E@std@@@std@@AAEXI@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Reallocate_exactly
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT
; _this$dead$ = ecx

; 1862 : 			}

  00000	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8

; 1814 : 		const value_type * _Result = _Bx._Buf;
; 1815 : 		if (_Large_string_engaged())

  00004	72 03		 jb	 SHORT $LN8@Myptr

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);
; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1821 : 		}

  00008	c3		 ret	 0
$LN8@Myptr:

; 1816 : 			{
; 1817 : 			_Result = _Unfancy(_Bx._Ptr);
; 1818 : 			}
; 1819 : 
; 1820 : 		return (_Result);

  00009	8b c1		 mov	 eax, ecx

; 1821 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
_TEXT	SEGMENT
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT
; ___$ReturnUdt$ = ecx
; __Al$dead$ = edx

; 897  : 		return (_Al);

  00000	8b c1		 mov	 eax, ecx

; 898  : 		}

  00002	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 2048 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2049 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$allocator@_W@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 2038 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2039 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$allocator@_W@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1911 : 		}

  00007	8b c1		 mov	 eax, ecx

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1911 : 		}

  00010	c3		 ret	 0
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3984 : 		{	// initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 08	 cmp	 ecx, 8

; 3985 : 		this->_Orphan_all();
; 3986 : 		auto& _My_data = this->_Get_data();
; 3987 : 		if (_My_data._Large_string_engaged())

  00009	72 2d		 jb	 SHORT $LN41@Tidy_deall
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN40@Tidy_deall

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 21		 ja	 SHORT $LN37@Tidy_deall

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN40@Tidy_deall:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN41@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00038	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0003f	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00041	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00048	66 89 06	 mov	 WORD PTR [esi], ax
  0004b	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 4000 : 		}

  0004c	c3		 ret	 0
$LN37@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN46@Tidy_deall:
  00053	cc		 int	 3
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00000	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00002	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00009	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00010	66 89 01	 mov	 WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3981 : 		}

  00013	c3		 ret	 0
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z
_TEXT	SEGMENT
__Old$1$ = -12						; size = 4
__Ptr$GSCopy$1$ = -8					; size = 4
__Count$GSCopy$1$ = -4					; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2657 : 		{	// assign [_Ptr, _Ptr + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00009	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	8b f9		 mov	 edi, ecx
  00011	89 55 f8	 mov	 DWORD PTR __Ptr$GSCopy$1$[ebp], edx
  00014	89 45 fc	 mov	 DWORD PTR __Count$GSCopy$1$[ebp], eax

; 2658 : 		auto& _My_data = this->_Get_data();
; 2659 : 		if (_Count <= _My_data._Myres)

  00017	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
  0001a	89 4d f4	 mov	 DWORD PTR __Old$1$[ebp], ecx
  0001d	3b c1		 cmp	 eax, ecx
  0001f	77 2b		 ja	 SHORT $LN2@assign

; 1803 : 		value_type * _Result = _Bx._Buf;

  00021	8b df		 mov	 ebx, edi

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00023	83 f9 08	 cmp	 ecx, 8

; 1804 : 		if (_Large_string_engaged())

  00026	72 02		 jb	 SHORT $LN9@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00028	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN9@assign:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  0002a	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2662 : 			_My_data._Mysize = _Count;

  0002d	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00030	56		 push	 esi
  00031	52		 push	 edx
  00032	53		 push	 ebx
  00033	e8 00 00 00 00	 call	 _memmove
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0003b	33 c0		 xor	 eax, eax
  0003d	66 89 04 1e	 mov	 WORD PTR [esi+ebx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2672 : 		}

  00041	8b c7		 mov	 eax, edi
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 08 00	 ret	 8
$LN2@assign:

; 3889 : 		if (_New_size > max_size())

  0004c	3d fe ff ff 7f	 cmp	 eax, 2147483646		; 7ffffffeH
  00051	0f 87 f5 00 00
	00		 ja	 $LN141@assign

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00057	8b f0		 mov	 esi, eax
  00059	83 ce 07	 or	 esi, 7
  0005c	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 3870 : 		if (_Masked > _Max)

  00062	76 07		 jbe	 SHORT $LN45@assign

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00064	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00069	eb 1e		 jmp	 SHORT $LN44@assign
$LN45@assign:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0006b	8b d1		 mov	 edx, ecx
  0006d	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00072	d1 ea		 shr	 edx, 1
  00074	2b c2		 sub	 eax, edx
  00076	3b c8		 cmp	 ecx, eax
  00078	76 07		 jbe	 SHORT $LN46@assign

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  0007a	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  0007f	eb 08		 jmp	 SHORT $LN44@assign
$LN46@assign:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00081	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00084	3b f0		 cmp	 esi, eax
  00086	0f 42 f0	 cmovb	 esi, eax
$LN44@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00089	33 c9		 xor	 ecx, ecx
  0008b	8b c6		 mov	 eax, esi
  0008d	83 c0 01	 add	 eax, 1
  00090	0f 92 c1	 setb	 cl
  00093	f7 d9		 neg	 ecx
  00095	0b c8		 or	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00097	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]

; 26   : 	if (_Max_possible < _Count)

  0009a	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  000a0	76 05		 jbe	 SHORT $LN75@assign

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  000a2	83 ca ff	 or	 edx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  000a5	eb 08		 jmp	 SHORT $LN137@assign
$LN75@assign:
  000a7	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  000ad	72 23		 jb	 SHORT $LN78@assign
$LN137@assign:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  000af	8d 42 23	 lea	 eax, DWORD PTR [edx+35]

; 94   : 	if (_Block_size <= _Bytes)

  000b2	83 c9 ff	 or	 ecx, -1
  000b5	3b c2		 cmp	 eax, edx
  000b7	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  000ba	50		 push	 eax
  000bb	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000c0	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000c3	85 c0		 test	 eax, eax
  000c5	74 7f		 je	 SHORT $LN122@assign

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  000c7	8d 58 23	 lea	 ebx, DWORD PTR [eax+35]
  000ca	83 e3 e0	 and	 ebx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000cd	89 43 fc	 mov	 DWORD PTR [ebx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000d0	eb 13		 jmp	 SHORT $LN77@assign
$LN78@assign:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  000d2	85 d2		 test	 edx, edx
  000d4	74 0d		 je	 SHORT $LN79@assign

; 52   : 		return (::operator new(_Bytes));

  000d6	52		 push	 edx
  000d7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000dc	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000df	8b d8		 mov	 ebx, eax
  000e1	eb 02		 jmp	 SHORT $LN77@assign
$LN79@assign:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000e3	33 db		 xor	 ebx, ebx
$LN77@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  000e5	8b 45 fc	 mov	 eax, DWORD PTR __Count$GSCopy$1$[ebp]

; 3901 : 		_My_data._Myres = _New_capacity;

  000e8	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000eb	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000ee	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]
  000f1	56		 push	 esi
  000f2	ff 75 f8	 push	 DWORD PTR __Ptr$GSCopy$1$[ebp]
  000f5	53		 push	 ebx
  000f6	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  000fb	33 c0		 xor	 eax, eax
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000fd	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00100	66 89 04 1e	 mov	 WORD PTR [esi+ebx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  00104	8b 45 f4	 mov	 eax, DWORD PTR __Old$1$[ebp]
  00107	83 f8 08	 cmp	 eax, 8
  0010a	72 2d		 jb	 SHORT $LN23@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010c	8d 0c 45 02 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+2]
  00113	8b 07		 mov	 eax, DWORD PTR [edi]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00115	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011b	72 12		 jb	 SHORT $LN125@assign

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0011d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00120	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00123	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00125	83 c0 fc	 add	 eax, -4			; fffffffcH
  00128	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012b	77 19		 ja	 SHORT $LN122@assign

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0012d	8b c2		 mov	 eax, edx
$LN125@assign:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0012f	51		 push	 ecx
  00130	50		 push	 eax
  00131	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00136	83 c4 08	 add	 esp, 8
$LN23@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00139	89 1f		 mov	 DWORD PTR [edi], ebx

; 2672 : 		}

  0013b	8b c7		 mov	 eax, edi
  0013d	5f		 pop	 edi
  0013e	5e		 pop	 esi
  0013f	5b		 pop	 ebx
  00140	8b e5		 mov	 esp, ebp
  00142	5d		 pop	 ebp
  00143	c2 08 00	 ret	 8
$LN122@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00146	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN141@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3891 : 			_Xlen();	// result too long

  0014c	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN138@assign:
  00151	cc		 int	 3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z
_TEXT	SEGMENT
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z PROC ; <lambda_03628ca18370b1f44a99b655e704819b>::operator(), COMDAT
; _this$dead$ = ecx

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  00006	56		 push	 esi
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00007	8b 75 08	 mov	 esi, DWORD PTR __New_ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2668 : 		return (_Reallocate_for(_Count, [](_Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr) {

  0000a	57		 push	 edi
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0000b	8d 3c 00	 lea	 edi, DWORD PTR [eax+eax]
  0000e	57		 push	 edi
  0000f	ff 75 10	 push	 DWORD PTR __Ptr$[ebp]
  00012	56		 push	 esi
  00013	e8 00 00 00 00	 call	 _memcpy
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0001b	33 c0		 xor	 eax, eax
  0001d	66 89 04 37	 mov	 WORD PTR [edi+esi], ax
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2671 : 			}, _Ptr));

  00023	5d		 pop	 ebp
  00024	c2 0c 00	 ret	 12			; 0000000cH
??R<lambda_03628ca18370b1f44a99b655e704819b>@@QBEXQA_WIQB_W@Z ENDP ; <lambda_03628ca18370b1f44a99b655e704819b>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXABV12@@Z
_TEXT	SEGMENT
__New_capacity$1$ = -4					; size = 4
__Right$ = 8						; size = 4
?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_lv_contents, COMDAT
; _this$ = ecx

; 2394 : 		{	// assign by copying data stored in _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0000c	83 7e 14 08	 cmp	 DWORD PTR [esi+20], 8

; 2395 : 			// pre: this != &_Right
; 2396 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2397 : 		auto& _My_data = this->_Get_data();
; 2398 : 		auto& _Right_data = _Right._Get_data();
; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  00010	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]

; 1815 : 		if (_Large_string_engaged())

  00013	72 02		 jb	 SHORT $LN13@Construct_
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00015	8b 36		 mov	 esi, DWORD PTR [esi]
$LN13@Construct_:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00017	83 fb 08	 cmp	 ebx, 8
  0001a	73 19		 jae	 SHORT $LN2@Construct_
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0001c	0f 10 06	 movups	 xmm0, XMMWORD PTR [esi]
  0001f	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2416 : 		}

  00022	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
  00025	c7 47 14 07 00
	00 00		 mov	 DWORD PTR [edi+20], 7
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
  0002e	5b		 pop	 ebx
  0002f	8b e5		 mov	 esp, ebp
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN2@Construct_:

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00035	8b c3		 mov	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00037	b9 fe ff ff 7f	 mov	 ecx, 2147483646		; 7ffffffeH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  0003c	83 c8 07	 or	 eax, 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0003f	3b c1		 cmp	 eax, ecx
  00041	0f 47 c1	 cmova	 eax, ecx
  00044	89 45 fc	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00047	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00048	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]

; 26   : 	if (_Max_possible < _Count)

  0004b	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00050	76 05		 jbe	 SHORT $LN46@Construct_

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00052	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00055	eb 08		 jmp	 SHORT $LN84@Construct_
$LN46@Construct_:
  00057	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0005d	72 29		 jb	 SHORT $LN49@Construct_
$LN84@Construct_:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0005f	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00062	83 ca ff	 or	 edx, -1
  00065	3b c1		 cmp	 eax, ecx
  00067	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0006a	50		 push	 eax
  0006b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00070	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00073	85 c0		 test	 eax, eax
  00075	74 0b		 je	 SHORT $LN58@Construct_

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00077	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0007a	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0007d	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00080	eb 19		 jmp	 SHORT $LN48@Construct_
$LN58@Construct_:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00082	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN49@Construct_:

; 188  : 	if (_Bytes != 0)

  00088	85 c9		 test	 ecx, ecx
  0008a	74 0d		 je	 SHORT $LN50@Construct_

; 52   : 		return (::operator new(_Bytes));

  0008c	51		 push	 ecx
  0008d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00092	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00095	8b c8		 mov	 ecx, eax
  00097	eb 02		 jmp	 SHORT $LN48@Construct_
$LN50@Construct_:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00099	33 c9		 xor	 ecx, ecx
$LN48@Construct_:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0009b	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000a2	89 0f		 mov	 DWORD PTR [edi], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000a4	50		 push	 eax
  000a5	56		 push	 esi
  000a6	51		 push	 ecx
  000a7	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2415 : 		_My_data._Myres = _New_capacity;

  000ac	8b 45 fc	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000af	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2416 : 		}

  000b2	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
  000b5	89 47 14	 mov	 DWORD PTR [edi+20], eax
  000b8	5f		 pop	 edi
  000b9	5e		 pop	 esi
  000ba	5b		 pop	 ebx
  000bb	8b e5		 mov	 esp, ebp
  000bd	5d		 pop	 ebp
  000be	c2 04 00	 ret	 4
$LN85@Construct_:
?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct_lv_contents
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2183 : 		{	// construct from [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 300  : 			return (__builtin_wcslen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]

; 359  : 		_Left = _Right;

  00006	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2183 : 		{	// construct from [_Ptr, <null>)

  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	57		 push	 edi

; 3976 : 		_My_data._Mysize = 0;

  0000c	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00013	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0001a	66 89 06	 mov	 WORD PTR [esi], ax

; 300  : 			return (__builtin_wcslen(_First));

  0001d	8b c2		 mov	 eax, edx
  0001f	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
$LL25@basic_stri:
  00022	66 8b 08	 mov	 cx, WORD PTR [eax]
  00025	83 c0 02	 add	 eax, 2
  00028	66 85 c9	 test	 cx, cx
  0002b	75 f5		 jne	 SHORT $LL25@basic_stri
  0002d	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0002f	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 300  : 			return (__builtin_wcslen(_First));

  00031	d1 f8		 sar	 eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00033	50		 push	 eax
  00034	52		 push	 edx
  00035	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2184 : 		_Tidy_init();
; 2185 : 		assign(_Ptr);
; 2186 : 		}

  0003a	5f		 pop	 edi
  0003b	8b c6		 mov	 eax, esi
  0003d	5e		 pop	 esi
  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$dead$ = 8					; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1804 : 		if (_Large_string_engaged())

  00004	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
  0000b	72 08		 jb	 SHORT $LN16@Eos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0000d	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0000f	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3971 : 		}

  00012	c2 04 00	 ret	 4
$LN16@Eos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00015	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3971 : 		}

  00018	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small, COMDAT
; _this$ = ecx

; 3954 : 		{	// release any held storage and return to small string mode

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 3955 : 			// pre: *this is in large string mode
; 3956 : 			// pre: this is small enough to return to small string mode
; 3957 : 		auto& _My_data = this->_Get_data();
; 3958 : 		_My_data._Orphan_all();
; 3959 : 		const pointer _Ptr = _My_data._Bx._Ptr;
; 3960 : 		auto& _Al = this->_Getal();
; 3961 : 		_Alty_traits::destroy(_Al, _STD addressof(_My_data._Bx._Ptr));
; 3962 : 		_Traits::copy(_My_data._Bx._Buf, _Unfancy(_Ptr), _My_data._Mysize + 1);

  00004	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00007	8b 37		 mov	 esi, DWORD PTR [edi]
  00009	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  0000a	50		 push	 eax
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3963 : 		_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00012	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  00015	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3963 : 		_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00018	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 12		 jb	 SHORT $LN35@Become_sma

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00021	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00024	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00027	2b f2		 sub	 esi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00029	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0002c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002f	77 16		 ja	 SHORT $LN32@Become_sma

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00031	8b f2		 mov	 esi, edx
$LN35@Become_sma:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00033	51		 push	 ecx
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3964 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0003d	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 3965 : 		}

  00046	c3		 ret	 0
$LN32@Become_sma:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN39@Become_sma:
  0004d	cc		 int	 3
?_Become_small@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Become_small
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::_WChar_traits<wchar_t>::copy, COMDAT
; __First1$ = ecx
; __First2$ = edx

; 313  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	03 c0		 add	 eax, eax
  00008	50		 push	 eax
  00009	52		 push	 edx
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _memcpy
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 316  : 		}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?copy@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::_WChar_traits<wchar_t>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\initializer_list
;	COMDAT ?end@?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ
_TEXT	SEGMENT
?end@?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ PROC ; std::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::end, COMDAT
; _this$ = ecx

; 47   : 		return (_Last);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 		}

  00003	c3		 ret	 0
?end@?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ENDP ; std::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\initializer_list
;	COMDAT ?begin@?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ
_TEXT	SEGMENT
?begin@?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ PROC ; std::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::begin, COMDAT
; _this$ = ecx

; 42   : 		return (_First);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		}

  00002	c3		 ret	 0
?begin@?$initializer_list@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ ENDP ; std::initializer_list<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Min, COMDAT
; __Pnode$ = ecx

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00006	75 0d		 jne	 SHORT $LN9@Min
$LL2@Min:
  00008	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  0000a	8b c2		 mov	 eax, edx
  0000c	8b d1		 mov	 edx, ecx
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	74 f4		 je	 SHORT $LL2@Min

; 489  : 		}

  00014	c3		 ret	 0
$LN9@Min:

; 488  : 		return (_Pnode);

  00015	8b c1		 mov	 eax, ecx

; 489  : 		}

  00017	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Freeheadnode, COMDAT
; _this$dead$ = ecx

; 946  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00006	6a 2c		 push	 44			; 0000002cH
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 948  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@PAUHKEY__@@@1@@Z
_TEXT	SEGMENT
__Parg$dead$ = 8					; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@PAUHKEY__@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from comparator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 468  : 		: _Myhead(),

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 792  : 		_Construct();
; 793  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@PAUHKEY__@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -16				; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1385 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b d9		 mov	 ebx, ecx

; 498  : 		return (_Myhead->_Left);

  00028	8b 33		 mov	 esi, DWORD PTR [ebx]

; 42   : 		: _Ptr(_Pnode)

  0002a	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 1385 : 		{	// erase [_First, _Last)

  0002d	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]

; 1386 : 		if (_First == begin() && _Last == end())

  00030	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00033	89 7d f0	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], edi

; 42   : 		: _Ptr(_Pnode)

  00036	3b 06		 cmp	 eax, DWORD PTR [esi]

; 1386 : 		if (_First == begin() && _Last == end())

  00038	75 33		 jne	 SHORT $LN267@erase

; 42   : 		: _Ptr(_Pnode)

  0003a	3b d6		 cmp	 edx, esi

; 1386 : 		if (_First == begin() && _Last == end())

  0003c	75 2f		 jne	 SHORT $LN267@erase

; 1408 : 		{	// erase all

  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 1409 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1410 : 		this->_Orphan_ptr(nullptr);
; 1411 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1412 : 
; 1413 : 		auto& _My_data = this->_Get_data();
; 1414 : 		auto _Head = _My_data._Myhead;
; 1415 : 		_Erase(_My_data._Root());

  00045	ff 76 04	 push	 DWORD PTR [esi+4]
  00048	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Erase

; 1416 : 		_My_data._Root() = _Head;

  0004d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0004f	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 498  : 		return (_Myhead->_Left);

  00052	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 1417 : 		_My_data._Lmost() = _Head;

  00054	89 31		 mov	 DWORD PTR [ecx], esi

; 1418 : 		_My_data._Rmost() = _Head;

  00056	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00058	89 71 08	 mov	 DWORD PTR [ecx+8], esi

; 1419 : 		_My_data._Mysize = 0;

  0005b	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 498  : 		return (_Myhead->_Left);

  00062	8b 0b		 mov	 ecx, DWORD PTR [ebx]

; 42   : 		: _Ptr(_Pnode)

  00064	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00066	89 0f		 mov	 DWORD PTR [edi], ecx

; 1387 : 			{	// erase all
; 1388 : 			clear();
; 1389 : 			return (begin());

  00068	e9 fd 00 00 00	 jmp	 $LN292@erase
$LN267@erase:

; 278  : 		return (this->_Ptr == _Right._Ptr);

  0006d	3b c2		 cmp	 eax, edx

; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// partial erase, one at a time
; 1393 : 			while (_First != _Last)

  0006f	0f 84 f3 00 00
	00		 je	 $LN287@erase
$LL2@erase:

; 59   : 		if (_Ptr->_Right->_Isnil)

  00075	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00078	8d 78 08	 lea	 edi, DWORD PTR [eax+8]

; 246  : 		_Tree_const_iterator _Tmp = *this;

  0007b	8b c8		 mov	 ecx, eax

; 59   : 		if (_Ptr->_Right->_Isnil)

  0007d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00081	74 25		 je	 SHORT $LN99@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00083	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00086	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0008a	75 17		 jne	 SHORT $LN98@erase
  0008c	0f 1f 40 00	 npad	 4
$LL97@erase:
  00090	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00093	75 0e		 jne	 SHORT $LN98@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00095	8b c2		 mov	 eax, edx
  00097	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  0009a	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0009d	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000a1	74 ed		 je	 SHORT $LL97@erase
$LN98@erase:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  000a3	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx

; 68   : 			}
; 69   : 		else

  000a6	eb 17		 jmp	 SHORT $LN100@erase
$LN99@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000a8	8b 16		 mov	 edx, DWORD PTR [esi]
  000aa	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000ae	75 0c		 jne	 SHORT $LN104@erase
$LL103@erase:
  000b0	8b 02		 mov	 eax, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  000b2	8b f2		 mov	 esi, edx
  000b4	8b d0		 mov	 edx, eax
  000b6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ba	74 f4		 je	 SHORT $LL103@erase
$LN104@erase:

; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

  000bc	89 75 0c	 mov	 DWORD PTR __First$[ebp], esi
$LN100@erase:

; 59   : 		if (_Ptr->_Right->_Isnil)

  000bf	8b 17		 mov	 edx, DWORD PTR [edi]

; 1369 : 		const_iterator _Successor = _Where;

  000c1	8b c1		 mov	 eax, ecx

; 59   : 		if (_Ptr->_Right->_Isnil)

  000c3	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000c7	74 1b		 je	 SHORT $LN121@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  000c9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000cc	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000d0	75 28		 jne	 SHORT $LN126@erase
$LL119@erase:
  000d2	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000d5	75 23		 jne	 SHORT $LN126@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  000d7	8b c2		 mov	 eax, edx
  000d9	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000dc	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000e0	74 f0		 je	 SHORT $LL119@erase

; 68   : 			}
; 69   : 		else

  000e2	eb 16		 jmp	 SHORT $LN126@erase
$LN121@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000e4	8b 12		 mov	 edx, DWORD PTR [edx]
  000e6	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000ea	75 0e		 jne	 SHORT $LN126@erase
  000ec	0f 1f 40 00	 npad	 4
$LL125@erase:
  000f0	8b 02		 mov	 eax, DWORD PTR [edx]
  000f2	8b d0		 mov	 edx, eax
  000f4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f8	74 f6		 je	 SHORT $LL125@erase
$LN126@erase:

; 1371 : 		_Nodeptr _Erasednode = _My_data._Extract(_Where);	// node to erase

  000fa	51		 push	 ecx
  000fb	8b cb		 mov	 ecx, ebx
  000fd	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Extract
  00102	8b f0		 mov	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00104	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  00107	83 f9 08	 cmp	 ecx, 8

; 3987 : 		if (_My_data._Large_string_engaged())

  0010a	72 2e		 jb	 SHORT $LN187@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0010c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0010f	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00116	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0011c	72 12		 jb	 SHORT $LN186@erase

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0011e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00121	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00124	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00126	83 c0 fc	 add	 eax, -4			; fffffffcH
  00129	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0012c	77 52		 ja	 SHORT $LN183@erase

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0012e	8b c2		 mov	 eax, edx
$LN186@erase:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00130	51		 push	 ecx
  00131	50		 push	 eax
  00132	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00137	83 c4 08	 add	 esp, 8
$LN187@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0013a	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0013c	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00143	6a 2c		 push	 44			; 0000002cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00145	c7 46 28 07 00
	00 00		 mov	 DWORD PTR [esi+40], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0014c	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0014d	66 89 46 14	 mov	 WORD PTR [esi+20], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00151	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 278  : 		return (this->_Ptr == _Right._Ptr);

  00156	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00159	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 278  : 		return (this->_Ptr == _Right._Ptr);

  0015c	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// partial erase, one at a time
; 1393 : 			while (_First != _Last)

  0015f	0f 85 10 ff ff
	ff		 jne	 $LL2@erase
  00165	8b 7d f0	 mov	 edi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
$LN287@erase:

; 42   : 		: _Ptr(_Pnode)

  00168	89 07		 mov	 DWORD PTR [edi], eax
$LN292@erase:

; 1397 : 		}

  0016a	8b c7		 mov	 eax, edi
  0016c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0016f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00176	59		 pop	 ecx
  00177	5f		 pop	 edi
  00178	5e		 pop	 esi
  00179	5b		 pop	 ebx
  0017a	8b e5		 mov	 esp, ebp
  0017c	5d		 pop	 ebp
  0017d	c2 0c 00	 ret	 12			; 0000000cH
$LN183@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN291@erase:
  00186	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::end, COMDAT
; _this$ = ecx

; 1197 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1198 : 		auto& _My_data = this->_Get_data();
; 1199 : 		return (iterator(_My_data._Myhead, _STD addressof(_My_data)));
; 1200 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::begin, COMDAT
; _this$ = ecx

; 1185 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		return (_Myhead->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 42   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1186 : 		auto& _My_data = this->_Get_data();
; 1187 : 		return (iterator(_My_data._Lmost(), _STD addressof(_My_data)));
; 1188 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$allocator@E@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$allocator@E@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$allocator@E@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	83 c8 ff	 or	 eax, -1

; 893  : 		}

  00003	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myend, COMDAT
; _this$ = ecx

; 601  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 602  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myend, COMDAT
; _this$ = ecx

; 596  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 597  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAPAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast, COMDAT
; _this$ = ecx

; 591  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 592  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst, COMDAT
; _this$ = ecx

; 581  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 582  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABQAEXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data, COMDAT
; _this$ = ecx

; 555  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 556  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$allocator@E@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$allocator@E@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal, COMDAT
; _this$ = ecx

; 550  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 551  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$allocator@E@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend, COMDAT
; _this$ = ecx

; 596  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 597  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 555  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 556  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal, COMDAT
; _this$ = ecx

; 545  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 546  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 535  : 		_Get_data()._Orphan_all();
; 536  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	51		 push	 ecx
  00007	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000f	83 c4 04	 add	 esp, 4

; 1850 : 		}

  00012	5d		 pop	 ebp
  00013	c2 08 00	 ret	 8
?_Destroy@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity, COMDAT
; _this$ = ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1716 : 		}

  00016	c3		 ret	 0
?capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0000c	c1 e2 03	 shl	 edx, 3

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00015	72 14		 jb	 SHORT $LN15@deallocate

; 115  : 	_Bytes += _Non_user_size;

  00017	56		 push	 esi

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00018	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0001b	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b ce		 sub	 ecx, esi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 11		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00028	8b ce		 mov	 ecx, esi
  0002a	5e		 pop	 esi
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8

; 993  : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003f	cc		 int	 3
?deallocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1896 : 		this->_Orphan_all();
; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

  00006	8b 06		 mov	 eax, DWORD PTR [esi]
  00008	85 c0		 test	 eax, eax
  0000a	74 29		 je	 SHORT $LN79@Change_arr

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0000c	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000f	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00011	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN78@Change_arr

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 26		 ja	 SHORT $LN75@Change_arr

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b c1		 mov	 eax, ecx
$LN78@Change_arr:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
$LN79@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1904 : 		this->_Myfirst() = _Newvec;

  00035	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  00038	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0003b	03 c1		 add	 eax, ecx
  0003d	89 0e		 mov	 DWORD PTR [esi], ecx
  0003f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  00042	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00045	03 c1		 add	 eax, ecx
  00047	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0004a	5e		 pop	 esi

; 1907 : 		}

  0004b	5d		 pop	 ebp
  0004c	c2 0c 00	 ret	 12			; 0000000cH
$LN75@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN100@Change_arr:
  00055	cc		 int	 3
?_Change_array@?$vector@EV?$allocator@E@std@@@std@@AAEXQAEII@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE00@Z
_TEXT	SEGMENT
$T7 = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE00@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00013	56		 push	 esi
  00014	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  00017	57		 push	 edi
  00018	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  0001b	51		 push	 ecx
  0001c	8d 4d fb	 lea	 ecx, DWORD PTR $T7[ebp]
  0001f	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z ; std::_Ptr_move_cat<unsigned char,unsigned char>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00024	2b d7		 sub	 edx, edi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00026	52		 push	 edx
  00027	57		 push	 edi
  00028	56		 push	 esi
  00029	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1845 : 		}

  0002e	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00031	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1845 : 		}

  00034	33 cd		 xor	 ecx, ebp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1845 : 		}

  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE00@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::size, COMDAT
; _this$ = ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]

; 1705 : 		}

  00005	c3		 ret	 0
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@E@std@@QAEPAEI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@E@std@@QAEPAEI@Z PROC		; std::allocator<unsigned char>::allocate, COMDAT
; _this$dead$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000c	72 2d		 jb	 SHORT $LN6@allocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0000e	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00011	83 ca ff	 or	 edx, -1
  00014	3b c1		 cmp	 eax, ecx
  00016	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0001f	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00021	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00024	85 c9		 test	 ecx, ecx
  00026	74 0d		 je	 SHORT $LN15@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00028	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0002b	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0002e	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN15@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN6@allocate:

; 188  : 	if (_Bytes != 0)

  0003b	85 c9		 test	 ecx, ecx
  0003d	74 0d		 je	 SHORT $LN7@allocate

; 52   : 		return (::operator new(_Bytes));

  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00045	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN7@allocate:

; 193  : 	return (nullptr);

  0004c	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0004e	5d		 pop	 ebp
  0004f	c2 04 00	 ret	 4
$LN26@allocate:
?allocate@?$allocator@E@std@@QAEPAEI@Z ENDP		; std::allocator<unsigned char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXQAEI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@E@std@@QAEXQAEI@Z PROC		; std::allocator<unsigned char>::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00009	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0000f	72 12		 jb	 SHORT $LN15@deallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00011	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00014	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00017	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00019	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0001f	77 10		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00021	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00023	51		 push	 ecx
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002a	83 c4 08	 add	 esp, 8

; 993  : 		}

  0002d	5d		 pop	 ebp
  0002e	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00037	cc		 int	 3
?deallocate@?$allocator@E@std@@QAEXQAEI@Z ENDP		; std::allocator<unsigned char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8
  00004	0f 93 c0	 setae	 al

; 1826 : 		}

  00007	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 08	 cmp	 DWORD PTR [ecx+20], 8

; 1803 : 		value_type * _Result = _Bx._Buf;
; 1804 : 		if (_Large_string_engaged())

  00004	72 03		 jb	 SHORT $LN8@Myptr

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);
; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1810 : 		}

  00008	c3		 ret	 0
$LN8@Myptr:

; 1805 : 			{
; 1806 : 			_Result = _Unfancy(_Bx._Ptr);
; 1807 : 			}
; 1808 : 
; 1809 : 		return (_Result);

  00009	8b c1		 mov	 eax, ecx

; 1810 : 		}

  0000b	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 2043 : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 2044 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$allocator@_W@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 2033 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 2034 : 		}

  00002	c3		 ret	 0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$allocator@_W@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 2023 : 		_Get_data()._Orphan_all();
; 2024 : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$dead$ = ecx

; 3307 : 		const size_type _Alloc_max = _Alty_traits::max_size(this->_Getal());
; 3308 : 		const size_type _Storage_max = // can always store small string
; 3309 : 			_Max_value(_Alloc_max, static_cast<size_type>(this->_BUF_SIZE));
; 3310 : 		return (_Min_value(

  00000	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH

; 3311 : 			static_cast<size_type>((numeric_limits<difference_type>::max)()),
; 3312 : 			_Storage_max - 1 // -1 is for null terminator and/or npos
; 3313 : 			));
; 3314 : 
; 3315 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2675 : 		{	// assign [_Ptr, <null>)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 300  : 			return (__builtin_wcslen(_First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  00006	8b c2		 mov	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2675 : 		{	// assign [_Ptr, <null>)

  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 300  : 			return (__builtin_wcslen(_First));

  0000c	8d 78 02	 lea	 edi, DWORD PTR [eax+2]
  0000f	90		 npad	 1
$LL7@assign:
  00010	66 8b 08	 mov	 cx, WORD PTR [eax]
  00013	83 c0 02	 add	 eax, 2
  00016	66 85 c9	 test	 cx, cx
  00019	75 f5		 jne	 SHORT $LL7@assign
  0001b	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0001d	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 300  : 			return (__builtin_wcslen(_First));

  0001f	d1 f8		 sar	 eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00021	50		 push	 eax
  00022	52		 push	 edx
  00023	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 2677 : 		}

  0002a	5d		 pop	 ebp
  0002b	c2 04 00	 ret	 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$dead$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]

; 26   : 	if (_Max_possible < _Count)

  00009	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0000e	76 05		 jbe	 SHORT $LN4@allocate

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00010	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00013	eb 08		 jmp	 SHORT $LN27@allocate
$LN4@allocate:
  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 2d		 jb	 SHORT $LN7@allocate
$LN27@allocate:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0001d	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00020	83 ca ff	 or	 edx, -1
  00023	3b c1		 cmp	 eax, ecx
  00025	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0002e	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00030	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00033	85 c9		 test	 ecx, ecx
  00035	74 0d		 je	 SHORT $LN16@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00037	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003a	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0003d	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00040	5d		 pop	 ebp
  00041	c2 04 00	 ret	 4
$LN16@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00044	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@allocate:

; 188  : 	if (_Bytes != 0)

  0004a	85 c9		 test	 ecx, ecx
  0004c	74 0d		 je	 SHORT $LN8@allocate

; 52   : 		return (::operator new(_Bytes));

  0004e	51		 push	 ecx
  0004f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00054	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
$LN8@allocate:

; 193  : 	return (nullptr);

  0005b	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN28@allocate:
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8d 14 00	 lea	 edx, DWORD PTR [eax+eax]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00012	72 14		 jb	 SHORT $LN15@deallocate

; 115  : 	_Bytes += _Non_user_size;

  00014	56		 push	 esi

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00015	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  00018	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001b	2b ce		 sub	 ecx, esi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001d	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00020	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00023	77 11		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00025	8b ce		 mov	 ecx, esi
  00027	5e		 pop	 esi
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00028	52		 push	 edx
  00029	51		 push	 ecx
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8

; 993  : 		}

  00032	5d		 pop	 ebp
  00033	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003c	cc		 int	 3
?deallocate@?$allocator@_W@std@@QAEXQA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::_WChar_traits<wchar_t>::assign, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 359  : 		_Left = _Right;

  00000	66 8b 02	 mov	 ax, WORD PTR [edx]
  00003	66 89 01	 mov	 WORD PTR [ecx], ax

; 360  : 		}

  00006	c3		 ret	 0
?assign@?$_WChar_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::_WChar_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::_WChar_traits<wchar_t>::move, COMDAT
; __First1$ = ecx
; __First2$ = edx

; 346  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 246  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	03 c0		 add	 eax, eax
  00008	50		 push	 eax
  00009	52		 push	 edx
  0000a	51		 push	 ecx
  0000b	e8 00 00 00 00	 call	 _memmove
  00010	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 349  : 		}

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
?move@?$_WChar_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::_WChar_traits<wchar_t>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator!=, COMDAT
; _this$ = ecx

; 282  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  : 		return (!(*this == _Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 284  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator==, COMDAT
; _this$ = ecx

; 273  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 275  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 277  : 
; 278  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 279  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator++, COMDAT
; _this$ = ecx

; 245  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 246  : 		_Tree_const_iterator _Tmp = *this;

  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 07		 mov	 DWORD PTR [edi], eax

; 59   : 		if (_Ptr->_Right->_Isnil)

  0000e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00011	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00015	74 25		 je	 SHORT $LN10@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0001e	75 30		 jne	 SHORT $LN15@operator
$LL8@operator:
  00020	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00023	75 2b		 jne	 SHORT $LN15@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00025	89 16		 mov	 DWORD PTR [esi], edx
  00027	8b c2		 mov	 eax, edx
  00029	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0002c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00030	74 ee		 je	 SHORT $LL8@operator

; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}

  00032	8b c7		 mov	 eax, edi
  00034	89 16		 mov	 DWORD PTR [esi], edx
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN10@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0003c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00042	75 0c		 jne	 SHORT $LN15@operator
$LL14@operator:
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00046	8b d1		 mov	 edx, ecx
  00048	8b c8		 mov	 ecx, eax
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f4		 je	 SHORT $LL14@operator
$LN15@operator:

; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}

  00050	8b c7		 mov	 eax, edi
  00052	89 16		 mov	 DWORD PTR [esi], edx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 328  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1005 : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1006 : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Construct, COMDAT
; _this$ = ecx

; 807  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 809  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::clear, COMDAT
; _this$ = ecx

; 1408 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f9		 mov	 edi, ecx

; 1409 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1410 : 		this->_Orphan_ptr(nullptr);
; 1411 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1412 : 
; 1413 : 		auto& _My_data = this->_Get_data();
; 1414 : 		auto _Head = _My_data._Myhead;

  00026	8b 37		 mov	 esi, DWORD PTR [edi]

; 1415 : 		_Erase(_My_data._Root());

  00028	ff 76 04	 push	 DWORD PTR [esi+4]
  0002b	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Erase

; 1416 : 		_My_data._Root() = _Head;

  00030	8b 07		 mov	 eax, DWORD PTR [edi]
  00032	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 498  : 		return (_Myhead->_Left);

  00035	8b 07		 mov	 eax, DWORD PTR [edi]

; 1417 : 		_My_data._Lmost() = _Head;

  00037	89 30		 mov	 DWORD PTR [eax], esi

; 1418 : 		_My_data._Rmost() = _Head;

  00039	8b 07		 mov	 eax, DWORD PTR [edi]
  0003b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 1419 : 		_My_data._Mysize = 0;

  0003e	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1420 : 		}

  00045	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00048	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0004f	59		 pop	 ecx
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1362 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1363 : 		auto& _My_data = this->_Get_data();
; 1364 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1365 : 		_STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data)
; 1366 : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 1367 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1368 : 
; 1369 : 		const_iterator _Successor = _Where;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0000e	8b c1		 mov	 eax, ecx

; 59   : 		if (_Ptr->_Right->_Isnil)

  00010	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00013	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00017	74 1b		 je	 SHORT $LN16@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00019	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0001c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00020	75 2a		 jne	 SHORT $LN21@erase
$LL14@erase:
  00022	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00025	75 25		 jne	 SHORT $LN21@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00027	8b c6		 mov	 eax, esi
  00029	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0002c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00030	74 f0		 je	 SHORT $LL14@erase

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

  00032	eb 18		 jmp	 SHORT $LN21@erase
$LN16@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00034	8b 16		 mov	 edx, DWORD PTR [esi]
  00036	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0003a	75 10		 jne	 SHORT $LN21@erase
  0003c	0f 1f 40 00	 npad	 4
$LL20@erase:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f2		 mov	 esi, edx
  00044	8b d0		 mov	 edx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL20@erase
$LN21@erase:

; 1370 : 		++_Successor;	// save successor iterator for return
; 1371 : 		_Nodeptr _Erasednode = _My_data._Extract(_Where);	// node to erase

  0004c	51		 push	 ecx
  0004d	8b cf		 mov	 ecx, edi
  0004f	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Extract
  00054	8b f8		 mov	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00056	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00059	83 f9 08	 cmp	 ecx, 8

; 3987 : 		if (_My_data._Large_string_engaged())

  0005c	72 2e		 jb	 SHORT $LN82@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005e	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00061	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00068	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0006e	72 12		 jb	 SHORT $LN81@erase

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00070	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00073	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00076	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00078	83 c0 fc	 add	 eax, -4			; fffffffcH
  0007b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0007e	77 36		 ja	 SHORT $LN78@erase

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00080	8b c2		 mov	 eax, edx
$LN81@erase:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00082	51		 push	 ecx
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00089	83 c4 08	 add	 esp, 8
$LN82@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0008c	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0008e	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00095	6a 2c		 push	 44			; 0000002cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00097	c7 47 28 07 00
	00 00		 mov	 DWORD PTR [edi+40], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0009e	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0009f	66 89 47 14	 mov	 WORD PTR [edi+20], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  000a3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000a8	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  000ab	89 33		 mov	 DWORD PTR [ebx], esi

; 1372 : 
; 1373 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1374 : 		_Orphan_ptr(_Erasednode);
; 1375 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1376 : 
; 1377 : 		_Alnode& _Al = this->_Getal();
; 1378 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Erasednode->_Myval));	// delete erased node
; 1379 : 		_Node::_Freenode0(_Al, _Erasednode);
; 1380 : 
; 1381 : 		return (iterator(_Successor._Ptr, _STD addressof(_My_data)));	// return successor iterator

  000ad	8b c3		 mov	 eax, ebx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx

; 1382 : 		}

  000b2	5d		 pop	 ebp
  000b3	c2 08 00	 ret	 8
$LN78@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN154@erase:
  000bc	cc		 int	 3
?erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$allocator@E@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$allocator@E@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$allocator@E@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data, COMDAT
; _this$ = ecx

; 560  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 561  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned char,std::allocator<unsigned char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend, COMDAT
; _this$ = ecx

; 601  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 602  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst, COMDAT
; _this$ = ecx

; 581  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 582  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
$T6 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  0000f	51		 push	 ecx
  00010	8d 4d ff	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z ; std::_Ptr_move_cat<unsigned char,unsigned char>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	2b d7		 sub	 edx, edi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0001a	52		 push	 edx
  0001b	57		 push	 edi
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 10	 add	 esp, 16			; 00000010H
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1834 : 		}

  00027	8b e5		 mov	 esp, ebp
  00029	5d		 pop	 ebp
  0002a	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@EV?$allocator@E@std@@@std@@AAEXPAE00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$allocator@_W@2@XZ ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 893  : 		}

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?length@?$_WChar_traits@_W@std@@SAIPB_W@Z
_TEXT	SEGMENT
?length@?$_WChar_traits@_W@std@@SAIPB_W@Z PROC		; std::_WChar_traits<wchar_t>::length, COMDAT
; __First$ = ecx

; 297  : #if _HAS_CXX17
; 298  : 		if constexpr (is_same_v<_Elem, wchar_t>)
; 299  : 			{
; 300  : 			return (__builtin_wcslen(_First));

  00000	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
$LL3@length:
  00003	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00006	83 c1 02	 add	 ecx, 2
  00009	66 85 c0	 test	 ax, ax
  0000c	75 f5		 jne	 SHORT $LL3@length
  0000e	2b ca		 sub	 ecx, edx
  00010	d1 f9		 sar	 ecx, 1
  00012	8b c1		 mov	 eax, ecx

; 301  : 			}
; 302  : 		else
; 303  : 			{
; 304  : 			return (_Char_traits<_Elem, unsigned short>::length(_First));
; 305  : 			}
; 306  : #else /* _HAS_CXX17 */
; 307  : 		return (_CSTD wcslen(reinterpret_cast<const wchar_t *>(_First)));
; 308  : #endif /* _HAS_CXX17 */
; 309  : 		}

  00014	c3		 ret	 0
?length@?$_WChar_traits@_W@std@@SAIPB_W@Z ENDP		; std::_WChar_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c2 04 00	 ret	 4
?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator++, COMDAT
; _this$ = ecx

; 234  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN6@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL4@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL4@operator
$LN21@operator:

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 242  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN6@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN11@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL10@operator
$LN11@operator:

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 242  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Erasednode$1$ = -8					; size = 4
_this$GSCopy$1$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Extract, COMDAT
; _this$ = ecx

; 562  : 		{	// extract node at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 563  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 564  : 		_STL_VERIFY(_Where._Getcont() == this
; 565  : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 566  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 567  : 
; 568  : 		_Nodeptr _Erasednode = _Where._Ptr;	// node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	8b d0		 mov	 edx, eax
  0000b	53		 push	 ebx

; 59   : 		if (_Ptr->_Right->_Isnil)

  0000c	8d 58 08	 lea	 ebx, DWORD PTR [eax+8]

; 562  : 		{	// extract node at _Where

  0000f	89 4d fc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00012	56		 push	 esi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00013	8b 33		 mov	 esi, DWORD PTR [ebx]

; 563  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 564  : 		_STL_VERIFY(_Where._Getcont() == this
; 565  : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 566  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 567  : 
; 568  : 		_Nodeptr _Erasednode = _Where._Ptr;	// node to erase

  00015	89 55 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], edx

; 59   : 		if (_Ptr->_Right->_Isnil)

  00018	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0001c	74 1e		 je	 SHORT $LN51@Extract

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0001e	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00021	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00025	75 2c		 jne	 SHORT $LN165@Extract
$LL49@Extract:
  00027	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0002a	75 27		 jne	 SHORT $LN165@Extract

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0002c	8b c6		 mov	 eax, esi
  0002e	89 45 08	 mov	 DWORD PTR __Where$[ebp], eax
  00031	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00034	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00038	74 ed		 je	 SHORT $LL49@Extract

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

  0003a	eb 17		 jmp	 SHORT $LN165@Extract
$LN51@Extract:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0003c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00042	75 0c		 jne	 SHORT $LN56@Extract
$LL55@Extract:
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00046	8b f1		 mov	 esi, ecx
  00048	8b c8		 mov	 ecx, eax
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f4		 je	 SHORT $LL55@Extract
$LN56@Extract:
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN165@Extract:

; 569  : 		++_Where;	// save successor iterator for return
; 570  : 
; 571  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 572  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 573  : 		_Nodeptr _Pnode = _Erasednode;
; 574  : 
; 575  : 		if (_Pnode->_Left->_Isnil)

  00053	89 75 08	 mov	 DWORD PTR __Where$[ebp], esi
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	57		 push	 edi
  00059	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0005b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005f	75 15		 jne	 SHORT $LN158@Extract

; 576  : 			{
; 577  : 			_Fixnode = _Pnode->_Right;	// stitch up right subtree
; 578  : 			}
; 579  : 		else if (_Pnode->_Right->_Isnil)

  00061	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00065	74 04		 je	 SHORT $LN7@Extract

; 580  : 			{
; 581  : 			_Fixnode = _Pnode->_Left;	// stitch up left subtree

  00067	8b f8		 mov	 edi, eax

; 582  : 			}
; 583  : 		else

  00069	eb 0b		 jmp	 SHORT $LN158@Extract
$LN7@Extract:

; 584  : 			{	// two subtrees, must lift successor node to replace erased
; 585  : 			_Pnode = _Where._Ptr;	// _Pnode is successor node
; 586  : 			_Fixnode = _Pnode->_Right;	// _Fixnode is only subtree

  0006b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 587  : 			}
; 588  : 
; 589  : 		if (_Pnode == _Erasednode)

  0006e	3b f2		 cmp	 esi, edx
  00070	0f 85 8a 00 00
	00		 jne	 $LN9@Extract
$LN158@Extract:

; 590  : 			{	// at most one subtree, relink it
; 591  : 			_Fixnodeparent = _Erasednode->_Parent;
; 592  : 			if (!_Fixnode->_Isnil)

  00076	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0007a	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0007d	75 03		 jne	 SHORT $LN11@Extract

; 593  : 				_Fixnode->_Parent = _Fixnodeparent;	// link up

  0007f	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN11@Extract:

; 493  : 		return (_Myhead->_Parent);

  00082	8b 01		 mov	 eax, DWORD PTR [ecx]

; 594  : 
; 595  : 			if (_Root() == _Erasednode)

  00084	8b 75 f8	 mov	 esi, DWORD PTR __Erasednode$1$[ebp]
  00087	39 70 04	 cmp	 DWORD PTR [eax+4], esi
  0008a	75 05		 jne	 SHORT $LN12@Extract

; 596  : 				{
; 597  : 				_Root() = _Fixnode;	// link down from root

  0008c	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0008f	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 598  : 				}
; 599  : 			else if (_Fixnodeparent->_Left == _Erasednode)

  00091	39 32		 cmp	 DWORD PTR [edx], esi
  00093	75 04		 jne	 SHORT $LN14@Extract

; 600  : 				{
; 601  : 				_Fixnodeparent->_Left = _Fixnode;	// link down to left

  00095	89 3a		 mov	 DWORD PTR [edx], edi

; 602  : 				}
; 603  : 			else

  00097	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 604  : 				{
; 605  : 				_Fixnodeparent->_Right = _Fixnode;	// link down to right

  00099	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN15@Extract:

; 498  : 		return (_Myhead->_Left);

  0009c	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 606  : 				}
; 607  : 
; 608  : 			if (_Lmost() == _Erasednode)

  0009e	39 33		 cmp	 DWORD PTR [ebx], esi
  000a0	75 25		 jne	 SHORT $LN16@Extract

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  000a2	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000a6	74 04		 je	 SHORT $LN42@Extract
  000a8	8b f2		 mov	 esi, edx
  000aa	eb 19		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000ac	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  000ae	8b f7		 mov	 esi, edi

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000b0	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000b4	75 0c		 jne	 SHORT $LN66@Extract
$LL65@Extract:
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  000b8	8b f1		 mov	 esi, ecx
  000ba	8b c8		 mov	 ecx, eax
  000bc	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c0	74 f4		 je	 SHORT $LL65@Extract
$LN66@Extract:
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN43@Extract:

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  000c5	89 33		 mov	 DWORD PTR [ebx], esi
$LN16@Extract:

; 503  : 		return (_Myhead->_Right);

  000c7	8b 31		 mov	 esi, DWORD PTR [ecx]

; 611  : 					? _Fixnodeparent	// smallest is parent of erased node
; 612  : 					: _Min(_Fixnode);	// smallest in relinked subtree
; 613  : 				}
; 614  : 
; 615  : 			if (_Rmost() == _Erasednode)

  000c9	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
  000cc	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  000cf	0f 85 84 00 00
	00		 jne	 $LN83@Extract

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  000d5	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000d9	74 07		 je	 SHORT $LN44@Extract
  000db	8b ca		 mov	 ecx, edx
  000dd	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 618  : 					? _Fixnodeparent	// largest is parent of erased node
; 619  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 620  : 				}
; 621  : 			}
; 622  : 		else

  000e0	eb 74		 jmp	 SHORT $LN169@Extract
$LN44@Extract:

; 479  : 		while (!_Pnode->_Right->_Isnil)

  000e2	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  000e5	8b cf		 mov	 ecx, edi

; 479  : 		while (!_Pnode->_Right->_Isnil)

  000e7	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000eb	75 0e		 jne	 SHORT $LN74@Extract
  000ed	0f 1f 00	 npad	 3
$LL73@Extract:

; 480  : 			_Pnode = _Pnode->_Right;

  000f0	8b c8		 mov	 ecx, eax
  000f2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f9	74 f5		 je	 SHORT $LL73@Extract
$LN74@Extract:

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  000fb	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 618  : 					? _Fixnodeparent	// largest is parent of erased node
; 619  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 620  : 				}
; 621  : 			}
; 622  : 		else

  000fe	eb 56		 jmp	 SHORT $LN169@Extract
$LN9@Extract:

; 623  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 624  : 			_Erasednode->_Left->_Parent = _Pnode;	// link left up

  00100	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 625  : 			_Pnode->_Left = _Erasednode->_Left;	// link successor down

  00103	8b 02		 mov	 eax, DWORD PTR [edx]
  00105	89 06		 mov	 DWORD PTR [esi], eax

; 626  : 
; 627  : 			if (_Pnode == _Erasednode->_Right)

  00107	3b 33		 cmp	 esi, DWORD PTR [ebx]
  00109	75 04		 jne	 SHORT $LN18@Extract

; 628  : 				{
; 629  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  0010b	8b d6		 mov	 edx, esi

; 630  : 				}
; 631  : 			else

  0010d	eb 18		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 632  : 				{	// successor further down, link in place of erased
; 633  : 				_Fixnodeparent = _Pnode->_Parent;	// parent is successor's
; 634  : 				if (!_Fixnode->_Isnil)

  0010f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00113	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00116	75 03		 jne	 SHORT $LN20@Extract

; 635  : 					{
; 636  : 					_Fixnode->_Parent = _Fixnodeparent;	// link fix up

  00118	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN20@Extract:

; 637  : 					}
; 638  : 
; 639  : 				_Fixnodeparent->_Left = _Fixnode;	// link fix down

  0011b	89 3a		 mov	 DWORD PTR [edx], edi

; 640  : 				_Pnode->_Right = _Erasednode->_Right;	// link next down

  0011d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0011f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 641  : 				_Erasednode->_Right->_Parent = _Pnode;	// right up

  00122	8b 03		 mov	 eax, DWORD PTR [ebx]
  00124	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN19@Extract:

; 493  : 		return (_Myhead->_Parent);

  00127	8b 01		 mov	 eax, DWORD PTR [ecx]

; 642  : 				}
; 643  : 
; 644  : 			if (_Root() == _Erasednode)

  00129	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
  0012c	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0012f	75 05		 jne	 SHORT $LN21@Extract

; 645  : 				{
; 646  : 				_Root() = _Pnode;	// link down from root

  00131	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00134	eb 0e		 jmp	 SHORT $LN24@Extract
$LN21@Extract:

; 647  : 				}
; 648  : 			else if (_Erasednode->_Parent->_Left == _Erasednode)

  00136	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00139	39 18		 cmp	 DWORD PTR [eax], ebx
  0013b	75 04		 jne	 SHORT $LN23@Extract

; 649  : 				{
; 650  : 				_Erasednode->_Parent->_Left = _Pnode;	// link down to left

  0013d	89 30		 mov	 DWORD PTR [eax], esi

; 651  : 				}
; 652  : 			else

  0013f	eb 03		 jmp	 SHORT $LN24@Extract
$LN23@Extract:

; 653  : 				{
; 654  : 				_Erasednode->_Parent->_Right = _Pnode;	// link down to right

  00141	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN24@Extract:

; 655  : 				}
; 656  : 
; 657  : 			_Pnode->_Parent = _Erasednode->_Parent;	// link successor up

  00144	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00147	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 68   : 	_Left = _STD move(_Right);

  0014a	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  0014d	8a 4e 0c	 mov	 cl, BYTE PTR [esi+12]
  00150	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 69   : 	_Right = _STD move(_Tmp);

  00153	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl
$LN169@Extract:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 661  : 		if (_Erasednode->_Color == this->_Black)

  00156	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN83@Extract:
  00159	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  0015d	0f 85 68 01 00
	00		 jne	 $LN25@Extract

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()
; 664  : 				&& _Fixnode->_Color == this->_Black;

  00163	8b 01		 mov	 eax, DWORD PTR [ecx]
  00165	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00168	0f 84 59 01 00
	00		 je	 $LN3@Extract
  0016e	66 90		 npad	 2
$LL4@Extract:
  00170	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00174	8b da		 mov	 ebx, edx
  00176	0f 85 48 01 00
	00		 jne	 $LN168@Extract

; 666  : 				if (_Fixnode == _Fixnodeparent->_Left)

  0017c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0017e	3b f9		 cmp	 edi, ecx
  00180	0f 85 bb 00 00
	00		 jne	 $LN26@Extract

; 667  : 					{	// fixup left subtree
; 668  : 					_Pnode = _Fixnodeparent->_Right;

  00186	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 669  : 					if (_Pnode->_Color == this->_Red)

  00189	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0018d	75 46		 jne	 SHORT $LN159@Extract

; 670  : 						{	// rotate red up from right subtree
; 671  : 						_Pnode->_Color = this->_Black;

  0018f	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  00193	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 672  : 						_Fixnodeparent->_Color = this->_Red;

  00196	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0019a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0019c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  0019f	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001a5	75 03		 jne	 SHORT $LN93@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  001a7	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN93@Extract:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  001aa	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001ad	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  001b0	8b 45 fc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001b3	8b 00		 mov	 eax, DWORD PTR [eax]
  001b5	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  001b8	75 05		 jne	 SHORT $LN94@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  001ba	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  001bd	eb 0e		 jmp	 SHORT $LN97@Extract
$LN94@Extract:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  001bf	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c2	3b 10		 cmp	 edx, DWORD PTR [eax]
  001c4	75 04		 jne	 SHORT $LN96@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  001c6	89 08		 mov	 DWORD PTR [eax], ecx

; 525  : 			}
; 526  : 		else

  001c8	eb 03		 jmp	 SHORT $LN97@Extract
$LN96@Extract:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  001ca	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN97@Extract:

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  001cd	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  001cf	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 673  : 						_Lrotate(_Fixnodeparent);
; 674  : 						_Pnode = _Fixnodeparent->_Right;

  001d2	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
$LN159@Extract:

; 675  : 						}
; 676  : 
; 677  : 					if (_Pnode->_Isnil)

  001d5	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d9	0f 85 d2 00 00
	00		 jne	 $LN2@Extract

; 678  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 679  : 					else if (_Pnode->_Left->_Color == this->_Black
; 680  : 						&& _Pnode->_Right->_Color == this->_Black)

  001df	8b 31		 mov	 esi, DWORD PTR [ecx]
  001e1	80 7e 0c 01	 cmp	 BYTE PTR [esi+12], 1
  001e5	75 0d		 jne	 SHORT $LN161@Extract
  001e7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ea	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ee	0f 84 b9 00 00
	00		 je	 $LN170@Extract
$LN161@Extract:

; 681  : 						{	// redden right subtree with black children
; 682  : 						_Pnode->_Color = this->_Red;
; 683  : 						_Fixnode = _Fixnodeparent;
; 684  : 						}
; 685  : 					else
; 686  : 						{	// must rearrange right subtree
; 687  : 						if (_Pnode->_Right->_Color == this->_Black)

  001f4	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001f7	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001fb	0f 85 06 01 00
	00		 jne	 $LN166@Extract

; 688  : 							{	// rotate red up from left sub-subtree
; 689  : 							_Pnode->_Left->_Color = this->_Black;

  00201	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  00205	8b 31		 mov	 esi, DWORD PTR [ecx]

; 690  : 							_Pnode->_Color = this->_Red;

  00207	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  0020b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0020e	89 01		 mov	 DWORD PTR [ecx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  00210	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00213	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00217	75 03		 jne	 SHORT $LN100@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  00219	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN100@Extract:

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  0021c	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0021f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00222	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00225	8b 03		 mov	 eax, DWORD PTR [ebx]
  00227	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0022a	0f 85 b4 00 00
	00		 jne	 $LN101@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00230	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00233	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00236	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 691  : 							_Rrotate(_Pnode);
; 692  : 							_Pnode = _Fixnodeparent->_Right;

  00239	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0023c	e9 c9 00 00 00	 jmp	 $LN33@Extract
$LN26@Extract:

; 700  : 						}
; 701  : 					}
; 702  : 				else
; 703  : 					{	// fixup right subtree
; 704  : 					_Pnode = _Fixnodeparent->_Left;
; 705  : 					if (_Pnode->_Color == this->_Red)

  00241	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00245	75 47		 jne	 SHORT $LN160@Extract

; 706  : 						{	// rotate red up from left subtree
; 707  : 						_Pnode->_Color = this->_Black;

  00247	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  0024b	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 708  : 						_Fixnodeparent->_Color = this->_Red;

  0024d	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  00251	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00254	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  00256	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00259	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0025d	75 03		 jne	 SHORT $LN114@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  0025f	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN114@Extract:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  00262	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00265	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00268	8b 45 fc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0026b	8b 00		 mov	 eax, DWORD PTR [eax]
  0026d	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00270	75 05		 jne	 SHORT $LN115@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00272	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00275	eb 0f		 jmp	 SHORT $LN118@Extract
$LN115@Extract:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00277	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0027a	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0027d	75 05		 jne	 SHORT $LN117@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0027f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 551  : 			}
; 552  : 		else

  00282	eb 02		 jmp	 SHORT $LN118@Extract
$LN117@Extract:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  00284	89 08		 mov	 DWORD PTR [eax], ecx
$LN118@Extract:

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00286	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00289	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 709  : 						_Rrotate(_Fixnodeparent);
; 710  : 						_Pnode = _Fixnodeparent->_Left;

  0028c	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN160@Extract:

; 711  : 						}
; 712  : 
; 713  : 					if (_Pnode->_Isnil)

  0028e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00292	75 1d		 jne	 SHORT $LN2@Extract

; 714  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 715  : 					else if (_Pnode->_Right->_Color == this->_Black
; 716  : 						&& _Pnode->_Left->_Color == this->_Black)

  00294	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00297	80 7e 0c 01	 cmp	 BYTE PTR [esi+12], 1
  0029b	0f 85 d0 00 00
	00		 jne	 $LN162@Extract
  002a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  002a3	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002a7	0f 85 c4 00 00
	00		 jne	 $LN162@Extract
$LN170@Extract:

; 665  : 				_Fixnodeparent = _Fixnode->_Parent)

  002ad	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()
; 664  : 				&& _Fixnode->_Color == this->_Black;

  002b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002b4	8b fb		 mov	 edi, ebx

; 665  : 				_Fixnodeparent = _Fixnode->_Parent)

  002b6	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  002b9	8b 01		 mov	 eax, DWORD PTR [ecx]
  002bb	3b 58 04	 cmp	 ebx, DWORD PTR [eax+4]
  002be	0f 85 ac fe ff
	ff		 jne	 $LL4@Extract
$LN168@Extract:

; 734  : 						_Rrotate(_Fixnodeparent);
; 735  : 						break;	// tree now recolored/rebalanced
; 736  : 						}
; 737  : 					}
; 738  : 
; 739  : 			_Fixnode->_Color = this->_Black;	// stopping node is black

  002c4	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
$LN3@Extract:
  002c7	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 740  : 			}
; 741  : 
; 742  : 		if (0 < _Mysize)

  002cb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  002ce	5f		 pop	 edi
  002cf	85 c9		 test	 ecx, ecx
  002d1	74 07		 je	 SHORT $LN164@Extract

; 743  : 			--_Mysize;

  002d3	8b 45 fc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  002d6	49		 dec	 ecx
  002d7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN164@Extract:

; 744  : 
; 745  : 		return (_Erasednode);
; 746  : 		}

  002da	5e		 pop	 esi
  002db	8b c3		 mov	 eax, ebx
  002dd	5b		 pop	 ebx
  002de	8b e5		 mov	 esp, ebp
  002e0	5d		 pop	 ebp
  002e1	c2 04 00	 ret	 4
$LN101@Extract:

; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  002e4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002e7	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  002ea	75 0e		 jne	 SHORT $LN103@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  002ec	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  002ef	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  002f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 691  : 							_Rrotate(_Pnode);
; 692  : 							_Pnode = _Fixnodeparent->_Right;

  002f5	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  002f8	eb 10		 jmp	 SHORT $LN33@Extract
$LN103@Extract:

; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  002fa	89 30		 mov	 DWORD PTR [eax], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  002fc	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  002ff	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 691  : 							_Rrotate(_Pnode);
; 692  : 							_Pnode = _Fixnodeparent->_Right;

  00302	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00305	eb 03		 jmp	 SHORT $LN33@Extract
$LN166@Extract:

; 681  : 						{	// redden right subtree with black children
; 682  : 						_Pnode->_Color = this->_Red;
; 683  : 						_Fixnode = _Fixnodeparent;
; 684  : 						}
; 685  : 					else
; 686  : 						{	// must rearrange right subtree
; 687  : 						if (_Pnode->_Right->_Color == this->_Black)

  00307	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN33@Extract:

; 693  : 							}
; 694  : 
; 695  : 						_Pnode->_Color = _Fixnodeparent->_Color;

  0030a	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  0030d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 696  : 						_Fixnodeparent->_Color = this->_Black;

  00310	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 697  : 						_Pnode->_Right->_Color = this->_Black;

  00314	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00317	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  0031b	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0031e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00320	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  00323	8b 01		 mov	 eax, DWORD PTR [ecx]
  00325	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00329	75 03		 jne	 SHORT $LN107@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  0032b	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN107@Extract:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0032e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00331	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00334	8b 03		 mov	 eax, DWORD PTR [ebx]
  00336	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00339	75 10		 jne	 SHORT $LN108@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  0033b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  0033e	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  00340	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 698  : 						_Lrotate(_Fixnodeparent);
; 699  : 						break;	// tree now recolored/rebalanced

  00343	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00346	e9 79 ff ff ff	 jmp	 $LN168@Extract
$LN108@Extract:

; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  0034b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0034e	3b 10		 cmp	 edx, DWORD PTR [eax]
  00350	75 0f		 jne	 SHORT $LN110@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  00352	89 08		 mov	 DWORD PTR [eax], ecx

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  00354	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  00356	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 698  : 						_Lrotate(_Fixnodeparent);
; 699  : 						break;	// tree now recolored/rebalanced

  00359	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0035c	e9 63 ff ff ff	 jmp	 $LN168@Extract
$LN110@Extract:

; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  00361	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  00364	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  00366	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 698  : 						_Lrotate(_Fixnodeparent);
; 699  : 						break;	// tree now recolored/rebalanced

  00369	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0036c	e9 53 ff ff ff	 jmp	 $LN168@Extract
$LN162@Extract:

; 717  : 						{	// redden left subtree with black children
; 718  : 						_Pnode->_Color = this->_Red;
; 719  : 						_Fixnode = _Fixnodeparent;
; 720  : 						}
; 721  : 					else
; 722  : 						{	// must rearrange left subtree
; 723  : 						if (_Pnode->_Left->_Color == this->_Black)

  00371	8b 01		 mov	 eax, DWORD PTR [ecx]
  00373	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00377	75 55		 jne	 SHORT $LN167@Extract

; 724  : 							{	// rotate red up from right sub-subtree
; 725  : 							_Pnode->_Right->_Color = this->_Black;

  00379	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  0037d	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 726  : 							_Pnode->_Color = this->_Red;

  00380	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  00384	8b 06		 mov	 eax, DWORD PTR [esi]
  00386	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  00389	8b 06		 mov	 eax, DWORD PTR [esi]
  0038b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0038f	75 03		 jne	 SHORT $LN121@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  00391	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN121@Extract:

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00394	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00397	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0039a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0039d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0039f	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  003a2	75 0c		 jne	 SHORT $LN122@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  003a4	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  003a7	89 0e		 mov	 DWORD PTR [esi], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  003a9	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 727  : 							_Lrotate(_Pnode);
; 728  : 							_Pnode = _Fixnodeparent->_Left;

  003ac	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003ae	eb 21		 jmp	 SHORT $LN39@Extract
$LN122@Extract:

; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  003b0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  003b3	3b 08		 cmp	 ecx, DWORD PTR [eax]
  003b5	75 0b		 jne	 SHORT $LN124@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  003b7	89 30		 mov	 DWORD PTR [eax], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  003b9	89 0e		 mov	 DWORD PTR [esi], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  003bb	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 727  : 							_Lrotate(_Pnode);
; 728  : 							_Pnode = _Fixnodeparent->_Left;

  003be	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003c0	eb 0f		 jmp	 SHORT $LN39@Extract
$LN124@Extract:

; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  003c2	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  003c5	89 0e		 mov	 DWORD PTR [esi], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  003c7	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 727  : 							_Lrotate(_Pnode);
; 728  : 							_Pnode = _Fixnodeparent->_Left;

  003ca	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003cc	eb 03		 jmp	 SHORT $LN39@Extract
$LN167@Extract:

; 717  : 						{	// redden left subtree with black children
; 718  : 						_Pnode->_Color = this->_Red;
; 719  : 						_Fixnode = _Fixnodeparent;
; 720  : 						}
; 721  : 					else
; 722  : 						{	// must rearrange left subtree
; 723  : 						if (_Pnode->_Left->_Color == this->_Black)

  003ce	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN39@Extract:

; 729  : 							}
; 730  : 
; 731  : 						_Pnode->_Color = _Fixnodeparent->_Color;

  003d1	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  003d4	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 732  : 						_Fixnodeparent->_Color = this->_Black;

  003d7	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 733  : 						_Pnode->_Left->_Color = this->_Black;

  003db	8b 01		 mov	 eax, DWORD PTR [ecx]
  003dd	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  003e1	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  003e3	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  003e6	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  003e8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  003eb	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  003ef	75 03		 jne	 SHORT $LN128@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  003f1	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN128@Extract:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  003f4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  003f7	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  003fa	8b 03		 mov	 eax, DWORD PTR [ebx]
  003fc	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  003ff	75 11		 jne	 SHORT $LN129@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00401	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00404	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00407	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0040a	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0040d	e9 b2 fe ff ff	 jmp	 $LN168@Extract
$LN129@Extract:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00412	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00415	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00418	75 11		 jne	 SHORT $LN131@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0041a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  0041d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00420	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00423	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00426	e9 99 fe ff ff	 jmp	 $LN168@Extract
$LN131@Extract:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  0042b	89 08		 mov	 DWORD PTR [eax], ecx

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  0042d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00430	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00433	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00436	e9 89 fe ff ff	 jmp	 $LN168@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Rmost, COMDAT
; _this$ = ecx

; 503  : 		return (_Myhead->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 504  : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Root, COMDAT
; _this$ = ecx

; 493  : 		return (_Myhead->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 494  : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buyheadnode, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00000	6a 2c		 push	 44			; 0000002cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000a	89 00		 mov	 DWORD PTR [eax], eax
  0000c	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0000f	89 40 08	 mov	 DWORD PTR [eax+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 940  : 		_Pnode->_Color = _Black;

  00012	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 941  : 		_Pnode->_Isnil = true;
; 942  : 		return (_Pnode);
; 943  : 		}

  00018	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2019 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b 75 08	 mov	 esi, DWORD PTR __Rootnode$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0000b	8b fe		 mov	 edi, esi
  0000d	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00011	75 69		 jne	 SHORT $LN122@Erase
$LL4@Erase:

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

  00013	ff 77 08	 push	 DWORD PTR [edi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0001d	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2023 : 			_Pnode = _Pnode->_Left;

  00020	8b 3f		 mov	 edi, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00022	83 f9 08	 cmp	 ecx, 8

; 3987 : 		if (_My_data._Large_string_engaged())

  00025	72 2e		 jb	 SHORT $LN65@Erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00027	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0002a	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00031	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00037	72 12		 jb	 SHORT $LN64@Erase

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00039	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0003c	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003f	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00041	83 c0 fc	 add	 eax, -4			; fffffffcH
  00044	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00047	77 3a		 ja	 SHORT $LN61@Erase

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00049	8b c2		 mov	 eax, edx
$LN64@Erase:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004b	51		 push	 ecx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00052	83 c4 08	 add	 esp, 8
$LN65@Erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00055	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00057	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0005e	6a 2c		 push	 44			; 0000002cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00060	c7 46 28 07 00
	00 00		 mov	 DWORD PTR [esi+40], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00067	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00068	66 89 46 14	 mov	 WORD PTR [esi+20], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0006c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00071	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00074	8b f7		 mov	 esi, edi
  00076	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0007a	74 97		 je	 SHORT $LL4@Erase
$LN122@Erase:
  0007c	5f		 pop	 edi

; 2028 : 		}

  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	5d		 pop	 ebp
  00080	c2 04 00	 ret	 4
$LN61@Erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN123@Erase:
  00089	cc		 int	 3
?_Erase@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@E@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data, COMDAT
; _this$ = ecx

; 560  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 561  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Rrotate, COMDAT
; _this$ = ecx

; 536  : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 551  : 			}
; 552  : 		else
; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Lrotate, COMDAT
; _this$ = ecx

; 507  : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 525  : 			}
; 526  : 		else
; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Max, COMDAT
; __Pnode$ = ecx

; 479  : 		while (!_Pnode->_Right->_Isnil)

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00007	75 12		 jne	 SHORT $LN9@Max
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Max:

; 480  : 			_Pnode = _Pnode->_Right;

  00010	8b c8		 mov	 ecx, eax
  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN9@Max:

; 481  : 		return (_Pnode);
; 482  : 		}

  0001b	8b c1		 mov	 eax, ecx
  0001d	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >::allocate, COMDAT
; _this$dead$ = ecx

; 52   : 		return (::operator new(_Bytes));

  00000	6a 2c		 push	 44			; 0000002cH
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0000a	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	6b 4d 0c 2c	 imul	 ecx, DWORD PTR __Count$[ebp], 44
  00007	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000a	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00010	72 12		 jb	 SHORT $LN15@deallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00012	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00015	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00018	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001a	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001d	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00020	77 10		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00022	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00024	51		 push	 ecx
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002b	83 c4 08	 add	 esp, 8

; 993  : 		}

  0002e	5d		 pop	 ebp
  0002f	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00038	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
;	COMDAT ??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z
_TEXT	SEGMENT
_delimLength$1$ = -52					; size = 4
_end$1$ = -48						; size = 4
$T99 = -44						; size = 24
$T25 = -44						; size = 24
_delimiter$GSCopy$1$ = -20				; size = 4
__Result$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_tokens$ = 8						; size = 4
??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z PROC ; split<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _str$ = ecx
; _delimiter$ = edx

; 28   : size_t split (__in const T& str, __in const T& delimiter, __out std::vector<T>& tokens) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 28	 sub	 esp, 40			; 00000028H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	89 55 ec	 mov	 DWORD PTR _delimiter$GSCopy$1$[ebp], edx
  0002a	89 4d f0	 mov	 DWORD PTR __Result$1$[ebp], ecx
  0002d	8b 7d 08	 mov	 edi, DWORD PTR _tokens$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00030	51		 push	 ecx
  00031	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00034	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00036	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1592 : 		this->_Mylast() = this->_Myfirst();

  0003b	8b 07		 mov	 eax, DWORD PTR [edi]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  0003d	83 c4 04	 add	 esp, 4
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 32   :     size_t start = 0, end = str.find(delimiter), delimLength = delimiter.length();

  00040	8b 4d f0	 mov	 ecx, DWORD PTR __Result$1$[ebp]
  00043	33 f6		 xor	 esi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1592 : 		this->_Mylast() = this->_Myfirst();

  00045	89 47 04	 mov	 DWORD PTR [edi+4], eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 32   :     size_t start = 0, end = str.find(delimiter), delimLength = delimiter.length();

  00048	56		 push	 esi
  00049	ff 75 ec	 push	 DWORD PTR _delimiter$GSCopy$1$[ebp]
  0004c	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00051	8b d0		 mov	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3297 : 		return (this->_Get_data()._Mysize);

  00053	8b 45 ec	 mov	 eax, DWORD PTR _delimiter$GSCopy$1$[ebp]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 32   :     size_t start = 0, end = str.find(delimiter), delimLength = delimiter.length();

  00056	89 55 d0	 mov	 DWORD PTR _end$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3297 : 		return (this->_Get_data()._Mysize);

  00059	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0005c	89 45 cc	 mov	 DWORD PTR _delimLength$1$[ebp], eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 34   :     while (end != T::npos) {

  0005f	83 fa ff	 cmp	 edx, -1
  00062	0f 84 de 00 00
	00		 je	 $LN3@split
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL2@split:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1830 : 		if (_Mysize < _Off)

  00070	8b 45 f0	 mov	 eax, DWORD PTR __Result$1$[ebp]

; 3976 : 		_My_data._Mysize = 0;

  00073	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T25[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0007a	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T25[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00081	c6 45 d4 00	 mov	 BYTE PTR $T25[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1830 : 		if (_Mysize < _Off)

  00085	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00088	3b ce		 cmp	 ecx, esi
  0008a	0f 82 84 01 00
	00		 jb	 $LN531@split

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00090	2b ce		 sub	 ecx, esi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 35   :         tokens.emplace_back (str.substr (start, end - start));

  00092	2b d6		 sub	 edx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00094	3b ca		 cmp	 ecx, edx
  00096	0f 42 d1	 cmovb	 edx, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00099	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1814 : 		const value_type * _Result = _Bx._Buf;

  0009d	8b c8		 mov	 ecx, eax

; 1815 : 		if (_Large_string_engaged())

  0009f	72 02		 jb	 SHORT $LN536@split
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  000a1	8b 08		 mov	 ecx, DWORD PTR [eax]
$LN536@split:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2635 : 		return (assign(_Right_data._Myptr() + _Roff, _Count));

  000a3	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
  000a6	52		 push	 edx
  000a7	50		 push	 eax
  000a8	8d 4d d4	 lea	 ecx, DWORD PTR $T25[ebp]
  000ab	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 35   :         tokens.emplace_back (str.substr (start, end - start));

  000b0	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1726 : 		return (this->_Myend() != this->_Mylast());

  000b7	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 917  : 		if (_Has_unused_capacity())

  000ba	39 47 08	 cmp	 DWORD PTR [edi+8], eax
  000bd	74 20		 je	 SHORT $LN108@split
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  000bf	0f 10 45 d4	 movups	 xmm0, XMMWORD PTR $T25[ebp]

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  000c3	ba 0f 00 00 00	 mov	 edx, 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  000c8	c6 45 d4 00	 mov	 BYTE PTR $T25[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  000cc	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  000cf	f3 0f 7e 45 e4	 movq	 xmm0, QWORD PTR $T25[ebp+16]
  000d4	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  000d9	83 47 04 18	 add	 DWORD PTR [edi+4], 24	; 00000018H

; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  000dd	eb 0f		 jmp	 SHORT $LN107@split
$LN108@split:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  000df	8d 4d d4	 lea	 ecx, DWORD PTR $T25[ebp]
  000e2	51		 push	 ecx
  000e3	50		 push	 eax
  000e4	8b cf		 mov	 ecx, edi
  000e6	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
  000eb	8b 55 e8	 mov	 edx, DWORD PTR $T25[ebp+20]
$LN107@split:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 35   :         tokens.emplace_back (str.substr (start, end - start));

  000ee	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  000f5	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  000f8	72 2c		 jb	 SHORT $LN268@split
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fa	8b 4d d4	 mov	 ecx, DWORD PTR $T25[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  000fd	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000fe	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00100	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00106	72 14		 jb	 SHORT $LN267@split

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00108	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0010b	83 c2 23	 add	 edx, 35			; 00000023H
  0010e	2b c1		 sub	 eax, ecx

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00110	83 c0 fc	 add	 eax, -4			; fffffffcH
  00113	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00116	0f 87 c1 00 00
	00		 ja	 $LN264@split
$LN267@split:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0011c	52		 push	 edx
  0011d	51		 push	 ecx
  0011e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00123	83 c4 08	 add	 esp, 8
$LN268@split:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 36   :         start = end + delimLength;

  00126	8b 75 cc	 mov	 esi, DWORD PTR _delimLength$1$[ebp]
  00129	03 75 d0	 add	 esi, DWORD PTR _end$1$[ebp]

; 37   :         end = str.find (delimiter, start);

  0012c	8b 4d f0	 mov	 ecx, DWORD PTR __Result$1$[ebp]
  0012f	56		 push	 esi
  00130	ff 75 ec	 push	 DWORD PTR _delimiter$GSCopy$1$[ebp]
  00133	e8 00 00 00 00	 call	 ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
  00138	8b d0		 mov	 edx, eax
  0013a	89 55 d0	 mov	 DWORD PTR _end$1$[ebp], edx
  0013d	83 fa ff	 cmp	 edx, -1
  00140	0f 85 2a ff ff
	ff		 jne	 $LL2@split
$LN3@split:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1830 : 		if (_Mysize < _Off)

  00146	8b 45 f0	 mov	 eax, DWORD PTR __Result$1$[ebp]

; 3976 : 		_My_data._Mysize = 0;

  00149	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T99[ebp+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00150	c7 45 e8 0f 00
	00 00		 mov	 DWORD PTR $T99[ebp+20], 15 ; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00157	c6 45 d4 00	 mov	 BYTE PTR $T99[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1830 : 		if (_Mysize < _Off)

  0015b	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0015e	3b ce		 cmp	 ecx, esi
  00160	0f 82 ae 00 00
	00		 jb	 $LN531@split

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00166	2b ce		 sub	 ecx, esi
  00168	83 ca ff	 or	 edx, -1
  0016b	83 f9 ff	 cmp	 ecx, -1
  0016e	0f 42 d1	 cmovb	 edx, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00171	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00175	72 02		 jb	 SHORT $LN330@split
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00177	8b 00		 mov	 eax, DWORD PTR [eax]
$LN330@split:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2635 : 		return (assign(_Right_data._Myptr() + _Roff, _Count));

  00179	52		 push	 edx
  0017a	03 c6		 add	 eax, esi
  0017c	8d 4d d4	 lea	 ecx, DWORD PTR $T99[ebp]
  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 40   :     tokens.emplace_back (str.substr (start));

  00185	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1726 : 		return (this->_Myend() != this->_Mylast());

  0018c	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0018f	39 47 08	 cmp	 DWORD PTR [edi+8], eax

; 917  : 		if (_Has_unused_capacity())

  00192	74 17		 je	 SHORT $LN339@split
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00194	0f 10 45 d4	 movups	 xmm0, XMMWORD PTR $T99[ebp]
  00198	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0019b	f3 0f 7e 45 e4	 movq	 xmm0, QWORD PTR $T99[ebp+16]
  001a0	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 905  : 		++this->_Mylast();

  001a5	83 47 04 18	 add	 DWORD PTR [edi+4], 24	; 00000018H

; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));

  001a9	eb 42		 jmp	 SHORT $LN499@split
$LN339@split:

; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  001ab	8d 4d d4	 lea	 ecx, DWORD PTR $T99[ebp]
  001ae	51		 push	 ecx
  001af	50		 push	 eax
  001b0	8b cf		 mov	 ecx, edi
  001b2	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  001b7	8b 55 e8	 mov	 edx, DWORD PTR $T99[ebp+20]
  001ba	83 fa 10	 cmp	 edx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  001bd	72 2e		 jb	 SHORT $LN499@split
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001bf	8b 4d d4	 mov	 ecx, DWORD PTR $T99[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  001c2	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001c3	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  001c5	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  001cb	72 16		 jb	 SHORT $LN498@split

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  001cd	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  001d0	83 c2 23	 add	 edx, 35			; 00000023H
  001d3	2b c1		 sub	 eax, ecx

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001d5	83 c0 fc	 add	 eax, -4			; fffffffcH
  001d8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001db	76 06		 jbe	 SHORT $LN498@split
$LN264@split:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 43   : }

  001dd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN498@split:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  001e3	52		 push	 edx
  001e4	51		 push	 ecx
  001e5	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001ea	83 c4 08	 add	 esp, 8
$LN499@split:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  001ed	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  001f0	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001f5	2b 0f		 sub	 ecx, DWORD PTR [edi]
  001f7	f7 e9		 imul	 ecx
  001f9	c1 fa 02	 sar	 edx, 2
  001fc	8b c2		 mov	 eax, edx
  001fe	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00201	03 c2		 add	 eax, edx
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 43   : }

  00203	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00206	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0020d	59		 pop	 ecx
  0020e	5f		 pop	 edi
  0020f	5e		 pop	 esi
  00210	8b e5		 mov	 esp, ebp
  00212	5d		 pop	 ebp
  00213	c3		 ret	 0
$LN531@split:
  00214	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN539@split:
  00219	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z$0:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T25[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z$1:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR $T99[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z:
  00010	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00014	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00017	8b 4a cc	 mov	 ecx, DWORD PTR [edx-52]
  0001a	33 c8		 xor	 ecx, eax
  0001c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00021	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z
  00026	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$split@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@@YAIABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@0AAV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@1@@Z ENDP ; split<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 916  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b d1		 mov	 edx, ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00005	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00008	39 4a 08	 cmp	 DWORD PTR [edx+8], ecx

; 917  : 		if (_Has_unused_capacity())

  0000b	74 3f		 je	 SHORT $LN2@emplace_ba
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0000d	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]

; 1784 : 		_Mysize(0),

  00010	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1785 : 		_Myres(0)

  00017	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0001e	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00021	0f 11 01	 movups	 XMMWORD PTR [ecx], xmm0
  00024	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  00029	66 0f d6 41 10	 movq	 QWORD PTR [ecx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  0002e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00035	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0003c	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  0003f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 905  : 		++this->_Mylast();

  00042	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
  00045	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN2@emplace_ba:

; 918  : 			{
; 919  : 			return (_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...));
; 920  : 			}
; 921  : 
; 922  : 		_Ty& _Result = *_Emplace_reallocate(this->_Mylast(), _STD forward<_Valty>(_Val)...);

  0004c	ff 75 08	 push	 DWORD PTR _<_Val_0>$[ebp]
  0004f	51		 push	 ecx
  00050	8b ca		 mov	 ecx, edx
  00052	e8 00 00 00 00	 call	 ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >

; 923  : #if _HAS_CXX17
; 924  : 		return (_Result);
; 925  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 926  : 		(void)_Result;
; 927  : #endif /* _HAS_CXX17 */
; 928  : 		}

  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??$emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00003	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 900  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h

; 187  :         return _Where;

  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0000c	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1785 : 		_Myres(0)

  00013	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0001a	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0001d	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00020	f3 0f 7e 42 10	 movq	 xmm0, QWORD PTR [edx+16]
  00025	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  0002a	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00031	c7 42 14 0f 00
	00 00		 mov	 DWORD PTR [edx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00038	c6 02 00	 mov	 BYTE PTR [edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 904  : 		_Ty& _Result = *this->_Mylast();

  0003b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 905  : 		++this->_Mylast();

  0003e	8d 48 18	 lea	 ecx, DWORD PTR [eax+24]
  00041	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 906  : #if _HAS_CXX17
; 907  : 		return (_Result);

  00044	5e		 pop	 esi

; 908  : #else /* ^^^ _HAS_CXX17 ^^^ // vvv !_HAS_CXX17 vvv */
; 909  : 		(void)_Result;
; 910  : #endif /* _HAS_CXX17 */
; 911  : 		}

  00045	5d		 pop	 ebp
  00046	c2 04 00	 ret	 4
??$_Emplace_back_with_unused_capacity@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEAAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back_with_unused_capacity<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; __Left$ = ecx
; __Right$dead$ = edx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  00004	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1815 : 		if (_Large_string_engaged())

  00007	72 02		 jb	 SHORT $LN12@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN12@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  0000b	83 f8 01	 cmp	 eax, 1
  0000e	75 17		 jne	 SHORT $LN20@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));

  00010	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00013	3c 3f		 cmp	 al, 63			; 0000003fH
  00015	75 04		 jne	 SHORT $LN24@operator
  00017	33 c0		 xor	 eax, eax
  00019	eb 05		 jmp	 SHORT $LN25@operator
$LN24@operator:
  0001b	1b c0		 sbb	 eax, eax
  0001d	83 c8 01	 or	 eax, 1
$LN25@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00020	85 c0		 test	 eax, eax
  00022	75 03		 jne	 SHORT $LN20@operator
  00024	b0 01		 mov	 al, 1

; 4220 : 	return (_Left._Equal(_Right));
; 4221 : 	}

  00026	c3		 ret	 0
$LN20@operator:

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00027	32 c0		 xor	 al, al

; 4220 : 	return (_Left._Equal(_Right));
; 4221 : 	}

  00029	c3		 ret	 0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$data@V?$vector@EV?$allocator@E@std@@@std@@@std@@YAPAEAAV?$vector@EV?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT
??$data@V?$vector@EV?$allocator@E@std@@@std@@@std@@YAPAEAAV?$vector@EV?$allocator@E@std@@@0@@Z PROC ; std::data<std::vector<unsigned char,std::allocator<unsigned char> > >, COMDAT
; __Cont$ = ecx

; 1674 : 	return (_Cont.data());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1675 : 	}

  00002	c3		 ret	 0
??$data@V?$vector@EV?$allocator@E@std@@@std@@@std@@YAPAEAAV?$vector@EV?$allocator@E@std@@@0@@Z ENDP ; std::data<std::vector<unsigned char,std::allocator<unsigned char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAK@std@@YAAAKAAK@Z
_TEXT	SEGMENT
??$forward@AAK@std@@YAAAKAAK@Z PROC			; std::forward<unsigned long &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAK@std@@YAAAKAAK@Z ENDP			; std::forward<unsigned long &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@KAAK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAKAAK@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@KAAK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAKAAK@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@KAAK@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@QAKAAK@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKAAK@Z
_TEXT	SEGMENT
tv761 = -20						; size = 4
__Newsize$1$ = -16					; size = 4
tv759 = -12						; size = 4
__Whereoff$1$ = -12					; size = 4
__Whereptr$GSCopy$1$ = -8				; size = 4
$T89 = -1						; size = 1
$T57 = -1						; size = 1
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKAAK@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long &>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	89 45 f8	 mov	 DWORD PTR __Whereptr$GSCopy$1$[ebp], eax
  0000f	56		 push	 esi
  00010	57		 push	 edi

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  00011	8b 13		 mov	 edx, DWORD PTR [ebx]
  00013	2b c2		 sub	 eax, edx
  00015	c1 f8 02	 sar	 eax, 2
  00018	89 45 f4	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0001b	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001e	2b c2		 sub	 eax, edx
  00020	c1 f8 02	 sar	 eax, 2

; 945  : 		_Alty& _Al = this->_Getal();
; 946  : 		const size_type _Oldsize = size();
; 947  : 
; 948  : 		if (_Oldsize == max_size())

  00023	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00028	0f 84 fe 00 00
	00		 je	 $LN222@Emplace_re

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0002e	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  00031	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00034	2b ca		 sub	 ecx, edx

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  00036	89 75 f0	 mov	 DWORD PTR __Newsize$1$[ebp], esi

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00039	c1 f9 02	 sar	 ecx, 2

; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  0003c	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH
  00041	8b d1		 mov	 edx, ecx
  00043	d1 ea		 shr	 edx, 1
  00045	2b c2		 sub	 eax, edx
  00047	3b c8		 cmp	 ecx, eax
  00049	76 04		 jbe	 SHORT $LN48@Emplace_re

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

  0004b	8b fe		 mov	 edi, esi
  0004d	eb 08		 jmp	 SHORT $LN49@Emplace_re
$LN48@Emplace_re:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0004f	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  00052	3b fe		 cmp	 edi, esi
  00054	0f 42 fe	 cmovb	 edi, esi
$LN49@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00057	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]

; 26   : 	if (_Max_possible < _Count)

  0005e	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00064	76 05		 jbe	 SHORT $LN80@Emplace_re

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00066	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00069	eb 08		 jmp	 SHORT $LN218@Emplace_re
$LN80@Emplace_re:
  0006b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00071	72 29		 jb	 SHORT $LN83@Emplace_re
$LN218@Emplace_re:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00073	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00076	83 ca ff	 or	 edx, -1
  00079	3b c1		 cmp	 eax, ecx
  0007b	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00084	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00087	85 c0		 test	 eax, eax
  00089	74 0b		 je	 SHORT $LN92@Emplace_re

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0008b	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  0008e	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00091	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00094	eb 19		 jmp	 SHORT $LN82@Emplace_re
$LN92@Emplace_re:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN83@Emplace_re:

; 188  : 	if (_Bytes != 0)

  0009c	85 c9		 test	 ecx, ecx
  0009e	74 0d		 je	 SHORT $LN84@Emplace_re

; 52   : 		return (::operator new(_Bytes));

  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a6	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000a9	8b f0		 mov	 esi, eax
  000ab	eb 02		 jmp	 SHORT $LN82@Emplace_re
$LN84@Emplace_re:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000ad	33 f6		 xor	 esi, esi
$LN82@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000af	8b 45 f4	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
  000b2	c1 e0 02	 shl	 eax, 2
  000b5	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000b8	89 45 ec	 mov	 DWORD PTR tv761[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000bb	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 964  : 		if (_Whereptr == this->_Mylast())

  000be	51		 push	 ecx
  000bf	89 4d f4	 mov	 DWORD PTR tv759[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000c2	8b 00		 mov	 eax, DWORD PTR [eax]
  000c4	89 01		 mov	 DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 964  : 		if (_Whereptr == this->_Mylast())

  000c6	8d 4d ff	 lea	 ecx, DWORD PTR $T57[ebp]
  000c9	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  000cc	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_move_cat<unsigned long,unsigned long>
  000d1	39 55 f8	 cmp	 DWORD PTR __Whereptr$GSCopy$1$[ebp], edx
  000d4	75 09		 jne	 SHORT $LN4@Emplace_re
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000d6	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d8	2b d0		 sub	 edx, eax

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000da	52		 push	 edx
  000db	50		 push	 eax
  000dc	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 968  : 		else

  000dd	eb 2b		 jmp	 SHORT $LN220@Emplace_re
$LN4@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000df	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000e1	8b 45 f8	 mov	 eax, DWORD PTR __Whereptr$GSCopy$1$[ebp]
  000e4	2b c1		 sub	 eax, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000e6	50		 push	 eax
  000e7	51		 push	 ecx
  000e8	56		 push	 esi
  000e9	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  000ee	8b 55 f4	 mov	 edx, DWORD PTR tv759[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  000f1	8d 4d ff	 lea	 ecx, DWORD PTR $T89[ebp]
  000f4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  000f7	83 c2 04	 add	 edx, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  000fa	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_move_cat<unsigned long,unsigned long>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000ff	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00102	8b 4d f8	 mov	 ecx, DWORD PTR __Whereptr$GSCopy$1$[ebp]
  00105	2b c1		 sub	 eax, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00107	50		 push	 eax
  00108	51		 push	 ecx
  00109	52		 push	 edx
$LN220@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);

  0010a	e8 00 00 00 00	 call	 _memmove
  0010f	83 c4 10	 add	 esp, 16			; 00000010H
  00112	8b cb		 mov	 ecx, ebx
  00114	57		 push	 edi
  00115	ff 75 f0	 push	 DWORD PTR __Newsize$1$[ebp]
  00118	56		 push	 esi
  00119	e8 00 00 00 00	 call	 ?_Change_array@?$vector@KV?$allocator@K@std@@@std@@AAEXQAKII@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Change_array

; 981  : 		return (this->_Myfirst() + _Whereoff);

  0011e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00120	03 45 ec	 add	 eax, DWORD PTR tv761[ebp]
  00123	5f		 pop	 edi
  00124	5e		 pop	 esi
  00125	5b		 pop	 ebx

; 982  : 		}

  00126	8b e5		 mov	 esp, ebp
  00128	5d		 pop	 ebp
  00129	c2 08 00	 ret	 8
$LN222@Emplace_re:

; 949  : 			{
; 950  : 			_Xlength();

  0012c	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN219@Emplace_re:
  00131	cc		 int	 3
??$_Emplace_reallocate@AAK@?$vector@KV?$allocator@K@std@@@std@@QAEPAKQAKAAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Emplace_reallocate<unsigned long &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0PAUHKEY__@@AAY0EF@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0EF@$$CB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$dead$ = 12					; size = 4
??$?0PAUHKEY__@@AAY0EF@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0EF@$$CB_W@Z PROC ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><HKEY__ *,wchar_t const (&)[69],0>, COMDAT
; _this$ = ecx

; 174  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00004	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]

; 174  : 		{

  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00012	6a 44		 push	 68			; 00000044H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00014	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00016	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00018	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0001f	c7 41 14 07 00
	00 00		 mov	 DWORD PTR [ecx+20], 7

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00026	68 00 00 00 00	 push	 OFFSET ??_C@_1IK@NJBBFKEK@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0002b	66 89 01	 mov	 WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0002e	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 175  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
??$?0PAUHKEY__@@AAY0EF@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0EF@$$CB_W@Z ENDP ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><HKEY__ *,wchar_t const (&)[69],0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0PAUHKEY__@@AAY0EP@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0EP@$$CB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAUHKEY__@@AAY0EP@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0EP@$$CB_W@Z PROC ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><HKEY__ *,wchar_t const (&)[79],0>, COMDAT
; _this$ = ecx

; 174  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00004	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]

; 174  : 		{

  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00012	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0001b	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00022	66 89 46 04	 mov	 WORD PTR [esi+4], ax

; 300  : 			return (__builtin_wcslen(_First));

  00026	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00029	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  0002c	0f 1f 40 00	 npad	 4
$LL32@allocator:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL32@allocator
  0003b	2b c3		 sub	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0003d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 300  : 			return (__builtin_wcslen(_First));

  00040	d1 f8		 sar	 eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00042	50		 push	 eax
  00043	ff 75 0c	 push	 DWORD PTR __Val2$[ebp]
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 175  : 		}

  0004b	8b c6		 mov	 eax, esi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
??$?0PAUHKEY__@@AAY0EP@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0EP@$$CB_W@Z ENDP ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><HKEY__ *,wchar_t const (&)[79],0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0PAUHKEY__@@AAY0GI@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0GI@$$CB_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAUHKEY__@@AAY0GI@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0GI@$$CB_W@Z PROC ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><HKEY__ *,wchar_t const (&)[104],0>, COMDAT
; _this$ = ecx

; 174  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00004	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]

; 174  : 		{

  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 00		 mov	 eax, DWORD PTR [eax]
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00012	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00014	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0001b	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00022	66 89 46 04	 mov	 WORD PTR [esi+4], ax

; 300  : 			return (__builtin_wcslen(_First));

  00026	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  00029	8d 58 02	 lea	 ebx, DWORD PTR [eax+2]
  0002c	0f 1f 40 00	 npad	 4
$LL32@allocator:
  00030	66 8b 08	 mov	 cx, WORD PTR [eax]
  00033	83 c0 02	 add	 eax, 2
  00036	66 85 c9	 test	 cx, cx
  00039	75 f5		 jne	 SHORT $LL32@allocator
  0003b	2b c3		 sub	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  0003d	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 300  : 			return (__builtin_wcslen(_First));

  00040	d1 f8		 sar	 eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2676 : 		return (assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr))));

  00042	50		 push	 eax
  00043	ff 75 0c	 push	 DWORD PTR __Val2$[ebp]
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 175  : 		}

  0004b	8b c6		 mov	 eax, esi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	8b e5		 mov	 esp, ebp
  00051	5d		 pop	 ebp
  00052	c2 08 00	 ret	 8
??$?0PAUHKEY__@@AAY0GI@$$CB_W$0A@@?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@$$QAPAUHKEY__@@AAY0GI@$$CB_W@Z ENDP ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > ><HKEY__ *,wchar_t const (&)[104],0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAE@std@@YA$$QAEAAE@Z
_TEXT	SEGMENT
??$move@AAE@std@@YA$$QAEAAE@Z PROC			; std::move<unsigned char &>, COMDAT
; __Arg$ = ecx

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1590 : 	}

  00002	c3		 ret	 0
??$move@AAE@std@@YA$$QAEAAE@Z ENDP			; std::move<unsigned char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@E@std@@YA$$QAEAAE@Z
_TEXT	SEGMENT
??$forward@E@std@@YA$$QAEAAE@Z PROC			; std::forward<unsigned char>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@E@std@@YA$$QAEAAE@Z ENDP			; std::forward<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@E@std@@YAPAEPAE@Z
_TEXT	SEGMENT
??$_Unfancy@E@std@@YAPAEPAE@Z PROC			; std::_Unfancy<unsigned char>, COMDAT
; __Ptr$ = ecx

; 346  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 347  : 	}

  00002	c3		 ret	 0
??$_Unfancy@E@std@@YAPAEPAE@Z ENDP			; std::_Unfancy<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@EE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAAV?$allocator@E@1@QAE$$QAE@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@EE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAAV?$allocator@E@1@QAE$$QAE@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8a 00		 mov	 al, BYTE PTR [eax]
  00008	88 02		 mov	 BYTE PTR [edx], al

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@EE@?$_Default_allocator_traits@V?$allocator@E@std@@@std@@SAXAAV?$allocator@E@1@QAE$$QAE@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned char> >::construct<unsigned char,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@E@?$vector@EV?$allocator@E@std@@@std@@QAEPAEQAE$$QAE@Z
_TEXT	SEGMENT
__Newsize$1$ = -20					; size = 4
tv958 = -16						; size = 4
__Whereoff$1$ = -12					; size = 4
__Whereptr$GSCopy$1$ = -8				; size = 4
$T89 = -1						; size = 1
$T57 = -1						; size = 1
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@E@?$vector@EV?$allocator@E@std@@@std@@QAEPAEQAE$$QAE@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_reallocate<unsigned char>, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	8b 45 08	 mov	 eax, DWORD PTR __Whereptr$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	89 45 f8	 mov	 DWORD PTR __Whereptr$GSCopy$1$[ebp], eax
  00010	57		 push	 edi

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	2b c2		 sub	 eax, edx
  00015	89 45 f4	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00018	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001b	2b c2		 sub	 eax, edx

; 945  : 		_Alty& _Al = this->_Getal();
; 946  : 		const size_type _Oldsize = size();
; 947  : 
; 948  : 		if (_Oldsize == max_size())

  0001d	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00022	0f 84 15 01 00
	00		 je	 $LN319@Emplace_re

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00028	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  0002b	8d 78 01	 lea	 edi, DWORD PTR [eax+1]

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0002e	2b ca		 sub	 ecx, edx

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  00030	89 7d ec	 mov	 DWORD PTR __Newsize$1$[ebp], edi

; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00033	8b d1		 mov	 edx, ecx
  00035	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0003a	d1 ea		 shr	 edx, 1
  0003c	2b c2		 sub	 eax, edx
  0003e	3b c8		 cmp	 ecx, eax
  00040	76 04		 jbe	 SHORT $LN48@Emplace_re

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

  00042	8b df		 mov	 ebx, edi
  00044	eb 08		 jmp	 SHORT $LN49@Emplace_re
$LN48@Emplace_re:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00046	8d 1c 0a	 lea	 ebx, DWORD PTR [edx+ecx]

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  00049	3b df		 cmp	 ebx, edi
  0004b	0f 42 df	 cmovb	 ebx, edi
$LN49@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  0004e	81 fb 00 10 00
	00		 cmp	 ebx, 4096		; 00001000H
  00054	72 27		 jb	 SHORT $LN82@Emplace_re

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00056	8d 43 23	 lea	 eax, DWORD PTR [ebx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00059	83 c9 ff	 or	 ecx, -1
  0005c	3b c3		 cmp	 eax, ebx
  0005e	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00067	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0006a	85 c0		 test	 eax, eax
  0006c	0f 84 c5 00 00
	00		 je	 $LN285@Emplace_re

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00072	8d 78 23	 lea	 edi, DWORD PTR [eax+35]
  00075	83 e7 e0	 and	 edi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00078	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  0007b	eb 13		 jmp	 SHORT $LN81@Emplace_re
$LN82@Emplace_re:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0007d	85 db		 test	 ebx, ebx
  0007f	74 0d		 je	 SHORT $LN83@Emplace_re

; 52   : 		return (::operator new(_Bytes));

  00081	53		 push	 ebx
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  0008a	8b f8		 mov	 edi, eax
  0008c	eb 02		 jmp	 SHORT $LN81@Emplace_re
$LN83@Emplace_re:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  0008e	33 ff		 xor	 edi, edi
$LN81@Emplace_re:

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00090	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  00093	8b 4d f4	 mov	 ecx, DWORD PTR __Whereoff$1$[ebp]
  00096	03 cf		 add	 ecx, edi

; 964  : 		if (_Whereptr == this->_Mylast())

  00098	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00099	8a 00		 mov	 al, BYTE PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  0009b	89 4d f0	 mov	 DWORD PTR tv958[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0009e	88 01		 mov	 BYTE PTR [ecx], al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 964  : 		if (_Whereptr == this->_Mylast())

  000a0	8d 4d ff	 lea	 ecx, DWORD PTR $T57[ebp]
  000a3	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000a6	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z ; std::_Ptr_move_cat<unsigned char,unsigned char>
  000ab	39 55 f8	 cmp	 DWORD PTR __Whereptr$GSCopy$1$[ebp], edx
  000ae	75 09		 jne	 SHORT $LN4@Emplace_re
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000b0	8b 06		 mov	 eax, DWORD PTR [esi]
  000b2	2b d0		 sub	 edx, eax

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000b4	52		 push	 edx
  000b5	50		 push	 eax
  000b6	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 968  : 		else

  000b7	eb 29		 jmp	 SHORT $LN317@Emplace_re
$LN4@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000b9	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000bb	8b 45 f8	 mov	 eax, DWORD PTR __Whereptr$GSCopy$1$[ebp]
  000be	2b c1		 sub	 eax, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000c0	50		 push	 eax
  000c1	51		 push	 ecx
  000c2	57		 push	 edi
  000c3	e8 00 00 00 00	 call	 _memmove
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  000c8	8b 55 f0	 mov	 edx, DWORD PTR tv958[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  000cb	8d 4d ff	 lea	 ecx, DWORD PTR $T89[ebp]
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  000d1	42		 inc	 edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  000d2	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z ; std::_Ptr_move_cat<unsigned char,unsigned char>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000d7	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000da	8b 4d f8	 mov	 ecx, DWORD PTR __Whereptr$GSCopy$1$[ebp]
  000dd	2b c1		 sub	 eax, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000df	50		 push	 eax
  000e0	51		 push	 ecx
  000e1	52		 push	 edx
$LN317@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1898 : 		if (this->_Myfirst() != pointer())

  000e2	e8 00 00 00 00	 call	 _memmove
  000e7	8b 06		 mov	 eax, DWORD PTR [esi]
  000e9	83 c4 10	 add	 esp, 16			; 00000010H
  000ec	85 c0		 test	 eax, eax
  000ee	74 29		 je	 SHORT $LN289@Emplace_re

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  000f0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000f3	2b c8		 sub	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000f5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000fb	72 12		 jb	 SHORT $LN288@Emplace_re

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000fd	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00100	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00103	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00105	83 c0 fc	 add	 eax, -4			; fffffffcH
  00108	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0010b	77 2a		 ja	 SHORT $LN285@Emplace_re

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0010d	8b c2		 mov	 eax, edx
$LN288@Emplace_re:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0010f	51		 push	 ecx
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00116	83 c4 08	 add	 esp, 8
$LN289@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  00119	8b 45 ec	 mov	 eax, DWORD PTR __Newsize$1$[ebp]
  0011c	03 c7		 add	 eax, edi
  0011e	89 3e		 mov	 DWORD PTR [esi], edi
  00120	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  00123	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00126	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);
; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);
; 977  : 		_RERAISE;
; 978  : 		_CATCH_END
; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);
; 981  : 		return (this->_Myfirst() + _Whereoff);

  00129	8b 06		 mov	 eax, DWORD PTR [esi]
  0012b	03 45 f4	 add	 eax, DWORD PTR __Whereoff$1$[ebp]
  0012e	5f		 pop	 edi
  0012f	5e		 pop	 esi
  00130	5b		 pop	 ebx

; 982  : 		}

  00131	8b e5		 mov	 esp, ebp
  00133	5d		 pop	 ebp
  00134	c2 08 00	 ret	 8
$LN285@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00137	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN319@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 950  : 			_Xlength();

  0013d	e8 00 00 00 00	 call	 ?_Xlength@?$vector@EV?$allocator@E@std@@@std@@CAXXZ ; std::vector<unsigned char,std::allocator<unsigned char> >::_Xlength
$LN316@Emplace_re:
  00142	cc		 int	 3
??$_Emplace_reallocate@E@?$vector@EV?$allocator@E@std@@@std@@QAEPAEQAE$$QAE@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Emplace_reallocate<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0V?$allocator@_W@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$?0V?$allocator@_W@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::allocator<wchar_t>,void>, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1919 : 		}

  00007	8b c1		 mov	 eax, ecx

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1919 : 		}

  00010	c2 04 00	 ret	 4
??$?0V?$allocator@_W@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::allocator<wchar_t>,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z
_TEXT	SEGMENT
__Old_size$1$ = -12					; size = 4
__New_size$1$ = -8					; size = 4
__Old$1$ = -4						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >, COMDAT
; _this$ = ecx

; 3919 : 		{	// reallocate to increase size by _Size_increase elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3920 : 			// _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 3921 : 		auto& _My_data = this->_Get_data();
; 3922 : 		const size_type _Old_size = _My_data._Mysize;
; 3923 : 		if (max_size() - _Old_size < _Size_increase)

  00006	8b 55 08	 mov	 edx, DWORD PTR __Size_increase$[ebp]
  00009	53		 push	 ebx
  0000a	8b d9		 mov	 ebx, ecx
  0000c	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00011	56		 push	 esi
  00012	8b c1		 mov	 eax, ecx
  00014	57		 push	 edi
  00015	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  00018	2b c6		 sub	 eax, esi
  0001a	89 75 f4	 mov	 DWORD PTR __Old_size$1$[ebp], esi
  0001d	3b c2		 cmp	 eax, edx
  0001f	0f 82 ee 00 00
	00		 jb	 $LN119@Reallocate

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00025	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00028	03 d6		 add	 edx, esi

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002a	8b f2		 mov	 esi, edx

; 3926 : 			}
; 3927 : 
; 3928 : 		const size_type _New_size = _Old_size + _Size_increase;

  0002c	89 55 f8	 mov	 DWORD PTR __New_size$1$[ebp], edx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  0002f	83 ce 0f	 or	 esi, 15			; 0000000fH

; 3929 : 		const size_type _Old_capacity = _My_data._Myres;

  00032	89 45 fc	 mov	 DWORD PTR __Old$1$[ebp], eax

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00035	3b f1		 cmp	 esi, ecx

; 3870 : 		if (_Masked > _Max)

  00037	76 04		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00039	8b f1		 mov	 esi, ecx
  0003b	eb 18		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  0003d	8b d0		 mov	 edx, eax
  0003f	d1 ea		 shr	 edx, 1
  00041	2b ca		 sub	 ecx, edx
  00043	3b c1		 cmp	 eax, ecx
  00045	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00047	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0004c	eb 07		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004e	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00050	3b f0		 cmp	 esi, eax
  00052	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3932 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00055	33 c9		 xor	 ecx, ecx
  00057	8b c6		 mov	 eax, esi
  00059	83 c0 01	 add	 eax, 1
  0005c	0f 92 c1	 setb	 cl
  0005f	f7 d9		 neg	 ecx
  00061	0b c8		 or	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00063	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00069	72 23		 jb	 SHORT $LN57@Reallocate

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0006b	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0006e	83 ca ff	 or	 edx, -1
  00071	3b c1		 cmp	 eax, ecx
  00073	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007c	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  0007f	85 c0		 test	 eax, eax
  00081	74 73		 je	 SHORT $LN99@Reallocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00083	8d 78 23	 lea	 edi, DWORD PTR [eax+35]
  00086	83 e7 e0	 and	 edi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00089	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  0008c	eb 13		 jmp	 SHORT $LN56@Reallocate
$LN57@Reallocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0008e	85 c9		 test	 ecx, ecx
  00090	74 0d		 je	 SHORT $LN58@Reallocate

; 52   : 		return (::operator new(_Bytes));

  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00098	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  0009b	8b f8		 mov	 edi, eax
  0009d	eb 02		 jmp	 SHORT $LN56@Reallocate
$LN58@Reallocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  0009f	33 ff		 xor	 edi, edi
$LN56@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3934 : 		_My_data._Mysize = _New_size;

  000a1	8b 45 f8	 mov	 eax, DWORD PTR __New_size$1$[ebp]
  000a4	89 43 10	 mov	 DWORD PTR [ebx+16], eax

; 3935 : 		_My_data._Myres = _New_capacity;
; 3936 : 		_Elem * const _Raw_new = _Unfancy(_New_ptr);

  000a7	8b 45 f4	 mov	 eax, DWORD PTR __Old_size$1$[ebp]
  000aa	40		 inc	 eax
  000ab	89 73 14	 mov	 DWORD PTR [ebx+20], esi

; 3937 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000ae	83 7d fc 10	 cmp	 DWORD PTR __Old$1$[ebp], 16 ; 00000010H
  000b2	50		 push	 eax
  000b3	72 47		 jb	 SHORT $LN3@Reallocate

; 3938 : 			{
; 3939 : 			const pointer _Old_ptr = _My_data._Bx._Ptr;

  000b5	8b 33		 mov	 esi, DWORD PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000b7	56		 push	 esi
  000b8	57		 push	 edi
  000b9	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000be	8b 4d fc	 mov	 ecx, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3941 : 			_Al.deallocate(_Old_ptr, _Old_capacity + 1);

  000c4	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000c5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000cb	72 12		 jb	 SHORT $LN102@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000cd	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000d0	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000d3	2b f2		 sub	 esi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000d5	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000d8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000db	77 19		 ja	 SHORT $LN99@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000dd	8b f2		 mov	 esi, edx
$LN102@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000df	51		 push	 ecx
  000e0	56		 push	 esi
  000e1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000e6	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  000e9	89 3b		 mov	 DWORD PTR [ebx], edi
  000eb	8b c3		 mov	 eax, ebx
  000ed	5f		 pop	 edi
  000ee	5e		 pop	 esi
  000ef	5b		 pop	 ebx

; 3951 : 		}

  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c2 08 00	 ret	 8
$LN99@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000fc	53		 push	 ebx
  000fd	57		 push	 edi
  000fe	e8 00 00 00 00	 call	 _memcpy
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3950 : 		return (*this);

  00106	89 3b		 mov	 DWORD PTR [ebx], edi
  00108	8b c3		 mov	 eax, ebx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx

; 3951 : 		}

  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 08 00	 ret	 8
$LN119@Reallocate:

; 3924 : 			{
; 3925 : 			_Xlen();	// result too long

  00113	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN117@Reallocate:
  00118	cc		 int	 3
??$_Reallocate_grow_by@V<lambda_67d87d4aa1269033985980465fd1d824>@@$$V@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@IV<lambda_67d87d4aa1269033985980465fd1d824>@@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_67d87d4aa1269033985980465fd1d824> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$insert@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@0@Z
_TEXT	SEGMENT
$T9 = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$insert@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@0@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::insert<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const *>, COMDAT
; _this$ = ecx

; 1339 : 		{	// insert [_First, _Last) one at a time

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00009	8b d9		 mov	 ebx, ecx

; 1340 : 		_Adl_verify_range(_First, _Last);
; 1341 : 		auto _UFirst = _Get_unwrapped(_First);
; 1342 : 		const auto _ULast = _Get_unwrapped(_Last);
; 1343 : 		for (; _UFirst != _ULast; ++_UFirst)

  0000b	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  0000e	74 25		 je	 SHORT $LN3@insert
  00010	57		 push	 edi
$LL4@insert:

; 42   : 		: _Ptr(_Pnode)

  00011	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  00013	8b cb		 mov	 ecx, ebx
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  0001b	50		 push	 eax
  0001c	83 c0 10	 add	 eax, 16			; 00000010H
  0001f	8b cb		 mov	 ecx, ebx
  00021	50		 push	 eax
  00022	57		 push	 edi
  00023	8d 45 fc	 lea	 eax, DWORD PTR $T9[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>

; 1340 : 		_Adl_verify_range(_First, _Last);
; 1341 : 		auto _UFirst = _Get_unwrapped(_First);
; 1342 : 		const auto _ULast = _Get_unwrapped(_Last);
; 1343 : 		for (; _UFirst != _ULast; ++_UFirst)

  0002c	83 c6 1c	 add	 esi, 28			; 0000001cH
  0002f	3b 75 0c	 cmp	 esi, DWORD PTR __Last$[ebp]
  00032	75 dd		 jne	 SHORT $LL4@insert
  00034	5f		 pop	 edi
$LN3@insert:
  00035	5e		 pop	 esi

; 1344 : 			{
; 1345 : 			emplace_hint(end(), *_UFirst);
; 1346 : 			}
; 1347 : 		}

  00036	5b		 pop	 ebx
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c2 08 00	 ret	 8
??$insert@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@0@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::insert<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@E@std@@V?$_Vector_val@U?$_Simple_types@E@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1>::_Compressed_pair<std::allocator<unsigned char>,std::_Vector_val<std::_Simple_types<unsigned char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00016	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned char> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
??$_Unfancy@_W@std@@YAPA_WPA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT
; __Ptr$ = ecx

; 346  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 347  : 	}

  00002	c3		 ret	 0
??$_Unfancy@_W@std@@YAPA_WPA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00010	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z
_TEXT	SEGMENT
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z PROC		; std::addressof<wchar_t *>, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z ENDP		; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QAPA_W@Z
_TEXT	SEGMENT
??$destroy@PA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QAPA_W@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QAPA_W@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z
_TEXT	SEGMENT
__Old$1$ = -8						; size = 4
_<_Args_0>$GSCopy$1$ = -4				; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>, COMDAT
; _this$ = ecx

; 3887 : 		{	// reallocate to store exactly _New_size elements, new buffer prepared by

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 10	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi

; 3888 : 			// _Fn(_New_ptr, _New_size, _Args...)
; 3889 : 		if (_New_size > max_size())

  0000b	8b 75 08	 mov	 esi, DWORD PTR __New_size$[ebp]
  0000e	8b d9		 mov	 ebx, ecx
  00010	89 45 fc	 mov	 DWORD PTR _<_Args_0>$GSCopy$1$[ebp], eax
  00013	57		 push	 edi
  00014	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH
  0001a	0f 87 f9 00 00
	00		 ja	 $LN119@Reallocate

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00020	8b 4b 14	 mov	 ecx, DWORD PTR [ebx+20]

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00023	83 ce 07	 or	 esi, 7

; 3892 : 			}
; 3893 : 
; 3894 : 		auto& _My_data = this->_Get_data();
; 3895 : 		const size_type _Old_capacity = _My_data._Myres;

  00026	89 4d f8	 mov	 DWORD PTR __Old$1$[ebp], ecx

; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00029	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 3870 : 		if (_Masked > _Max)

  0002f	76 07		 jbe	 SHORT $LN25@Reallocate

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);

  00031	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00036	eb 1e		 jmp	 SHORT $LN24@Reallocate
$LN25@Reallocate:

; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;
; 3876 : 		if (_Old > _Max - _Old / 2)

  00038	8b d1		 mov	 edx, ecx
  0003a	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0003f	d1 ea		 shr	 edx, 1
  00041	2b c2		 sub	 eax, edx
  00043	3b c8		 cmp	 ecx, eax
  00045	76 07		 jbe	 SHORT $LN26@Reallocate

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00047	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  0004c	eb 08		 jmp	 SHORT $LN24@Reallocate
$LN26@Reallocate:

; 3879 : 			}
; 3880 : 
; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0004e	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00051	3b f0		 cmp	 esi, eax
  00053	0f 42 f0	 cmovb	 esi, eax
$LN24@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3898 : 		const pointer _New_ptr = _Al.allocate(_New_capacity + 1); // throws

  00056	33 c9		 xor	 ecx, ecx
  00058	8b c6		 mov	 eax, esi
  0005a	83 c0 01	 add	 eax, 1
  0005d	0f 92 c1	 setb	 cl
  00060	f7 d9		 neg	 ecx
  00062	0b c8		 or	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00064	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]

; 26   : 	if (_Max_possible < _Count)

  00067	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  0006d	76 05		 jbe	 SHORT $LN55@Reallocate

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  0006f	83 ca ff	 or	 edx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00072	eb 08		 jmp	 SHORT $LN116@Reallocate
$LN55@Reallocate:
  00074	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0007a	72 23		 jb	 SHORT $LN58@Reallocate
$LN116@Reallocate:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0007c	8d 42 23	 lea	 eax, DWORD PTR [edx+35]

; 94   : 	if (_Block_size <= _Bytes)

  0007f	83 c9 ff	 or	 ecx, -1
  00082	3b c2		 cmp	 eax, edx
  00084	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  00087	50		 push	 eax
  00088	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0008d	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00090	85 c0		 test	 eax, eax
  00092	74 7f		 je	 SHORT $LN102@Reallocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00094	8d 78 23	 lea	 edi, DWORD PTR [eax+35]
  00097	83 e7 e0	 and	 edi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0009a	89 47 fc	 mov	 DWORD PTR [edi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  0009d	eb 13		 jmp	 SHORT $LN57@Reallocate
$LN58@Reallocate:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  0009f	85 d2		 test	 edx, edx
  000a1	74 0d		 je	 SHORT $LN59@Reallocate

; 52   : 		return (::operator new(_Bytes));

  000a3	52		 push	 edx
  000a4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a9	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000ac	8b f8		 mov	 edi, eax
  000ae	eb 02		 jmp	 SHORT $LN57@Reallocate
$LN59@Reallocate:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000b0	33 ff		 xor	 edi, edi
$LN57@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3900 : 		_My_data._Mysize = _New_size;

  000b2	8b 45 08	 mov	 eax, DWORD PTR __New_size$[ebp]

; 3901 : 		_My_data._Myres = _New_capacity;

  000b5	89 73 14	 mov	 DWORD PTR [ebx+20], esi
  000b8	89 43 10	 mov	 DWORD PTR [ebx+16], eax
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000bb	8d 34 00	 lea	 esi, DWORD PTR [eax+eax]
  000be	56		 push	 esi
  000bf	ff 75 fc	 push	 DWORD PTR _<_Args_0>$GSCopy$1$[ebp]
  000c2	57		 push	 edi
  000c3	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000c8	8b 4d f8	 mov	 ecx, DWORD PTR __Old$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  000cb	33 c0		 xor	 eax, eax
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000cd	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  000d0	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3903 : 		if (this->_BUF_SIZE <= _Old_capacity)

  000d4	83 f9 08	 cmp	 ecx, 8
  000d7	72 2d		 jb	 SHORT $LN3@Reallocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000d9	8b 03		 mov	 eax, DWORD PTR [ebx]
  000db	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000e2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000e8	72 12		 jb	 SHORT $LN105@Reallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000ea	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000ed	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f0	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000f2	83 c0 fc	 add	 eax, -4			; fffffffcH
  000f5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000f8	77 19		 ja	 SHORT $LN102@Reallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000fa	8b c2		 mov	 eax, edx
$LN105@Reallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000fc	51		 push	 ecx
  000fd	50		 push	 eax
  000fe	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00103	83 c4 08	 add	 esp, 8
$LN3@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3913 : 		return (*this);

  00106	89 3b		 mov	 DWORD PTR [ebx], edi
  00108	8b c3		 mov	 eax, ebx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx

; 3914 : 		}

  0010d	8b e5		 mov	 esp, ebp
  0010f	5d		 pop	 ebp
  00110	c2 0c 00	 ret	 12			; 0000000cH
$LN102@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00113	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN119@Reallocate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3891 : 			_Xlen();	// result too long

  00119	e8 00 00 00 00	 call	 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN117@Reallocate:
  0011e	cc		 int	 3
??$_Reallocate_for@V<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@IV<lambda_03628ca18370b1f44a99b655e704819b>@@PB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Reallocate_for<<lambda_03628ca18370b1f44a99b655e704819b>,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PA_WABQA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QAPA_WABQA_W@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PA_WABQA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QAPA_WABQA_W@Z PROC ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * const &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@PA_WABQA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@QAPA_WABQA_W@Z ENDP ; std::_Default_allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00000	6a 2c		 push	 44			; 0000002cH
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 415  : 			}

  0000b	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABU?$less@PAUHKEY__@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PAUHKEY__@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
_<_Val2_0>$dead$ = 16					; size = 4
??$?0ABU?$less@PAUHKEY__@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PAUHKEY__@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1><std::less<HKEY__ *> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 469  : 		_Mysize(0)

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  0000f	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABU?$less@PAUHKEY__@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PAUHKEY__@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1><std::less<HKEY__ *> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1154 : 	{	// destroy [_First, _Last), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b fa		 mov	 edi, edx
  00007	8b f1		 mov	 esi, ecx

; 1134 : 	for (; _First != _Last; ++_First)

  00009	3b f7		 cmp	 esi, edi
  0000b	74 4a		 je	 SHORT $LN83@Destroy_ra
  0000d	0f 1f 00	 npad	 3
$LL6@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00016	72 27		 jb	 SHORT $LN58@Destroy_ra
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001a	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN57@Destroy_ra

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN54@Destroy_ra

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN57@Destroy_ra:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN58@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 1134 : 	for (; _First != _Last; ++_First)

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL6@Destroy_ra
$LN83@Destroy_ra:
  00057	5f		 pop	 edi

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN54@Destroy_ra:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN84@Destroy_ra:
  00061	cc		 int	 3
??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$01@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$01@std@@YAII@Z PROC			; std::_Get_size_of_n<2>, COMDAT
; __Count$ = ecx

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;
; 26   : 	if (_Max_possible < _Count)

  00000	83 ca ff	 or	 edx, -1
  00003	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  00006	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH
  0000c	0f 47 c2	 cmova	 eax, edx

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

  0000f	c3		 ret	 0
??$_Get_size_of_n@$01@std@@YAII@Z ENDP			; std::_Get_size_of_n<2>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAPAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAPAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAU10@@Z PROC ; std::addressof<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAPAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
_TEXT	SEGMENT
??$destroy@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::destroy<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 886  : 		{	// destroy object at _Ptr

  00000	56		 push	 esi
  00001	8b f2		 mov	 esi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00006	83 f9 08	 cmp	 ecx, 8

; 3987 : 		if (_My_data._Large_string_engaged())

  00009	72 2e		 jb	 SHORT $LN52@destroy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000e	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00015	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001b	72 12		 jb	 SHORT $LN51@destroy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00020	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00023	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00025	83 c0 fc	 add	 eax, -4			; fffffffcH
  00028	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002b	77 22		 ja	 SHORT $LN48@destroy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002d	8b c2		 mov	 eax, edx
$LN51@destroy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002f	51		 push	 ecx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00036	83 c4 08	 add	 esp, 8
$LN52@destroy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00039	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00040	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00042	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00049	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  0004d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 888  : 		}

  0004e	c3		 ret	 0
$LN48@destroy:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN72@destroy:
  00055	cc		 int	 3
??$destroy@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::destroy<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAEPAEV?$allocator@E@std@@@std@@YAPAEQAE0PAEAAV?$allocator@E@0@@Z
_TEXT	SEGMENT
$T4 = -1						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAEPAEV?$allocator@E@std@@@std@@YAPAEQAE0PAEAAV?$allocator@E@0@@Z PROC ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000a	8b f1		 mov	 esi, ecx

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);
; 254  : 	const auto _ULast = _Get_unwrapped(_Last);
; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 256  : 	_Seek_wrapped(_Dest,

  0000c	51		 push	 ecx
  0000d	8d 4d ff	 lea	 ecx, DWORD PTR $T4[ebp]
  00010	8b da		 mov	 ebx, edx
  00012	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z ; std::_Ptr_move_cat<unsigned char,unsigned char>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00017	2b de		 sub	 ebx, esi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00024	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 260  : 	return (_Dest);

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 261  : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninitialized_move@PAEPAEV?$allocator@E@std@@@std@@YAPAEQAE0PAEAAV?$allocator@E@0@@Z ENDP ; std::_Uninitialized_move<unsigned char *,unsigned char *,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAEPAE@std@@YAHABQAE0@Z
_TEXT	SEGMENT
??$_Idl_distance@PAEPAE@std@@YAHABQAE0@Z PROC		; std::_Idl_distance<unsigned char *,unsigned char *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	2b 01		 sub	 eax, DWORD PTR [ecx]

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00004	c3		 ret	 0
??$_Idl_distance@PAEPAE@std@@YAHABQAE0@Z ENDP		; std::_Idl_distance<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$addressof@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAPAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::construct<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> * &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::construct<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0CM@@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$0CM@@std@@YAII@Z PROC		; std::_Get_size_of_n<44>, COMDAT
; __Count$dead$ = ecx

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;
; 26   : 	if (_Max_possible < _Count)
; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

  00000	b8 2c 00 00 00	 mov	 eax, 44			; 0000002cH

; 33   : 	}

  00005	c3		 ret	 0
??$_Get_size_of_n@$0CM@@std@@YAII@Z ENDP		; std::_Get_size_of_n<44>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??_G?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_G?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAXI@Z PROC ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00009	83 f9 08	 cmp	 ecx, 8

; 3987 : 		if (_My_data._Large_string_engaged())

  0000c	72 2e		 jb	 SHORT $LN50@scalar
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00011	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 12		 jb	 SHORT $LN49@scalar

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00020	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00023	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00026	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00028	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002e	77 27		 ja	 SHORT $LN46@scalar

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00030	8b c2		 mov	 eax, edx
$LN49@scalar:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00032	51		 push	 ecx
  00033	50		 push	 eax
  00034	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00039	83 c4 08	 add	 esp, 8
$LN50@scalar:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0003c	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0003e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00045	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0004c	66 89 46 04	 mov	 WORD PTR [esi+4], ax
  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN46@scalar:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN69@scalar:
  0005d	cc		 int	 3
??_G?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAXI@Z ENDP ; std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::deallocate, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 871  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 	::operator delete(_Ptr, _Bytes);

  00003	6a 2c		 push	 44			; 0000002cH
  00005	52		 push	 edx
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
; 874  : 		}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 393  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<unsigned char> >::_Vector_val<std::_Simple_types<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 393  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range, COMDAT
; _this$dead$ = ecx

; 1960 : 		}

  00000	c2 08 00	 ret	 8
?_Orphan_range@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@0@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABE_NXZ
_TEXT	SEGMENT
?_Has_unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABE_NXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1726 : 		return (this->_Myend() != this->_Mylast());

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	3b 41 04	 cmp	 eax, DWORD PTR [ecx+4]
  00006	0f 95 c0	 setne	 al

; 1727 : 		}

  00009	c3		 ret	 0
?_Has_unused_capacity@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABE_NXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size, COMDAT
; _this$ = ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	c1 fa 02	 sar	 edx, 2
  0000f	8b c2		 mov	 eax, edx
  00011	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00014	03 c2		 add	 eax, edx

; 1705 : 		}

  00016	c3		 ret	 0
?size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear, COMDAT
; _this$ = ecx

; 1589 : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00003	51		 push	 ecx
  00004	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00007	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00009	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1590 : 		this->_Orphan_all();
; 1591 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1592 : 		this->_Mylast() = this->_Myfirst();

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00010	83 c4 04	 add	 esp, 4

; 1590 : 		this->_Orphan_all();
; 1591 : 		_Destroy(this->_Myfirst(), this->_Mylast());
; 1592 : 		this->_Mylast() = this->_Myfirst();

  00013	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00016	5e		 pop	 esi

; 1593 : 		}

  00017	c3		 ret	 0
?clear@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]

; 1854 : 		const size_type _Oldcapacity = capacity();
; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00006	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]

; 1854 : 		const size_type _Oldcapacity = capacity();
; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  0000d	8b ca		 mov	 ecx, edx
  0000f	d1 e9		 shr	 ecx, 1
  00011	2b c1		 sub	 eax, ecx
  00013	3b d0		 cmp	 edx, eax
  00015	77 08		 ja	 SHORT $LN31@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow
; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00017	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  0001a	3b 45 08	 cmp	 eax, DWORD PTR __Newsize$[ebp]
  0001d	73 03		 jae	 SHORT $LN1@Calculate_
$LN31@Calculate_:

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

  0001f	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
$LN1@Calculate_:

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient
; 1869 : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@EV?$allocator@E@std@@@std@@ABEII@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@EV?$allocator@E@std@@@std@@AAEPAEPAE00@Z
_TEXT	SEGMENT
$T6 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@EV?$allocator@E@std@@@std@@AAEPAEPAE00@Z PROC ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove, COMDAT
; _this$dead$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 256  : 	_Seek_wrapped(_Dest,

  0000f	51		 push	 ecx
  00010	8d 4d ff	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z ; std::_Ptr_move_cat<unsigned char,unsigned char>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	2b fa		 sub	 edi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0001a	57		 push	 edi
  0001b	52		 push	 edx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1829 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@EV?$allocator@E@std@@@std@@AAEPAEPAE00@Z ENDP ; std::vector<unsigned char,std::allocator<unsigned char> >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?data@?$vector@EV?$allocator@E@std@@@std@@QAEPAEXZ
_TEXT	SEGMENT
?data@?$vector@EV?$allocator@E@std@@@std@@QAEPAEXZ PROC	; std::vector<unsigned char,std::allocator<unsigned char> >::data, COMDAT
; _this$ = ecx

; 1609 : 		return (_Unfancy_maybe_null(this->_Myfirst()));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1610 : 		}

  00002	c3		 ret	 0
?data@?$vector@EV?$allocator@E@std@@@std@@QAEPAEXZ ENDP	; std::vector<unsigned char,std::allocator<unsigned char> >::data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@E@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@E@std@@QAE@XZ PROC			; std::allocator<unsigned char>::allocator<unsigned char>, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@E@std@@QAE@XZ ENDP			; std::allocator<unsigned char>::allocator<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1787 : 		}

  00007	8b c1		 mov	 eax, ecx
  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00010	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEII@Z
_TEXT	SEGMENT
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 3866 : 		{	// determines the next array size to allocate

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3867 : 		const size_type _Max = max_size();
; 3868 : 		auto& _My_data = this->_Get_data();
; 3869 : 		const size_type _Masked = _Requested | this->_ALLOC_MASK;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Requested$[ebp]
  00006	83 ca 07	 or	 edx, 7
  00009	56		 push	 esi
  0000a	81 fa fe ff ff
	7f		 cmp	 edx, 2147483646		; 7ffffffeH

; 3870 : 		if (_Masked > _Max)

  00010	77 21		 ja	 SHORT $LN25@Calculate_

; 3871 : 			{	// the mask overflows, settle for max_size()
; 3872 : 			return (_Max);
; 3873 : 			}
; 3874 : 
; 3875 : 		const size_type _Old = _My_data._Myres;

  00012	8b 71 14	 mov	 esi, DWORD PTR [ecx+20]

; 3876 : 		if (_Old > _Max - _Old / 2)

  00015	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0001a	8b ce		 mov	 ecx, esi
  0001c	d1 e9		 shr	 ecx, 1
  0001e	2b c1		 sub	 eax, ecx
  00020	3b f0		 cmp	 esi, eax
  00022	77 0f		 ja	 SHORT $LN25@Calculate_

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  00024	8d 04 31	 lea	 eax, DWORD PTR [ecx+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00027	3b d0		 cmp	 edx, eax
  00029	5e		 pop	 esi
  0002a	0f 42 d0	 cmovb	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3881 : 		return (_Max_value(_Masked, _Old + _Old / 2));

  0002d	8b c2		 mov	 eax, edx

; 3882 : 		}

  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
$LN25@Calculate_:

; 3877 : 			{	// similarly, geometric overflows
; 3878 : 			return (_Max);

  00033	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00038	5e		 pop	 esi

; 3882 : 		}

  00039	5d		 pop	 ebp
  0003a	c2 04 00	 ret	 4
?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
_TEXT	SEGMENT
__Ptr$dead$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00000	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 3768 : 		auto& _My_data = this->_Get_data();
; 3769 : 		return (_Traits_equal<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Ptr, _Traits::length(_Ptr)));

  00004	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 1815 : 		if (_Large_string_engaged())

  00007	72 02		 jb	 SHORT $LN10@Equal
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00009	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN10@Equal:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  0000b	83 f8 01	 cmp	 eax, 1
  0000e	75 19		 jne	 SHORT $LN18@Equal
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));

  00010	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  00013	3c 3f		 cmp	 al, 63			; 0000003fH
  00015	75 04		 jne	 SHORT $LN22@Equal
  00017	33 c0		 xor	 eax, eax
  00019	eb 05		 jmp	 SHORT $LN23@Equal
$LN22@Equal:
  0001b	1b c0		 sbb	 eax, eax
  0001d	83 c8 01	 or	 eax, 1
$LN23@Equal:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00020	85 c0		 test	 eax, eax
  00022	75 05		 jne	 SHORT $LN18@Equal
  00024	b0 01		 mov	 al, 1

; 3770 : 		}

  00026	c2 04 00	 ret	 4
$LN18@Equal:

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00029	32 c0		 xor	 al, al

; 3770 : 		}

  0002b	c2 04 00	 ret	 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$ = -4				; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
__Count$ = 16						; size = 4
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT
; _this$ = ecx

; 3755 : 		{	// return [_Off, _Off + _Count) as new string

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp]
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Off$[ebp]
  0000f	89 75 fc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$[ebp], esi

; 3976 : 		_My_data._Mysize = 0;

  00012	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00019	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00020	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1830 : 		if (_Mysize < _Off)

  00023	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00026	3b c7		 cmp	 eax, edi
  00028	72 24		 jb	 SHORT $LN56@substr

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  0002a	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0002c	3b c2		 cmp	 eax, edx
  0002e	0f 42 d0	 cmovb	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00031	83 79 14 10	 cmp	 DWORD PTR [ecx+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00035	72 02		 jb	 SHORT $LN46@substr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00037	8b 09		 mov	 ecx, DWORD PTR [ecx]
$LN46@substr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2635 : 		return (assign(_Right_data._Myptr() + _Roff, _Count));

  00039	03 cf		 add	 ecx, edi
  0003b	52		 push	 edx
  0003c	51		 push	 ecx
  0003d	8b ce		 mov	 ecx, esi
  0003f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3756 : 		return (basic_string(*this, _Off, _Count, get_allocator()));

  00044	5f		 pop	 edi
  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi

; 3757 : 		}

  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
$LN56@substr:

; 1832 : 			_Xran();

  0004e	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN54@substr:
  00053	cc		 int	 3
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z
_TEXT	SEGMENT
$T9 = -8						; size = 4
__Result$1$ = -4					; size = 4
__Possible_matches_end$1$ = 8				; size = 4
__Right$ = 8						; size = 4
tv313 = 12						; size = 4
__Off$ = 12						; size = 4
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find, COMDAT
; _this$ = ecx

; 3496 : 		{	// look for _Right beginning at or after _Off

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 3497 : 		auto& _My_data = this->_Get_data();
; 3498 : 		auto& _Right_data = _Right._Get_data();
; 3499 : 		return (static_cast<size_type>(

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Right$[ebp]
  0000a	8b d1		 mov	 edx, ecx
  0000c	56		 push	 esi
  0000d	89 4d fc	 mov	 DWORD PTR __Result$1$[ebp], ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00010	83 7b 14 10	 cmp	 DWORD PTR [ebx+20], 16	; 00000010H

; 3497 : 		auto& _My_data = this->_Get_data();
; 3498 : 		auto& _Right_data = _Right._Get_data();
; 3499 : 		return (static_cast<size_type>(

  00014	8b 73 10	 mov	 esi, DWORD PTR [ebx+16]
  00017	89 75 f8	 mov	 DWORD PTR $T9[ebp], esi

; 1815 : 		if (_Large_string_engaged())

  0001a	72 02		 jb	 SHORT $LN12@find
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0001c	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$LN12@find:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0001e	83 7a 14 10	 cmp	 DWORD PTR [edx+20], 16	; 00000010H

; 3497 : 		auto& _My_data = this->_Get_data();
; 3498 : 		auto& _Right_data = _Right._Get_data();
; 3499 : 		return (static_cast<size_type>(

  00022	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]

; 1815 : 		if (_Large_string_engaged())

  00025	72 05		 jb	 SHORT $LN19@find
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00027	8b 12		 mov	 edx, DWORD PTR [edx]
  00029	89 55 fc	 mov	 DWORD PTR __Result$1$[ebp], edx
$LN19@find:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 58   : 	if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size)

  0002c	3b f1		 cmp	 esi, ecx
  0002e	0f 87 d2 00 00
	00		 ja	 $LN30@find
  00034	8b 45 0c	 mov	 eax, DWORD PTR __Off$[ebp]
  00037	2b ce		 sub	 ecx, esi
  00039	3b c1		 cmp	 eax, ecx
  0003b	0f 87 c5 00 00
	00		 ja	 $LN30@find

; 59   : 		{	// xpos cannot exist, report failure
; 60   : 			// N4659 24.3.2.7.2 [string.find]/1 says:
; 61   : 			// 1. _Start_at <= xpos
; 62   : 			// 2. xpos + _Needle_size <= _Hay_size;
; 63   : 			// therefore:
; 64   : 			// 3. _Needle_size <= _Hay_size (by 2) (checked above)
; 65   : 			// 4. _Start_at + _Needle_size <= _Hay_size (substitute 1 into 2)
; 66   : 			// 5. _Start_at <= _Hay_size - _Needle_size (4, move _Needle_size to other side) (also checked above)
; 67   : 		return (static_cast<size_t>(-1));
; 68   : 		}
; 69   : 
; 70   : 	if (_Needle_size == 0)

  00041	85 f6		 test	 esi, esi
  00043	0f 84 a7 00 00
	00		 je	 $LN27@find
  00049	57		 push	 edi

; 75   : 	const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  0004a	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
  0004d	03 fa		 add	 edi, edx

; 76   : 	for (auto _Match_try = _Haystack + _Start_at; ; ++_Match_try)

  0004f	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 486  : 		return (__builtin_char_memchr(_First, _Ch, _Count));

  00052	0f be 13	 movsx	 edx, BYTE PTR [ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 75   : 	const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  00055	89 7d 08	 mov	 DWORD PTR __Possible_matches_end$1$[ebp], edi

; 77   : 		{
; 78   : 		_Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  00058	2b f9		 sub	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 486  : 		return (__builtin_char_memchr(_First, _Ch, _Count));

  0005a	57		 push	 edi
  0005b	52		 push	 edx
  0005c	51		 push	 ecx
  0005d	89 55 0c	 mov	 DWORD PTR tv313[ebp], edx
  00060	e8 00 00 00 00	 call	 _memchr
  00065	8b f8		 mov	 edi, eax
  00067	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 79   : 		if (!_Match_try)

  0006a	85 ff		 test	 edi, edi
  0006c	74 7e		 je	 SHORT $LN40@find
  0006e	66 90		 npad	 2
$LL28@find:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));

  00070	8b d7		 mov	 edx, edi
  00072	8b c3		 mov	 eax, ebx
  00074	83 ee 04	 sub	 esi, 4
  00077	72 18		 jb	 SHORT $LN47@find
  00079	0f 1f 80 00 00
	00 00		 npad	 7
$LL48@find:
  00080	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00082	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00084	75 10		 jne	 SHORT $LN46@find
  00086	83 c2 04	 add	 edx, 4
  00089	83 c0 04	 add	 eax, 4
  0008c	83 ee 04	 sub	 esi, 4
  0008f	73 ef		 jae	 SHORT $LL48@find
$LN47@find:
  00091	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00094	74 34		 je	 SHORT $LN45@find
$LN46@find:
  00096	8a 0a		 mov	 cl, BYTE PTR [edx]
  00098	3a 08		 cmp	 cl, BYTE PTR [eax]
  0009a	75 27		 jne	 SHORT $LN49@find
  0009c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0009f	74 29		 je	 SHORT $LN45@find
  000a1	8a 4a 01	 mov	 cl, BYTE PTR [edx+1]
  000a4	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  000a7	75 1a		 jne	 SHORT $LN49@find
  000a9	83 fe fe	 cmp	 esi, -2			; fffffffeH
  000ac	74 1c		 je	 SHORT $LN45@find
  000ae	8a 4a 02	 mov	 cl, BYTE PTR [edx+2]
  000b1	3a 48 02	 cmp	 cl, BYTE PTR [eax+2]
  000b4	75 0d		 jne	 SHORT $LN49@find
  000b6	83 fe ff	 cmp	 esi, -1
  000b9	74 0f		 je	 SHORT $LN45@find
  000bb	8a 4a 03	 mov	 cl, BYTE PTR [edx+3]
  000be	3a 48 03	 cmp	 cl, BYTE PTR [eax+3]
  000c1	74 07		 je	 SHORT $LN45@find
$LN49@find:
  000c3	1b c0		 sbb	 eax, eax
  000c5	83 c8 01	 or	 eax, 1
  000c8	eb 02		 jmp	 SHORT $LN50@find
$LN45@find:
  000ca	33 c0		 xor	 eax, eax
$LN50@find:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 84   : 		if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0)

  000cc	85 c0		 test	 eax, eax
  000ce	74 28		 je	 SHORT $LN41@find

; 76   : 	for (auto _Match_try = _Haystack + _Start_at; ; ++_Match_try)

  000d0	8b 45 08	 mov	 eax, DWORD PTR __Possible_matches_end$1$[ebp]
  000d3	47		 inc	 edi

; 77   : 		{
; 78   : 		_Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  000d4	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 486  : 		return (__builtin_char_memchr(_First, _Ch, _Count));

  000d6	50		 push	 eax
  000d7	ff 75 0c	 push	 DWORD PTR tv313[ebp]
  000da	57		 push	 edi
  000db	e8 00 00 00 00	 call	 _memchr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 79   : 		if (!_Match_try)

  000e0	8b 75 f8	 mov	 esi, DWORD PTR $T9[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 486  : 		return (__builtin_char_memchr(_First, _Ch, _Count));

  000e3	8b f8		 mov	 edi, eax
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 79   : 		if (!_Match_try)

  000e8	85 ff		 test	 edi, edi
  000ea	75 84		 jne	 SHORT $LL28@find
$LN40@find:

; 3497 : 		auto& _My_data = this->_Get_data();
; 3498 : 		auto& _Right_data = _Right._Get_data();
; 3499 : 		return (static_cast<size_type>(

  000ec	83 c8 ff	 or	 eax, -1
  000ef	5f		 pop	 edi
$LN27@find:

; 3500 : 			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
; 3501 : 				_Right_data._Myptr(), _Right_data._Mysize)));
; 3502 : 		}

  000f0	5e		 pop	 esi
  000f1	5b		 pop	 ebx
  000f2	8b e5		 mov	 esp, ebp
  000f4	5d		 pop	 ebp
  000f5	c2 08 00	 ret	 8
$LN41@find:

; 86   : 			return (static_cast<size_t>(_Match_try - _Haystack));

  000f8	2b 7d fc	 sub	 edi, DWORD PTR __Result$1$[ebp]

; 3497 : 		auto& _My_data = this->_Get_data();
; 3498 : 		auto& _Right_data = _Right._Get_data();
; 3499 : 		return (static_cast<size_type>(

  000fb	8b c7		 mov	 eax, edi
  000fd	5f		 pop	 edi
  000fe	5e		 pop	 esi

; 3500 : 			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
; 3501 : 				_Right_data._Myptr(), _Right_data._Mysize)));
; 3502 : 		}

  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 08 00	 ret	 8
$LN30@find:
  00106	5e		 pop	 esi

; 3497 : 		auto& _My_data = this->_Get_data();
; 3498 : 		auto& _Right_data = _Right._Get_data();
; 3499 : 		return (static_cast<size_type>(

  00107	83 c8 ff	 or	 eax, -1

; 3500 : 			_Traits_find<_Traits>(_My_data._Myptr(), _My_data._Mysize, _Off,
; 3501 : 				_Right_data._Myptr(), _Right_data._Mysize)));
; 3502 : 		}

  0010a	5b		 pop	 ebx
  0010b	8b e5		 mov	 esp, ebp
  0010d	5d		 pop	 ebp
  0010e	c2 08 00	 ret	 8
?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIABV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::find
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 3297 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 3298 : 		}

  00003	c3		 ret	 0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast, COMDAT
; _this$ = ecx

; 591  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 592  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1857 : 			{	// user-provided, for fancy pointers
; 1858 : 			}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT
; _this$dead$ = ecx

; 3861 : 		{	// return allocator object for values

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3862 : 		return (static_cast<allocator_type>(this->_Getal()));

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 3863 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
__Al$dead$ = 20						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2161 : 		{	// construct from _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]

; 1830 : 		if (_Mysize < _Off)

  00006	8b 55 0c	 mov	 edx, DWORD PTR __Roff$[ebp]

; 2161 : 		{	// construct from _Right [_Roff, _Roff + _Count)

  00009	56		 push	 esi
  0000a	8b f1		 mov	 esi, ecx
  0000c	57		 push	 edi

; 3976 : 		_My_data._Mysize = 0;

  0000d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00014	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0001b	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1830 : 		if (_Mysize < _Off)

  0001e	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00021	3b ca		 cmp	 ecx, edx
  00023	72 26		 jb	 SHORT $LN45@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00025	8b 7d 10	 mov	 edi, DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00028	2b ca		 sub	 ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0002a	3b cf		 cmp	 ecx, edi
  0002c	0f 42 f9	 cmovb	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0002f	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00033	72 02		 jb	 SHORT $LN36@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00035	8b 00		 mov	 eax, DWORD PTR [eax]
$LN36@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2635 : 		return (assign(_Right_data._Myptr() + _Roff, _Count));

  00037	8d 0c 10	 lea	 ecx, DWORD PTR [eax+edx]
  0003a	57		 push	 edi
  0003b	51		 push	 ecx
  0003c	8b ce		 mov	 ecx, esi
  0003e	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2162 : 		_Tidy_init();
; 2163 : 		assign(_Right, _Roff, _Count);
; 2164 : 		}

  00043	5f		 pop	 edi
  00044	8b c6		 mov	 eax, esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 10 00	 ret	 16			; 00000010H
$LN45@basic_stri:

; 1832 : 			_Xran();

  0004b	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN43@basic_stri:
  00050	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@IIABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2631 : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 55 10	 mov	 edx, DWORD PTR __Count$[ebp]
  00009	56		 push	 esi
  0000a	8b 75 0c	 mov	 esi, DWORD PTR __Roff$[ebp]
  0000d	57		 push	 edi
  0000e	8b f9		 mov	 edi, ecx

; 1830 : 		if (_Mysize < _Off)

  00010	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00013	3b ce		 cmp	 ecx, esi
  00015	72 20		 jb	 SHORT $LN24@assign

; 1851 : 		return (_Min_value(_Size, _Mysize - _Off));

  00017	2b ce		 sub	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00019	3b ca		 cmp	 ecx, edx
  0001b	0f 42 d1	 cmovb	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0001e	83 78 14 10	 cmp	 DWORD PTR [eax+20], 16	; 00000010H

; 1815 : 		if (_Large_string_engaged())

  00022	72 02		 jb	 SHORT $LN16@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00024	8b 00		 mov	 eax, DWORD PTR [eax]
$LN16@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2635 : 		return (assign(_Right_data._Myptr() + _Roff, _Count));

  00026	52		 push	 edx
  00027	03 c6		 add	 eax, esi
  00029	8b cf		 mov	 ecx, edi
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi

; 2636 : 		}

  00033	5d		 pop	 ebp
  00034	c2 0c 00	 ret	 12			; 0000000cH
$LN24@assign:

; 1832 : 			_Xran();

  00037	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN22@assign:
  0003c	cc		 int	 3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z
_TEXT	SEGMENT
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z PROC ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __Ptr$ = ecx

; 346  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 347  : 	}

  00002	c3		 ret	 0
??$_Unfancy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@@Z ENDP ; std::_Unfancy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]

; 1784 : 		_Mysize(0),

  00006	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 1785 : 		_Myres(0)

  0000d	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00014	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00017	0f 11 02	 movups	 XMMWORD PTR [edx], xmm0
  0001a	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0001f	66 0f d6 42 10	 movq	 QWORD PTR [edx+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00024	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0002b	c7 40 14 0f 00
	00 00		 mov	 DWORD PTR [eax+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00032	c6 00 00	 mov	 BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??$construct@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$QAV31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::construct<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z
_TEXT	SEGMENT
tv896 = -20						; size = 4
__Newsize$1$ = -16					; size = 4
_<_Val_0>$GSCopy$1$ = -12				; size = 4
__Whereptr$GSCopy$1$ = -8				; size = 4
tv895 = -4						; size = 4
__Whereoff$1$ = -4					; size = 4
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 942  : 		{	// reallocate and insert by perfectly forwarding _Val at _Whereptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	8b 45 0c	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	89 45 f4	 mov	 DWORD PTR _<_Val_0>$GSCopy$1$[ebp], eax
  00011	8b 4d 08	 mov	 ecx, DWORD PTR __Whereptr$[ebp]

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  00014	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00019	8b d1		 mov	 edx, ecx
  0001b	89 4d f8	 mov	 DWORD PTR __Whereptr$GSCopy$1$[ebp], ecx
  0001e	8b 37		 mov	 esi, DWORD PTR [edi]
  00020	2b d6		 sub	 edx, esi

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00022	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  00025	f7 ea		 imul	 edx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00027	2b ce		 sub	 ecx, esi

; 943  : 			// pre: !_Has_unused_capacity()
; 944  : 		const size_type _Whereoff = static_cast<size_type>(_Whereptr - this->_Myfirst());

  00029	c1 fa 02	 sar	 edx, 2
  0002c	8b c2		 mov	 eax, edx
  0002e	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00031	03 c2		 add	 eax, edx
  00033	89 45 fc	 mov	 DWORD PTR __Whereoff$1$[ebp], eax

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00036	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0003b	f7 e9		 imul	 ecx
  0003d	c1 fa 02	 sar	 edx, 2
  00040	8b da		 mov	 ebx, edx
  00042	c1 eb 1f	 shr	 ebx, 31			; 0000001fH
  00045	03 da		 add	 ebx, edx

; 945  : 		_Alty& _Al = this->_Getal();
; 946  : 		const size_type _Oldsize = size();
; 947  : 
; 948  : 		if (_Oldsize == max_size())

  00047	81 fb aa aa aa
	0a		 cmp	 ebx, 178956970		; 0aaaaaaaH
  0004d	0f 84 7b 01 00
	00		 je	 $LN312@Emplace_re

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00053	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00056	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0005b	2b ce		 sub	 ecx, esi

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  0005d	43		 inc	 ebx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0005e	f7 e9		 imul	 ecx

; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00060	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 951  : 			}
; 952  : 
; 953  : 		const size_type _Newsize = _Oldsize + 1;

  00065	89 5d f0	 mov	 DWORD PTR __Newsize$1$[ebp], ebx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00068	c1 fa 02	 sar	 edx, 2
  0006b	8b ca		 mov	 ecx, edx
  0006d	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00070	03 ca		 add	 ecx, edx

; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00072	8b d1		 mov	 edx, ecx
  00074	d1 ea		 shr	 edx, 1
  00076	2b c2		 sub	 eax, edx
  00078	3b c8		 cmp	 ecx, eax
  0007a	76 04		 jbe	 SHORT $LN48@Emplace_re

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow

  0007c	8b c3		 mov	 eax, ebx
  0007e	eb 08		 jmp	 SHORT $LN49@Emplace_re
$LN48@Emplace_re:

; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  00080	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  00083	3b c3		 cmp	 eax, ebx
  00085	0f 42 c3	 cmovb	 eax, ebx
$LN49@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00088	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0008b	c1 e1 03	 shl	 ecx, 3
  0008e	89 4d ec	 mov	 DWORD PTR tv896[ebp], ecx

; 26   : 	if (_Max_possible < _Count)

  00091	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00096	76 05		 jbe	 SHORT $LN80@Emplace_re

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00098	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  0009b	eb 08		 jmp	 SHORT $LN308@Emplace_re
$LN80@Emplace_re:
  0009d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000a3	72 27		 jb	 SHORT $LN83@Emplace_re
$LN308@Emplace_re:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  000a5	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  000a8	83 ca ff	 or	 edx, -1
  000ab	3b c1		 cmp	 eax, ecx
  000ad	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  000b0	50		 push	 eax
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000b6	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000b9	85 c0		 test	 eax, eax
  000bb	0f 84 07 01 00
	00		 je	 $LN277@Emplace_re

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  000c1	8d 70 23	 lea	 esi, DWORD PTR [eax+35]
  000c4	83 e6 e0	 and	 esi, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000c7	89 46 fc	 mov	 DWORD PTR [esi-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000ca	eb 13		 jmp	 SHORT $LN82@Emplace_re
$LN83@Emplace_re:

; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  000cc	85 c9		 test	 ecx, ecx
  000ce	74 0d		 je	 SHORT $LN84@Emplace_re

; 52   : 		return (::operator new(_Bytes));

  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d6	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000d9	8b f0		 mov	 esi, eax
  000db	eb 02		 jmp	 SHORT $LN82@Emplace_re
$LN84@Emplace_re:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000dd	33 f6		 xor	 esi, esi
$LN82@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000df	8b 45 fc	 mov	 eax, DWORD PTR __Whereoff$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  000e2	8b 4d f4	 mov	 ecx, DWORD PTR _<_Val_0>$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 961  : 		_Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

  000e5	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  000e8	c1 e0 03	 shl	 eax, 3
  000eb	89 45 fc	 mov	 DWORD PTR tv895[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  000ee	c7 44 30 10 00
	00 00 00	 mov	 DWORD PTR [eax+esi+16], 0

; 1785 : 		_Myres(0)

  000f6	c7 44 30 14 00
	00 00 00	 mov	 DWORD PTR [eax+esi+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  000fe	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00101	0f 11 04 30	 movups	 XMMWORD PTR [eax+esi], xmm0
  00105	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  0010a	66 0f d6 44 30
	10		 movq	 QWORD PTR [eax+esi+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 964  : 		if (_Whereptr == this->_Mylast())

  00110	8b 45 f8	 mov	 eax, DWORD PTR __Whereptr$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00113	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0011a	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00121	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 964  : 		if (_Whereptr == this->_Mylast())

  00124	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00126	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00129	51		 push	 ecx
  0012a	56		 push	 esi
  0012b	3b c2		 cmp	 eax, edx
  0012d	74 19		 je	 SHORT $LN310@Emplace_re

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  0012f	8b d0		 mov	 edx, eax
  00131	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
; 967  : 			}
; 968  : 		else
; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);
; 971  : 			_Constructed_first = _Newvec;
; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  00136	8b 45 fc	 mov	 eax, DWORD PTR tv895[ebp]

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00139	83 c4 04	 add	 esp, 4
  0013c	8b 57 04	 mov	 edx, DWORD PTR [edi+4]

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
; 967  : 			}
; 968  : 		else
; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);
; 971  : 			_Constructed_first = _Newvec;
; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  0013f	83 c0 18	 add	 eax, 24			; 00000018H

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00142	8b 4d f8	 mov	 ecx, DWORD PTR __Whereptr$GSCopy$1$[ebp]

; 965  : 			{	// at back, provide strong guarantee
; 966  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
; 967  : 			}
; 968  : 		else
; 969  : 			{	// provide basic guarantee
; 970  : 			_Umove(this->_Myfirst(), _Whereptr, _Newvec);
; 971  : 			_Constructed_first = _Newvec;
; 972  : 			_Umove(_Whereptr, this->_Mylast(), _Newvec + _Whereoff + 1);

  00145	03 c6		 add	 eax, esi

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00147	50		 push	 eax
$LN310@Emplace_re:

; 1898 : 		if (this->_Myfirst() != pointer())

  00148	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0014d	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0014f	83 c4 08	 add	 esp, 8
  00152	85 c9		 test	 ecx, ecx
  00154	74 51		 je	 SHORT $LN281@Emplace_re

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00156	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00159	51		 push	 ecx
  0015a	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0015f	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00162	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00167	8b 1f		 mov	 ebx, DWORD PTR [edi]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00169	83 c4 04	 add	 esp, 4

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0016c	2b cb		 sub	 ecx, ebx
  0016e	f7 e9		 imul	 ecx
  00170	c1 fa 02	 sar	 edx, 2
  00173	8b c2		 mov	 eax, edx
  00175	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00178	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0017a	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  0017d	c1 e1 03	 shl	 ecx, 3

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00180	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00186	72 12		 jb	 SHORT $LN280@Emplace_re

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00188	8b 53 fc	 mov	 edx, DWORD PTR [ebx-4]
  0018b	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0018e	2b da		 sub	 ebx, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00190	8d 43 fc	 lea	 eax, DWORD PTR [ebx-4]
  00193	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00196	77 30		 ja	 SHORT $LN277@Emplace_re

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00198	8b da		 mov	 ebx, edx
$LN280@Emplace_re:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0019a	51		 push	 ecx
  0019b	53		 push	 ebx
  0019c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001a1	8b 5d f0	 mov	 ebx, DWORD PTR __Newsize$1$[ebp]
  001a4	83 c4 08	 add	 esp, 8
$LN281@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1904 : 		this->_Myfirst() = _Newvec;

  001a7	89 37		 mov	 DWORD PTR [edi], esi

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  001a9	8d 04 5b	 lea	 eax, DWORD PTR [ebx+ebx*2]
  001ac	8d 04 c6	 lea	 eax, DWORD PTR [esi+eax*8]
  001af	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  001b2	8b 45 ec	 mov	 eax, DWORD PTR tv896[ebp]
  001b5	03 c6		 add	 eax, esi
  001b7	89 47 08	 mov	 DWORD PTR [edi+8], eax

; 973  : 			}
; 974  : 		_CATCH_ALL
; 975  : 		_Destroy(_Constructed_first, _Constructed_last);
; 976  : 		_Al.deallocate(_Newvec, _Newcapacity);
; 977  : 		_RERAISE;
; 978  : 		_CATCH_END
; 979  : 
; 980  : 		_Change_array(_Newvec, _Newsize, _Newcapacity);
; 981  : 		return (this->_Myfirst() + _Whereoff);

  001ba	8b 07		 mov	 eax, DWORD PTR [edi]
  001bc	03 45 fc	 add	 eax, DWORD PTR tv895[ebp]
  001bf	5f		 pop	 edi
  001c0	5e		 pop	 esi
  001c1	5b		 pop	 ebx

; 982  : 		}

  001c2	8b e5		 mov	 esp, ebp
  001c4	5d		 pop	 ebp
  001c5	c2 08 00	 ret	 8
$LN277@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN312@Emplace_re:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 950  : 			_Xlength();

  001ce	e8 00 00 00 00	 call	 ?_Xlength@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@CAXXZ ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Xlength
$LN309@Emplace_re:
  001d3	cc		 int	 3
??$_Emplace_reallocate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@QAV21@$$QAV21@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_reallocate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@PAUHKEY__@@@std@@YA$$QAPAUHKEY__@@AAPAU1@@Z
_TEXT	SEGMENT
??$forward@PAUHKEY__@@@std@@YA$$QAPAUHKEY__@@AAPAU1@@Z PROC ; std::forward<HKEY__ *>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@PAUHKEY__@@@std@@YA$$QAPAUHKEY__@@AAPAU1@@Z ENDP ; std::forward<HKEY__ *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAY0EF@$$CB_W@std@@YAAAY0EF@$$CB_WAAY0EF@$$CB_W@Z
_TEXT	SEGMENT
??$forward@AAY0EF@$$CB_W@std@@YAAAY0EF@$$CB_WAAY0EF@$$CB_W@Z PROC ; std::forward<wchar_t const (&)[69]>, COMDAT
; __Arg$dead$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_1IK@NJBBFKEK@?$AAS?$AAO?$AAF?$AAT?$AAW?$AAA?$AAR?$AAE?$AA?2?$AAC?$AAl?$AAa?$AAs?$AAs?$AAe@

; 1575 : 	}

  00005	c3		 ret	 0
??$forward@AAY0EF@$$CB_W@std@@YAAAY0EF@$$CB_WAAY0EF@$$CB_W@Z ENDP ; std::forward<wchar_t const (&)[69]>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAY0EP@$$CB_W@std@@YAAAY0EP@$$CB_WAAY0EP@$$CB_W@Z
_TEXT	SEGMENT
??$forward@AAY0EP@$$CB_W@std@@YAAAY0EP@$$CB_WAAY0EP@$$CB_W@Z PROC ; std::forward<wchar_t const (&)[79]>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAY0EP@$$CB_W@std@@YAAAY0EP@$$CB_WAAY0EP@$$CB_W@Z ENDP ; std::forward<wchar_t const (&)[79]>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAY0GI@$$CB_W@std@@YAAAY0GI@$$CB_WAAY0GI@$$CB_W@Z
_TEXT	SEGMENT
??$forward@AAY0GI@$$CB_W@std@@YAAAY0GI@$$CB_WAAY0GI@$$CB_W@Z PROC ; std::forward<wchar_t const (&)[104]>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAY0GI@$$CB_W@std@@YAAAY0GI@$$CB_WAAY0GI@$$CB_W@Z ENDP ; std::forward<wchar_t const (&)[104]>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z PROC ; std::forward<std::allocator<wchar_t> >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ENDP ; std::forward<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z PROC ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00010	c2 08 00	 ret	 8
??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@_W@1@@Z ENDP ; std::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t> >,1><std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Adl_verify_range@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PBU12@@std@@YAXABQBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@0@Z
_TEXT	SEGMENT
??$_Adl_verify_range@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PBU12@@std@@YAXABQBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@0@Z PROC ; std::_Adl_verify_range<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const *,std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const *>, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 588  : 	if constexpr (_Range_verifiable_v<_Iter, _Sentinel>)
; 589  : 		{
; 590  : 		_Verify_range(_First, _Last);
; 591  : 		}
; 592  : 	else
; 593  : 		{
; 594  : 		(void)_First;
; 595  : 		(void)_Last;
; 596  : 		}
; 597  : 	}

  00000	c3		 ret	 0
??$_Adl_verify_range@PBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PBU12@@std@@YAXABQBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@0@Z ENDP ; std::_Adl_verify_range<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const *,std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@$$CBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@QBU10@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@$$CBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@QBU10@@Z PROC ; std::_Get_unwrapped<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const >, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@$$CBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAPBU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@QBU10@@Z ENDP ; std::_Get_unwrapped<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$emplace_hint@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
_<_Val_0>$ = 16						; size = 4
??$emplace_hint@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::emplace_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>, COMDAT
; _this$ = ecx

; 1161 : 		{	// insert value_type(_Val...) at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 1162 : 		_Nodeptr _Newnode = this->_Buynode(_STD forward<_Valty>(_Val)...);

  00004	ff 75 10	 push	 DWORD PTR _<_Val_0>$[ebp]
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 ??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>

; 1163 : 		return (_Insert_hint(_Where, _Newnode->_Myval, _Newnode));

  0000e	50		 push	 eax
  0000f	83 c0 10	 add	 eax, 16			; 00000010H
  00012	8b cf		 mov	 ecx, edi
  00014	50		 push	 eax
  00015	ff 75 0c	 push	 DWORD PTR __Where$[ebp]
  00018	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  0001b	e8 00 00 00 00	 call	 ??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
  00020	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00023	5f		 pop	 edi

; 1164 : 		}

  00024	5d		 pop	 ebp
  00025	c2 0c 00	 ret	 12			; 0000000cH
??$emplace_hint@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::emplace_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range1@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<unsigned char> >, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 1146 : 		// nothing to do
; 1147 : 	}

  00000	c3		 ret	 0
??$_Destroy_range1@V?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z
_TEXT	SEGMENT
??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z PROC		; std::forward<wchar_t * const &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@ABQA_W@std@@YAABQA_WABQA_W@Z ENDP		; std::forward<wchar_t * const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
??$destroy@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::destroy<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::destroy<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABU?$less@PAUHKEY__@@@std@@@std@@YAABU?$less@PAUHKEY__@@@0@ABU10@@Z
_TEXT	SEGMENT
??$forward@ABU?$less@PAUHKEY__@@@std@@@std@@YAABU?$less@PAUHKEY__@@@0@ABU10@@Z PROC ; std::forward<std::less<HKEY__ *> const &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@ABU?$less@PAUHKEY__@@@std@@@std@@YAABU?$less@PAUHKEY__@@@0@ABU10@@Z ENDP ; std::forward<std::less<HKEY__ *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 469  : 		_Mysize(0)

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  0000f	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1133 : 	{	// destroy [_First, _Last), no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b fa		 mov	 edi, edx
  00007	8b f1		 mov	 esi, ecx

; 1134 : 	for (; _First != _Last; ++_First)

  00009	3b f7		 cmp	 esi, edi
  0000b	74 4a		 je	 SHORT $LN80@Destroy_ra
  0000d	0f 1f 00	 npad	 3
$LL4@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00010	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00013	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00016	72 27		 jb	 SHORT $LN56@Destroy_ra
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0001a	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0001b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00021	72 12		 jb	 SHORT $LN55@Destroy_ra

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00023	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00026	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00029	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0002b	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002e	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00031	77 28		 ja	 SHORT $LN52@Destroy_ra

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00033	8b c2		 mov	 eax, edx
$LN55@Destroy_ra:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN56@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0003f	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00046	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0004d	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 1134 : 	for (; _First != _Last; ++_First)

  00050	83 c6 18	 add	 esi, 24			; 00000018H
  00053	3b f7		 cmp	 esi, edi
  00055	75 b9		 jne	 SHORT $LL4@Destroy_ra
$LN80@Destroy_ra:
  00057	5f		 pop	 edi

; 1135 : 		{
; 1136 : 		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1137 : 		}
; 1138 : 	}

  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
$LN52@Destroy_ra:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0005b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN81@Destroy_ra:
  00061	cc		 int	 3
??$_Destroy_range1@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@E@std@@YAPAEQAE@Z
_TEXT	SEGMENT
??$_Get_unwrapped@E@std@@YAPAEQAE@Z PROC		; std::_Get_unwrapped<unsigned char>, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@E@std@@YAPAEQAE@Z ENDP		; std::_Get_unwrapped<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@EH$0A@@std@@YAPAEQAEH@Z
_TEXT	SEGMENT
??$_Get_unwrapped_n@EH$0A@@std@@YAPAEQAEH@Z PROC	; std::_Get_unwrapped_n<unsigned char,int,0>, COMDAT
; __Src$ = ecx
; ___formal$dead$ = edx

; 809  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 810  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped_n@EH$0A@@std@@YAPAEQAEH@Z ENDP	; std::_Get_unwrapped_n<unsigned char,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z PROC ; std::_Ptr_move_cat<unsigned char,unsigned char>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 1087 : 	return {};

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00003	8b c1		 mov	 eax, ecx

; 1088 : 	}

  00005	c3		 ret	 0
??$_Ptr_move_cat@EE@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAE0@Z ENDP ; std::_Ptr_move_cat<unsigned char,unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@EEV?$allocator@E@std@@@std@@YAPAEQAE00AAV?$allocator@E@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_move_al_unchecked@EEV?$allocator@E@std@@@std@@YAPAEQAE00AAV?$allocator@E@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<unsigned char,unsigned char,std::allocator<unsigned char> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 243  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 244  : 	return (_Copy_memmove(_First, _Last, _Dest));

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 245  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@EEV?$allocator@E@std@@@std@@YAPAEQAE00AAV?$allocator@E@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<unsigned char,unsigned char,std::allocator<unsigned char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@E@std@@YAXAAPAEQAE@Z
_TEXT	SEGMENT
??$_Seek_wrapped@E@std@@YAXAAPAEQAE@Z PROC		; std::_Seek_wrapped<unsigned char>, COMDAT
; __It$ = ecx
; __UIt$ = edx

; 872  : 	_It = _UIt;

  00000	89 11		 mov	 DWORD PTR [ecx], edx

; 873  : 	}

  00002	c3		 ret	 0
??$_Seek_wrapped@E@std@@YAXAAPAEQAE@Z ENDP		; std::_Seek_wrapped<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> * &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Unfancy_maybe_null@E@std@@YAPAEPAE@Z
_TEXT	SEGMENT
??$_Unfancy_maybe_null@E@std@@YAPAEPAE@Z PROC		; std::_Unfancy_maybe_null<unsigned char>, COMDAT
; __Ptr$ = ecx

; 618  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 619  : 	}

  00002	c3		 ret	 0
??$_Unfancy_maybe_null@E@std@@YAPAEPAE@Z ENDP		; std::_Unfancy_maybe_null<unsigned char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z
_TEXT	SEGMENT
__Right$dead$ = 8					; size = 4
__Right_size$ = 12					; size = 4
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z PROC ; std::_Traits_equal<std::char_traits<char> >, COMDAT
; __Left$ = ecx
; __Left_size$ = edx

; 25   : 	{	// compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) for equality using _Traits

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00003	3b 55 0c	 cmp	 edx, DWORD PTR __Right_size$[ebp]
  00006	75 60		 jne	 SHORT $LN3@Traits_equ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));

  00008	56		 push	 esi
  00009	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_01OGPIMHDM@?$DP@
  0000e	83 ea 04	 sub	 edx, 4
  00011	72 11		 jb	 SHORT $LN9@Traits_equ
$LL10@Traits_equ:
  00013	8b 01		 mov	 eax, DWORD PTR [ecx]
  00015	3b 06		 cmp	 eax, DWORD PTR [esi]
  00017	75 10		 jne	 SHORT $LN8@Traits_equ
  00019	83 c1 04	 add	 ecx, 4
  0001c	83 c6 04	 add	 esi, 4
  0001f	83 ea 04	 sub	 edx, 4
  00022	73 ef		 jae	 SHORT $LL10@Traits_equ
$LN9@Traits_equ:
  00024	83 fa fc	 cmp	 edx, -4			; fffffffcH
  00027	74 34		 je	 SHORT $LN7@Traits_equ
$LN8@Traits_equ:
  00029	8a 01		 mov	 al, BYTE PTR [ecx]
  0002b	3a 06		 cmp	 al, BYTE PTR [esi]
  0002d	75 27		 jne	 SHORT $LN11@Traits_equ
  0002f	83 fa fd	 cmp	 edx, -3			; fffffffdH
  00032	74 29		 je	 SHORT $LN7@Traits_equ
  00034	8a 41 01	 mov	 al, BYTE PTR [ecx+1]
  00037	3a 46 01	 cmp	 al, BYTE PTR [esi+1]
  0003a	75 1a		 jne	 SHORT $LN11@Traits_equ
  0003c	83 fa fe	 cmp	 edx, -2			; fffffffeH
  0003f	74 1c		 je	 SHORT $LN7@Traits_equ
  00041	8a 41 02	 mov	 al, BYTE PTR [ecx+2]
  00044	3a 46 02	 cmp	 al, BYTE PTR [esi+2]
  00047	75 0d		 jne	 SHORT $LN11@Traits_equ
  00049	83 fa ff	 cmp	 edx, -1
  0004c	74 0f		 je	 SHORT $LN7@Traits_equ
  0004e	8a 41 03	 mov	 al, BYTE PTR [ecx+3]
  00051	3a 46 03	 cmp	 al, BYTE PTR [esi+3]
  00054	74 07		 je	 SHORT $LN7@Traits_equ
$LN11@Traits_equ:
  00056	1b c0		 sbb	 eax, eax
  00058	83 c8 01	 or	 eax, 1
  0005b	eb 02		 jmp	 SHORT $LN12@Traits_equ
$LN7@Traits_equ:
  0005d	33 c0		 xor	 eax, eax
$LN12@Traits_equ:
  0005f	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00060	85 c0		 test	 eax, eax
  00062	75 04		 jne	 SHORT $LN3@Traits_equ
  00064	b0 01		 mov	 al, 1

; 27   : 	}

  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
$LN3@Traits_equ:

; 26   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

  00068	32 c0		 xor	 al, al

; 27   : 	}

  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ENDP ; std::_Traits_equal<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z
_TEXT	SEGMENT
__Haystack$1$ = -8					; size = 4
tv85 = -4						; size = 4
__Start_at$ = 8						; size = 4
__Needle$ = 12						; size = 4
__Possible_matches_end$1$ = 16				; size = 4
__Needle_size$ = 16					; size = 4
??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z PROC ; std::_Traits_find<std::char_traits<char> >, COMDAT
; __Haystack$ = ecx
; __Hay_size$ = edx

; 57   : 	{	// search [_Haystack, _Haystack + _Hay_size) for [_Needle, _Needle + _Needle_size), at/after _Start_at

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 58   : 	if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size)

  00007	8b 5d 10	 mov	 ebx, DWORD PTR __Needle_size$[ebp]
  0000a	89 4d f8	 mov	 DWORD PTR __Haystack$1$[ebp], ecx
  0000d	56		 push	 esi
  0000e	57		 push	 edi
  0000f	3b da		 cmp	 ebx, edx
  00011	0f 87 c5 00 00
	00		 ja	 $LN6@Traits_fin
  00017	8b 7d 08	 mov	 edi, DWORD PTR __Start_at$[ebp]
  0001a	8b f2		 mov	 esi, edx
  0001c	2b f3		 sub	 esi, ebx
  0001e	3b fe		 cmp	 edi, esi
  00020	0f 87 b6 00 00
	00		 ja	 $LN6@Traits_fin

; 59   : 		{	// xpos cannot exist, report failure
; 60   : 			// N4659 24.3.2.7.2 [string.find]/1 says:
; 61   : 			// 1. _Start_at <= xpos
; 62   : 			// 2. xpos + _Needle_size <= _Hay_size;
; 63   : 			// therefore:
; 64   : 			// 3. _Needle_size <= _Hay_size (by 2) (checked above)
; 65   : 			// 4. _Start_at + _Needle_size <= _Hay_size (substitute 1 into 2)
; 66   : 			// 5. _Start_at <= _Hay_size - _Needle_size (4, move _Needle_size to other side) (also checked above)
; 67   : 		return (static_cast<size_t>(-1));
; 68   : 		}
; 69   : 
; 70   : 	if (_Needle_size == 0)

  00026	85 db		 test	 ebx, ebx
  00028	0f 84 bb 00 00
	00		 je	 $LN27@Traits_fin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 486  : 		return (__builtin_char_memchr(_First, _Ch, _Count));

  0002e	8b 75 0c	 mov	 esi, DWORD PTR __Needle$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 75   : 	const auto _Possible_matches_end = _Haystack + (_Hay_size - _Needle_size) + 1;

  00031	8b c1		 mov	 eax, ecx
  00033	2b c3		 sub	 eax, ebx
  00035	42		 inc	 edx
  00036	03 c2		 add	 eax, edx

; 76   : 	for (auto _Match_try = _Haystack + _Start_at; ; ++_Match_try)

  00038	03 cf		 add	 ecx, edi
  0003a	89 45 10	 mov	 DWORD PTR __Possible_matches_end$1$[ebp], eax

; 77   : 		{
; 78   : 		_Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  0003d	2b c1		 sub	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 486  : 		return (__builtin_char_memchr(_First, _Ch, _Count));

  0003f	0f be 16	 movsx	 edx, BYTE PTR [esi]
  00042	50		 push	 eax
  00043	52		 push	 edx
  00044	51		 push	 ecx
  00045	89 55 fc	 mov	 DWORD PTR tv85[ebp], edx
  00048	e8 00 00 00 00	 call	 _memchr
  0004d	8b f8		 mov	 edi, eax
  0004f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 79   : 		if (!_Match_try)

  00052	85 ff		 test	 edi, edi
  00054	0f 84 82 00 00
	00		 je	 $LN6@Traits_fin
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL4@Traits_fin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 453  : 		return (__builtin_memcmp(_First1, _First2, _Count));

  00060	8b ce		 mov	 ecx, esi
  00062	8b d7		 mov	 edx, edi
  00064	8b f3		 mov	 esi, ebx
  00066	83 ee 04	 sub	 esi, 4
  00069	72 16		 jb	 SHORT $LN23@Traits_fin
  0006b	0f 1f 44 00 00	 npad	 5
$LL24@Traits_fin:
  00070	8b 02		 mov	 eax, DWORD PTR [edx]
  00072	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00074	75 10		 jne	 SHORT $LN22@Traits_fin
  00076	83 c2 04	 add	 edx, 4
  00079	83 c1 04	 add	 ecx, 4
  0007c	83 ee 04	 sub	 esi, 4
  0007f	73 ef		 jae	 SHORT $LL24@Traits_fin
$LN23@Traits_fin:
  00081	83 fe fc	 cmp	 esi, -4			; fffffffcH
  00084	74 34		 je	 SHORT $LN21@Traits_fin
$LN22@Traits_fin:
  00086	8a 02		 mov	 al, BYTE PTR [edx]
  00088	3a 01		 cmp	 al, BYTE PTR [ecx]
  0008a	75 27		 jne	 SHORT $LN25@Traits_fin
  0008c	83 fe fd	 cmp	 esi, -3			; fffffffdH
  0008f	74 29		 je	 SHORT $LN21@Traits_fin
  00091	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  00094	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  00097	75 1a		 jne	 SHORT $LN25@Traits_fin
  00099	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0009c	74 1c		 je	 SHORT $LN21@Traits_fin
  0009e	8a 42 02	 mov	 al, BYTE PTR [edx+2]
  000a1	3a 41 02	 cmp	 al, BYTE PTR [ecx+2]
  000a4	75 0d		 jne	 SHORT $LN25@Traits_fin
  000a6	83 fe ff	 cmp	 esi, -1
  000a9	74 0f		 je	 SHORT $LN21@Traits_fin
  000ab	8a 42 03	 mov	 al, BYTE PTR [edx+3]
  000ae	3a 41 03	 cmp	 al, BYTE PTR [ecx+3]
  000b1	74 07		 je	 SHORT $LN21@Traits_fin
$LN25@Traits_fin:
  000b3	1b c0		 sbb	 eax, eax
  000b5	83 c8 01	 or	 eax, 1
  000b8	eb 02		 jmp	 SHORT $LN26@Traits_fin
$LN21@Traits_fin:
  000ba	33 c0		 xor	 eax, eax
$LN26@Traits_fin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 84   : 		if (_Traits::compare(_Match_try, _Needle, _Needle_size) == 0)

  000bc	85 c0		 test	 eax, eax
  000be	74 26		 je	 SHORT $LN17@Traits_fin

; 76   : 	for (auto _Match_try = _Haystack + _Start_at; ; ++_Match_try)

  000c0	8b 45 10	 mov	 eax, DWORD PTR __Possible_matches_end$1$[ebp]
  000c3	47		 inc	 edi

; 77   : 		{
; 78   : 		_Match_try = _Traits::find(_Match_try, static_cast<size_t>(_Possible_matches_end - _Match_try), *_Needle);

  000c4	2b c7		 sub	 eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 486  : 		return (__builtin_char_memchr(_First, _Ch, _Count));

  000c6	50		 push	 eax
  000c7	ff 75 fc	 push	 DWORD PTR tv85[ebp]
  000ca	57		 push	 edi
  000cb	e8 00 00 00 00	 call	 _memchr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 79   : 		if (!_Match_try)

  000d0	8b 75 0c	 mov	 esi, DWORD PTR __Needle$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 486  : 		return (__builtin_char_memchr(_First, _Ch, _Count));

  000d3	8b f8		 mov	 edi, eax
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 79   : 		if (!_Match_try)

  000d8	85 ff		 test	 edi, edi
  000da	75 84		 jne	 SHORT $LL4@Traits_fin
$LN6@Traits_fin:
  000dc	5f		 pop	 edi

; 87   : 			}
; 88   : 		}
; 89   : 	}

  000dd	5e		 pop	 esi
  000de	83 c8 ff	 or	 eax, -1
  000e1	5b		 pop	 ebx
  000e2	8b e5		 mov	 esp, ebp
  000e4	5d		 pop	 ebp
  000e5	c3		 ret	 0
$LN17@Traits_fin:

; 85   : 			{	// found match
; 86   : 			return (static_cast<size_t>(_Match_try - _Haystack));

  000e6	2b 7d f8	 sub	 edi, DWORD PTR __Haystack$1$[ebp]
$LN27@Traits_fin:

; 87   : 			}
; 88   : 		}
; 89   : 	}

  000e9	8b c7		 mov	 eax, edi
  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	8b e5		 mov	 esp, ebp
  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
??$_Traits_find@U?$char_traits@D@std@@@std@@YAIQBDII0I@Z ENDP ; std::_Traits_find<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >, COMDAT
; _this$ = ecx

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 471  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array, COMDAT
; _this$ = ecx

; 1895 : 		{	// orphan all iterators, discard old array, acquire new array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 1896 : 		this->_Orphan_all();
; 1897 : 
; 1898 : 		if (this->_Myfirst() != pointer())

  00006	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00008	85 c9		 test	 ecx, ecx
  0000a	74 50		 je	 SHORT $LN75@Change_arr

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  0000c	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0000f	56		 push	 esi
  00010	51		 push	 ecx
  00011	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00016	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00019	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001e	8b 37		 mov	 esi, DWORD PTR [edi]

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());

  00020	83 c4 04	 add	 esp, 4

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00023	2b ce		 sub	 ecx, esi
  00025	f7 e9		 imul	 ecx
  00027	c1 fa 02	 sar	 edx, 2
  0002a	8b c2		 mov	 eax, edx
  0002c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0002f	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00031	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00034	c1 e1 03	 shl	 ecx, 3

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00037	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0003d	72 12		 jb	 SHORT $LN74@Change_arr

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0003f	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00042	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00045	2b f2		 sub	 esi, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00047	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0004a	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0004d	77 2f		 ja	 SHORT $LN71@Change_arr

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004f	8b f2		 mov	 esi, edx
$LN74@Change_arr:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00051	51		 push	 ecx
  00052	56		 push	 esi
  00053	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00058	83 c4 08	 add	 esp, 8
  0005b	5e		 pop	 esi
$LN75@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1904 : 		this->_Myfirst() = _Newvec;

  0005c	8b 4d 08	 mov	 ecx, DWORD PTR __Newvec$[ebp]

; 1905 : 		this->_Mylast() = _Newvec + _Newsize;

  0005f	8b 45 0c	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00062	89 0f		 mov	 DWORD PTR [edi], ecx
  00064	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00067	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  0006a	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1906 : 		this->_Myend() = _Newvec + _Newcapacity;

  0006d	8b 45 10	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00070	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00073	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  00076	89 47 08	 mov	 DWORD PTR [edi+8], eax
  00079	5f		 pop	 edi

; 1907 : 		}

  0007a	5d		 pop	 ebp
  0007b	c2 0c 00	 ret	 12			; 0000000cH
$LN71@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN96@Change_arr:
  00084	cc		 int	 3
?_Change_array@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@II@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00003	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00006	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000b	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000d	f7 ea		 imul	 edx

; 1853 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

  0000f	56		 push	 esi

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00010	c1 fa 02	 sar	 edx, 2

; 1854 : 		const size_type _Oldcapacity = capacity();
; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  00013	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00018	8b ca		 mov	 ecx, edx
  0001a	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0001d	03 ca		 add	 ecx, edx

; 1854 : 		const size_type _Oldcapacity = capacity();
; 1855 : 
; 1856 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

  0001f	8b 55 08	 mov	 edx, DWORD PTR __Newsize$[ebp]
  00022	8b f1		 mov	 esi, ecx
  00024	d1 ee		 shr	 esi, 1
  00026	2b c6		 sub	 eax, esi
  00028	3b c8		 cmp	 ecx, eax
  0002a	77 07		 ja	 SHORT $LN31@Calculate_

; 1857 : 			{
; 1858 : 			return (_Newsize);	// geometric growth would overflow
; 1859 : 			}
; 1860 : 
; 1861 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

  0002c	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]

; 1862 : 
; 1863 : 		if (_Geometric < _Newsize)

  0002f	3b c2		 cmp	 eax, edx
  00031	73 02		 jae	 SHORT $LN1@Calculate_
$LN31@Calculate_:

; 1864 : 			{
; 1865 : 			return (_Newsize);	// geometric growth would be insufficient

  00033	8b c2		 mov	 eax, edx
$LN1@Calculate_:
  00035	5e		 pop	 esi

; 1866 : 			}
; 1867 : 
; 1868 : 		return (_Geometric);	// geometric growth is sufficient
; 1869 : 		}

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
?_Calculate_growth@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept, COMDAT
; _this$dead$ = ecx

; 1842 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00012	83 c4 08	 add	 esp, 8

; 1843 : 		_Umove_if_noexcept1(_First, _Last, _Dest,
; 1844 : 			bool_constant<disjunction_v<is_nothrow_move_constructible<_Ty>, negation<is_copy_constructible<_Ty>>>>{});
; 1845 : 		}

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?_Umove_if_noexcept@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove, COMDAT
; _this$dead$ = ecx

; 1827 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1828 : 		return (_Uninitialized_move(_First, _Last, _Dest, this->_Getal()));

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00012	83 c4 08	 add	 esp, 8

; 1829 : 		}

  00015	5d		 pop	 ebp
  00016	c2 0c 00	 ret	 12			; 0000000cH
?_Umove@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@PAV32@00@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; _this$dead$ = ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z PROC ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate, COMDAT
; _this$dead$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	c1 e1 03	 shl	 ecx, 3

; 26   : 	if (_Max_possible < _Count)

  0000c	3d aa aa aa 0a	 cmp	 eax, 178956970		; 0aaaaaaaH
  00011	76 05		 jbe	 SHORT $LN4@allocate

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00013	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00016	eb 08		 jmp	 SHORT $LN27@allocate
$LN4@allocate:
  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 2d		 jb	 SHORT $LN7@allocate
$LN27@allocate:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00023	83 ca ff	 or	 edx, -1
  00026	3b c1		 cmp	 eax, ecx
  00028	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00031	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00033	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00036	85 c9		 test	 ecx, ecx
  00038	74 0d		 je	 SHORT $LN16@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0003a	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003d	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00040	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN16@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@allocate:

; 188  : 	if (_Bytes != 0)

  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0d		 je	 SHORT $LN8@allocate

; 52   : 		return (::operator new(_Bytes));

  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00057	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN8@allocate:

; 193  : 	return (nullptr);

  0005e	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN28@allocate:
?allocate@?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@I@Z ENDP ; std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size, COMDAT
; ___formal$dead$ = ecx

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	b8 aa aa aa 0a	 mov	 eax, 178956970		; 0aaaaaaaH

; 893  : 		}

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal, COMDAT
; _this$ = ecx

; 550  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 551  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1, COMDAT
; _this$dead$ = ecx

; 1832 : 		{	// move [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1833 : 		_Uninitialized_move(_First, _Last, _Dest, this->_Getal());

  00003	8b 55 0c	 mov	 edx, DWORD PTR __Last$[ebp]
  00006	51		 push	 ecx
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	8b 4d 08	 mov	 ecx, DWORD PTR __First$[ebp]
  0000d	e8 00 00 00 00	 call	 ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00012	83 c4 08	 add	 esp, 8

; 1834 : 		}

  00015	5d		 pop	 ebp
  00016	c2 10 00	 ret	 16			; 00000010H
?_Umove_if_noexcept1@?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@AAEXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@2@$00@std@@QBEABV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Vector_val<std::_Simple_types<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@ABU10@@Z
_TEXT	SEGMENT
??$forward@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@ABU10@@Z PROC ; std::forward<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@ABU10@@Z ENDP ; std::forward<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
_TEXT	SEGMENT
__New_capacity$1$ = -28					; size = 4
__Pnode$ = -24						; size = 4
__Right_size$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_<_Val_0>$ = 8						; size = 4
??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>, COMDAT
; _this$ = ecx

; 976  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b 7d 08	 mov	 edi, DWORD PTR _<_Val_0>$[ebp]

; 977  : 		_Nodeptr _Pnode = _Buynode0();

  0002e	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode0
  00033	8b f0		 mov	 esi, eax

; 978  : 
; 979  : 		_Pnode->_Color = _Red;
; 980  : 		_Pnode->_Isnil = false;
; 981  : 
; 982  : 		_TRY_BEGIN

  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0003c	89 75 e8	 mov	 DWORD PTR __Pnode$[ebp], esi
  0003f	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 194  : }

  00045	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00047	83 c7 04	 add	 edi, 4
  0004a	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  0004d	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 1785 : 		_Myres(0)

  00054	c7 46 28 00 00
	00 00		 mov	 DWORD PTR [esi+40], 0

; 1825 : 		return (_BUF_SIZE <= _Myres);

  0005b	83 7f 14 08	 cmp	 DWORD PTR [edi+20], 8

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  0005f	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00062	89 45 ec	 mov	 DWORD PTR __Right_size$1$[ebp], eax

; 1815 : 		if (_Large_string_engaged())

  00065	72 02		 jb	 SHORT $LN57@Buynode
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  00067	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN57@Buynode:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  00069	83 f8 08	 cmp	 eax, 8
  0006c	73 16		 jae	 SHORT $LN46@Buynode
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  0006e	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00071	0f 11 46 14	 movups	 XMMWORD PTR [esi+20], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2404 : 			_My_data._Mysize = _Right_size;

  00075	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  00078	c7 46 28 07 00
	00 00		 mov	 DWORD PTR [esi+40], 7

; 2406 : 			return;

  0007f	e9 88 00 00 00	 jmp	 $LN45@Buynode
$LN46@Buynode:

; 2407 : 			}
; 2408 : 
; 2409 : 		auto& _Al = this->_Getal();
; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00084	83 c8 07	 or	 eax, 7
  00087	b9 fe ff ff 7f	 mov	 ecx, 2147483646		; 7ffffffeH
  0008c	3b c1		 cmp	 eax, ecx
  0008e	0f 47 c1	 cmova	 eax, ecx
  00091	89 45 e4	 mov	 DWORD PTR __New_capacity$1$[ebp], eax

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  00094	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00095	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]

; 26   : 	if (_Max_possible < _Count)

  00098	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  0009d	76 05		 jbe	 SHORT $LN90@Buynode

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  0009f	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  000a2	eb 08		 jmp	 SHORT $LN132@Buynode
$LN90@Buynode:
  000a4	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000aa	72 29		 jb	 SHORT $LN93@Buynode
$LN132@Buynode:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  000ac	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  000af	83 ca ff	 or	 edx, -1
  000b2	3b c1		 cmp	 eax, ecx
  000b4	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  000b7	50		 push	 eax
  000b8	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000bd	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000c0	85 c0		 test	 eax, eax
  000c2	74 0b		 je	 SHORT $LN102@Buynode

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  000c4	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  000c7	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000ca	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  000cd	eb 19		 jmp	 SHORT $LN92@Buynode
$LN102@Buynode:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN93@Buynode:

; 188  : 	if (_Bytes != 0)

  000d5	85 c9		 test	 ecx, ecx
  000d7	74 0d		 je	 SHORT $LN94@Buynode

; 52   : 		return (::operator new(_Bytes));

  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000df	83 c4 04	 add	 esp, 4
  000e2	8b c8		 mov	 ecx, eax

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000e4	eb 02		 jmp	 SHORT $LN92@Buynode
$LN94@Buynode:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000e6	33 c9		 xor	 ecx, ecx
$LN92@Buynode:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000e8	8b 45 ec	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000eb	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000ee	8d 04 45 02 00
	00 00		 lea	 eax, DWORD PTR [eax*2+2]
  000f5	50		 push	 eax
  000f6	57		 push	 edi
  000f7	51		 push	 ecx
  000f8	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2414 : 		_My_data._Mysize = _Right_size;

  000fd	8b 45 ec	 mov	 eax, DWORD PTR __Right_size$1$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2414 : 		_My_data._Mysize = _Right_size;

  00103	89 46 24	 mov	 DWORD PTR [esi+36], eax

; 2415 : 		_My_data._Myres = _New_capacity;

  00106	8b 45 e4	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
  00109	89 46 28	 mov	 DWORD PTR [esi+40], eax
$LN45@Buynode:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 990  : 		return (_Pnode);

  0010c	8b c6		 mov	 eax, esi

; 991  : 		}

  0010e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00111	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00118	59		 pop	 ecx
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 04 00	 ret	 4
__catch$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0:

; 983  : 		_Alnode_traits::construct(_Getal(),
; 984  : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 985  : 		_CATCH_ALL
; 986  : 		_Freenode0(_Pnode);

  00122	ff 75 e8	 push	 DWORD PTR __Pnode$[ebp]
  00125	e8 00 00 00 00	 call	 ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Freenode0

; 987  : 		_RERAISE;

  0012a	6a 00		 push	 0
  0012c	6a 00		 push	 0
  0012e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN134@Buynode:
  00133	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
$T109 = -40						; size = 8
__Newnode$GSCopy$ = -36					; size = 4
tv1785 = -32						; size = 4
tv1783 = -28						; size = 4
__Newnode$GSCopy$1$ = -24				; size = 4
tv1776 = -17						; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>, COMDAT
; _this$ = ecx

; 1599 : 		{	// try to insert node using _Where as a hint

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f9		 mov	 edi, ecx
  0002d	8b 5d 14	 mov	 ebx, DWORD PTR __Newnode$[ebp]
  00030	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 1600 : 		const_iterator _Next;
; 1601 : 		bool _Leftish = false;	// assume nearest point is end of sequence
; 1602 : 		auto& _My_data = this->_Get_data();
; 1603 : 
; 1604 : 		_TRY_BEGIN

  00033	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1605 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1606 : 		_STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data), "map/set insert iterator outside range");
; 1607 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1608 : 
; 1609 : #pragma warning(push)
; 1610 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1611 : 		if (size() == 0)

  0003a	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0003e	89 5d e8	 mov	 DWORD PTR __Newnode$GSCopy$1$[ebp], ebx
  00041	89 5d dc	 mov	 DWORD PTR __Newnode$GSCopy$[ebp], ebx
  00044	75 11		 jne	 SHORT $LN3@Insert_hin

; 1612 : 			{
; 1613 : 			return (_Insert_at(true, _My_data._Myhead,

  00046	53		 push	 ebx
  00047	51		 push	 ecx
  00048	ff 37		 push	 DWORD PTR [edi]
  0004a	6a 01		 push	 1
  0004c	56		 push	 esi
  0004d	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
  00052	e9 6e 01 00 00	 jmp	 $LN489@Insert_hin
$LN3@Insert_hin:

; 498  : 		return (_Myhead->_Left);

  00057	8b 07		 mov	 eax, DWORD PTR [edi]

; 42   : 		: _Ptr(_Pnode)

  00059	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]

; 1614 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1615 : 			}
; 1616 : 		else if (this->_Multi)
; 1617 : 			{	// insert even if duplicate
; 1618 : 			if (_Where == begin())
; 1619 : 				{	// insert at beginning if before first element
; 1620 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1621 : 					this->_Key(_Where._Ptr), this->_Kfn(_Val)))
; 1622 : 					return (_Insert_at(true, _Where._Ptr,
; 1623 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1624 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1625 : 				}
; 1626 : 			else if (_Where == end())
; 1627 : 				{	// insert at end if after last element
; 1628 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1629 : 					this->_Kfn(_Val), this->_Key(_My_data._Rmost())))
; 1630 : 					return (_Insert_at(false, _My_data._Rmost(),
; 1631 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1632 : 				}
; 1633 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1634 : 				this->_Key(_Where._Ptr), this->_Kfn(_Val))
; 1635 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1636 : 					this->_Kfn(_Val),
; 1637 : 					this->_Key((--(_Next = _Where))._Ptr)))
; 1638 : 				{	// insert before _Where
; 1639 : 				if (_Next._Ptr->_Right->_Isnil)
; 1640 : 					return (_Insert_at(false, _Next._Ptr,
; 1641 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1642 : 				else
; 1643 : 					return (_Insert_at(true, _Where._Ptr,
; 1644 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1645 : 				}
; 1646 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1647 : 				this->_Kfn(_Val), this->_Key(_Where._Ptr))
; 1648 : 				&& (++(_Next = _Where) == end()
; 1649 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1650 : 						this->_Key(_Next._Ptr), this->_Kfn(_Val))))
; 1651 : 				{	// insert after _Where
; 1652 : 				if (_Where._Ptr->_Right->_Isnil)
; 1653 : 					return (_Insert_at(false, _Where._Ptr,
; 1654 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1655 : 				else
; 1656 : 					return (_Insert_at(true, _Next._Ptr,
; 1657 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1658 : 				}
; 1659 : 			else
; 1660 : 				{
; 1661 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1662 : 				}
; 1663 : 			}
; 1664 : 		else
; 1665 : 			{	// insert only if unique
; 1666 : 			if (_Where == begin())

  0005c	8b 55 10	 mov	 edx, DWORD PTR __Val$[ebp]

; 42   : 		: _Ptr(_Pnode)

  0005f	3b 08		 cmp	 ecx, DWORD PTR [eax]

; 1614 : 				_STD forward<_Valty>(_Val), _Newnode));	// empty tree
; 1615 : 			}
; 1616 : 		else if (this->_Multi)
; 1617 : 			{	// insert even if duplicate
; 1618 : 			if (_Where == begin())
; 1619 : 				{	// insert at beginning if before first element
; 1620 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1621 : 					this->_Key(_Where._Ptr), this->_Kfn(_Val)))
; 1622 : 					return (_Insert_at(true, _Where._Ptr,
; 1623 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1624 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1625 : 				}
; 1626 : 			else if (_Where == end())
; 1627 : 				{	// insert at end if after last element
; 1628 : 				if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1629 : 					this->_Kfn(_Val), this->_Key(_My_data._Rmost())))
; 1630 : 					return (_Insert_at(false, _My_data._Rmost(),
; 1631 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1632 : 				}
; 1633 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1634 : 				this->_Key(_Where._Ptr), this->_Kfn(_Val))
; 1635 : 				&& !_DEBUG_LT_PRED(this->_Getcomp(),
; 1636 : 					this->_Kfn(_Val),
; 1637 : 					this->_Key((--(_Next = _Where))._Ptr)))
; 1638 : 				{	// insert before _Where
; 1639 : 				if (_Next._Ptr->_Right->_Isnil)
; 1640 : 					return (_Insert_at(false, _Next._Ptr,
; 1641 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1642 : 				else
; 1643 : 					return (_Insert_at(true, _Where._Ptr,
; 1644 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1645 : 				}
; 1646 : 			else if (!_DEBUG_LT_PRED(this->_Getcomp(),
; 1647 : 				this->_Kfn(_Val), this->_Key(_Where._Ptr))
; 1648 : 				&& (++(_Next = _Where) == end()
; 1649 : 					|| !_DEBUG_LT_PRED(this->_Getcomp(),
; 1650 : 						this->_Key(_Next._Ptr), this->_Kfn(_Val))))
; 1651 : 				{	// insert after _Where
; 1652 : 				if (_Where._Ptr->_Right->_Isnil)
; 1653 : 					return (_Insert_at(false, _Where._Ptr,
; 1654 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1655 : 				else
; 1656 : 					return (_Insert_at(true, _Next._Ptr,
; 1657 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1658 : 				}
; 1659 : 			else
; 1660 : 				{
; 1661 : 				_Leftish = true;	// nearest point is beginning of sequence
; 1662 : 				}
; 1663 : 			}
; 1664 : 		else
; 1665 : 			{	// insert only if unique
; 1666 : 			if (_Where == begin())

  00061	75 1d		 jne	 SHORT $LN22@Insert_hin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 141  : 		return (_Left < _Right);

  00063	8b 02		 mov	 eax, DWORD PTR [edx]
  00065	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1668 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  00068	0f 83 3a 01 00
	00		 jae	 $LN35@Insert_hin

; 1669 : 					this->_Kfn(_Val), this->_Key(_Where._Ptr)))
; 1670 : 					{
; 1671 : 					return (_Insert_at(true, _Where._Ptr,

  0006e	53		 push	 ebx
  0006f	51		 push	 ecx
$LN30@Insert_hin:

; 1726 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1727 : 		}

  00070	51		 push	 ecx
  00071	6a 01		 push	 1
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
  0007b	e9 45 01 00 00	 jmp	 $LN489@Insert_hin
$LN22@Insert_hin:

; 42   : 		: _Ptr(_Pnode)

  00080	3b c8		 cmp	 ecx, eax

; 1672 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1673 : 					}
; 1674 : 				}
; 1675 : 			else if (_Where == end())

  00082	75 20		 jne	 SHORT $LN25@Insert_hin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00084	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 141  : 		return (_Left < _Right);

  00087	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0008a	3b 02		 cmp	 eax, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1677 : 				if (_DEBUG_LT_PRED(this->_Getcomp(),

  0008c	0f 83 16 01 00
	00		 jae	 $LN35@Insert_hin

; 1678 : 					this->_Key(_My_data._Rmost()), this->_Kfn(_Val)))
; 1679 : 					{
; 1680 : 					return (_Insert_at(false, _My_data._Rmost(),

  00092	53		 push	 ebx
  00093	51		 push	 ecx
$LN491@Insert_hin:

; 1726 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1727 : 		}

  00094	51		 push	 ecx
  00095	6a 00		 push	 0
  00097	56		 push	 esi
  00098	8b cf		 mov	 ecx, edi
  0009a	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
  0009f	e9 21 01 00 00	 jmp	 $LN489@Insert_hin
$LN25@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 141  : 		return (_Left < _Right);

  000a4	8b 02		 mov	 eax, DWORD PTR [edx]
  000a6	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000a9	89 45 e4	 mov	 DWORD PTR tv1783[ebp], eax
  000ac	3b d0		 cmp	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1686 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  000ae	0f 86 89 00 00
	00		 jbe	 $LN490@Insert_hin

; 86   : 		if (_Ptr->_Isnil)

  000b4	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0

; 1686 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  000b8	8b c1		 mov	 eax, ecx

; 86   : 		if (_Ptr->_Isnil)

  000ba	74 05		 je	 SHORT $LN375@Insert_hin

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

  000bc	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000bf	eb 4d		 jmp	 SHORT $LN378@Insert_hin
$LN375@Insert_hin:

; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)

  000c1	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c3	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000c7	74 29		 je	 SHORT $LN377@Insert_hin

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

  000c9	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000cc	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000d0	75 16		 jne	 SHORT $LN374@Insert_hin
  000d2	8b d9		 mov	 ebx, ecx
$LL373@Insert_hin:
  000d4	89 55 e0	 mov	 DWORD PTR tv1785[ebp], edx
  000d7	3b 1a		 cmp	 ebx, DWORD PTR [edx]
  000d9	75 0d		 jne	 SHORT $LN374@Insert_hin

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  000db	8b c2		 mov	 eax, edx
  000dd	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000e0	8b d8		 mov	 ebx, eax
  000e2	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000e6	74 ec		 je	 SHORT $LL373@Insert_hin
$LN374@Insert_hin:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

  000e8	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ec	75 1d		 jne	 SHORT $LN485@Insert_hin

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

  000ee	8b c2		 mov	 eax, edx

; 101  : 				}
; 102  : 			}
; 103  : 		else

  000f0	eb 19		 jmp	 SHORT $LN485@Insert_hin
$LN377@Insert_hin:

; 104  : 			{
; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

  000f2	8b c2		 mov	 eax, edx

; 479  : 		while (!_Pnode->_Right->_Isnil)

  000f4	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  000f7	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000fb	75 0e		 jne	 SHORT $LN485@Insert_hin
  000fd	0f 1f 00	 npad	 3
$LL382@Insert_hin:

; 480  : 			_Pnode = _Pnode->_Right;

  00100	8b c2		 mov	 eax, edx
  00102	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00105	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00109	74 f5		 je	 SHORT $LL382@Insert_hin
$LN485@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 141  : 		return (_Left < _Right);

  0010b	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
$LN378@Insert_hin:
  0010e	8b 5d e4	 mov	 ebx, DWORD PTR tv1783[ebp]
  00111	39 58 10	 cmp	 DWORD PTR [eax+16], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1686 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  00114	8b 5d e8	 mov	 ebx, DWORD PTR __Newnode$GSCopy$1$[ebp]
  00117	73 1f		 jae	 SHORT $LN486@Insert_hin

; 1687 : 					this->_Key((--(_Next = _Where))._Ptr),
; 1688 : 					this->_Kfn(_Val)))
; 1689 : 				{	// insert before _Where
; 1690 : 				if (_Next._Ptr->_Right->_Isnil)

  00119	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0011c	53		 push	 ebx
  0011d	51		 push	 ecx
  0011e	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00122	0f 84 48 ff ff
	ff		 je	 $LN30@Insert_hin

; 1691 : 					{
; 1692 : 					return (_Insert_at(false, _Next._Ptr,

  00128	50		 push	 eax
  00129	6a 00		 push	 0
  0012b	56		 push	 esi
  0012c	8b cf		 mov	 ecx, edi
  0012e	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
  00133	e9 8d 00 00 00	 jmp	 $LN489@Insert_hin
$LN486@Insert_hin:

; 1686 : 				&& _DEBUG_LT_PRED(this->_Getcomp(),

  00138	8b 45 e4	 mov	 eax, DWORD PTR tv1783[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 141  : 		return (_Left < _Right);

  0013b	3b d0		 cmp	 edx, eax
$LN490@Insert_hin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1703 : 				&& (++(_Next = _Where) == end()

  0013d	73 69		 jae	 SHORT $LN35@Insert_hin

; 59   : 		if (_Ptr->_Right->_Isnil)

  0013f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00142	8a 50 0d	 mov	 dl, BYTE PTR [eax+13]
  00145	88 55 ef	 mov	 BYTE PTR tv1776[ebp], dl
  00148	84 d2		 test	 dl, dl
  0014a	74 1f		 je	 SHORT $LN418@Insert_hin

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0014c	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0014f	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00153	75 2a		 jne	 SHORT $LN423@Insert_hin
  00155	8b d1		 mov	 edx, ecx
$LL416@Insert_hin:
  00157	8b d8		 mov	 ebx, eax
  00159	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0015c	75 21		 jne	 SHORT $LN423@Insert_hin
  0015e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00161	8b d3		 mov	 edx, ebx
  00163	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00167	74 ee		 je	 SHORT $LL416@Insert_hin

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree
; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

  00169	eb 14		 jmp	 SHORT $LN423@Insert_hin
$LN418@Insert_hin:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0016b	8b 18		 mov	 ebx, DWORD PTR [eax]
  0016d	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00171	75 0c		 jne	 SHORT $LN423@Insert_hin
$LL422@Insert_hin:
  00173	8b 13		 mov	 edx, DWORD PTR [ebx]

; 487  : 			_Pnode = _Pnode->_Left;

  00175	8b c3		 mov	 eax, ebx
  00177	8b da		 mov	 ebx, edx
  00179	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0017d	74 f4		 je	 SHORT $LL422@Insert_hin
$LN423@Insert_hin:

; 42   : 		: _Ptr(_Pnode)

  0017f	8b d0		 mov	 edx, eax
  00181	3b 17		 cmp	 edx, DWORD PTR [edi]

; 1703 : 				&& (++(_Next = _Where) == end()

  00183	74 08		 je	 SHORT $LN33@Insert_hin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 141  : 		return (_Left < _Right);

  00185	8b 55 e4	 mov	 edx, DWORD PTR tv1783[ebp]
  00188	3b 50 10	 cmp	 edx, DWORD PTR [eax+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1703 : 				&& (++(_Next = _Where) == end()

  0018b	73 1b		 jae	 SHORT $LN35@Insert_hin
$LN33@Insert_hin:

; 1704 : 					|| _DEBUG_LT_PRED(this->_Getcomp(),
; 1705 : 						this->_Kfn(_Val), this->_Key(_Next._Ptr))))
; 1706 : 				{	// insert after _Where
; 1707 : 				if (_Where._Ptr->_Right->_Isnil)

  0018d	80 7d ef 00	 cmp	 BYTE PTR tv1776[ebp], 0
  00191	ff 75 e8	 push	 DWORD PTR __Newnode$GSCopy$1$[ebp]
  00194	51		 push	 ecx
  00195	0f 85 f9 fe ff
	ff		 jne	 $LN491@Insert_hin

; 1708 : 					{
; 1709 : 					return (_Insert_at(false, _Where._Ptr,
; 1710 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1711 : 					}
; 1712 : 				else
; 1713 : 					{
; 1714 : 					return (_Insert_at(true, _Next._Ptr,

  0019b	50		 push	 eax
  0019c	6a 01		 push	 1
  0019e	56		 push	 esi
  0019f	8b cf		 mov	 ecx, edi
  001a1	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
  001a6	eb 1d		 jmp	 SHORT $LN489@Insert_hin
$LN35@Insert_hin:

; 1723 : 		_CATCH_END
; 1724 : 
; 1725 : 		return (_Insert_nohint(_Leftish,

  001a8	ff 75 e8	 push	 DWORD PTR __Newnode$GSCopy$1$[ebp]
  001ab	8d 45 d8	 lea	 eax, DWORD PTR $T109[ebp]
  001ae	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  001b5	ff 75 10	 push	 DWORD PTR __Val$[ebp]
  001b8	51		 push	 ecx
  001b9	50		 push	 eax
  001ba	8b cf		 mov	 ecx, edi
  001bc	e8 00 00 00 00	 call	 ??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_nohint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
  001c1	8b 00		 mov	 eax, DWORD PTR [eax]
  001c3	89 06		 mov	 DWORD PTR [esi], eax
$LN489@Insert_hin:

; 1726 : 			_STD forward<_Valty>(_Val), _Newnode).first);
; 1727 : 		}

  001c5	8b c6		 mov	 eax, esi
  001c7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ca	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001d1	59		 pop	 ecx
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	5b		 pop	 ebx
  001d5	8b e5		 mov	 esp, ebp
  001d7	5d		 pop	 ebp
  001d8	c2 10 00	 ret	 16			; 00000010H
__catch$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z$0:

; 1715 : 						_STD forward<_Valty>(_Val), _Newnode));
; 1716 : 					}
; 1717 : 				}
; 1718 : 			}
; 1719 : #pragma warning(pop)
; 1720 : 		_CATCH_ALL
; 1721 : 		_Destroy_if_node(_Newnode);

  001db	ff 75 dc	 push	 DWORD PTR __Newnode$GSCopy$[ebp]
  001de	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Destroy_if_node

; 1722 : 		_RERAISE;

  001e3	6a 00		 push	 0
  001e5	6a 00		 push	 0
  001e7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN488@Insert_hin:
  001ec	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_hint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_hint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 886  : 		{	// destroy object at _Ptr

  00000	56		 push	 esi
  00001	8b f2		 mov	 esi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  00009	72 27		 jb	 SHORT $LN49@destroy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  0000d	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN48@destroy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN45@destroy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN48@destroy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN49@destroy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 888  : 		}

  00044	c3		 ret	 0
$LN45@destroy:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN68@destroy:
  0004b	cc		 int	 3
??$destroy@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Default_allocator_traits@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::destroy<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z PROC		; std::_Copy_memmove<unsigned char *,unsigned char *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 2405 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PAEPAE@std@@YAPAEPAE00@Z ENDP		; std::_Copy_memmove<unsigned char *,unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 148  : 		_Last(_Dest),

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]

; 230  : 	for (; _First != _Last; ++_First)

  00007	3b ca		 cmp	 ecx, edx
  00009	74 3f		 je	 SHORT $LN17@Uninitiali

; 251  : 	{	// move [_First, _Last) to raw _Dest, using _Al

  0000b	8b c6		 mov	 eax, esi
  0000d	2b c1		 sub	 eax, ecx
  0000f	90		 npad	 1
$LL18@Uninitiali:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1785 : 		_Myres(0)

  00017	c7 44 08 14 00
	00 00 00	 mov	 DWORD PTR [eax+ecx+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0001f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00022	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00025	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  0002a	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  0002f	83 c6 18	 add	 esi, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00032	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00039	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00040	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  00043	83 c1 18	 add	 ecx, 24			; 00000018H

; 230  : 	for (; _First != _Last; ++_First)

  00046	3b ca		 cmp	 ecx, edx
  00048	75 c6		 jne	 SHORT $LL18@Uninitiali
$LN17@Uninitiali:

; 158  : 		_Destroy_range(_First, _Last, _Al);

  0004a	51		 push	 ecx
  0004b	8b d6		 mov	 edx, esi
  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00054	83 c4 04	 add	 esp, 4

; 252  : 		// note: only called internally from elsewhere in the STL
; 253  : 	const auto _UFirst = _Get_unwrapped(_First);
; 254  : 	const auto _ULast = _Get_unwrapped(_Last);
; 255  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 256  : 	_Seek_wrapped(_Dest,
; 257  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 258  : 			_Ptr_move_cat(_UFirst, _UDest),
; 259  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>()));
; 260  : 	return (_Dest);

  00057	8b c6		 mov	 eax, esi

; 261  : 	}

  00059	5e		 pop	 esi
  0005a	5d		 pop	 ebp
  0005b	c3		 ret	 0
??$_Uninitialized_move@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@0PAV10@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAHABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
??$_Idl_distance@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAHABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Idl_distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 12		 mov	 edx, DWORD PTR [edx]
  00002	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00007	2b 11		 sub	 edx, DWORD PTR [ecx]
  00009	f7 ea		 imul	 edx
  0000b	c1 fa 02	 sar	 edx, 2
  0000e	8b c2		 mov	 eax, edx
  00010	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00013	03 c2		 add	 eax, edx

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00015	c3		 ret	 0
??$_Idl_distance@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@@std@@YAHABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Idl_distance<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2459 : 		{	// destroy the string

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00006	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00009	83 f9 10	 cmp	 ecx, 16			; 00000010H

; 3987 : 		if (_My_data._Large_string_engaged())

  0000c	72 27		 jb	 SHORT $LN47@scalar
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	8b 06		 mov	 eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3992 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

  00010	41		 inc	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00011	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN46@scalar

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001c	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 24		 ja	 SHORT $LN43@scalar

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b c2		 mov	 eax, edx
$LN46@scalar:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8
$LN47@scalar:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00035	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  0003c	8b c6		 mov	 eax, esi

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0003e	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00045	c6 06 00	 mov	 BYTE PTR [esi], 0
  00048	5e		 pop	 esi
  00049	5d		 pop	 ebp
  0004a	c2 04 00	 ret	 4
$LN43@scalar:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN65@scalar:
  00053	cc		 int	 3
??_G?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPAXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
tv321 = -4						; size = 4
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator--, COMDAT
; _this$ = ecx

; 252  : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 86   : 		if (_Ptr->_Isnil)

  00007	8b 16		 mov	 edx, DWORD PTR [esi]
  00009	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0000d	74 0c		 je	 SHORT $LN6@operator

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

  0000f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 254  : 		--static_cast<_Mybase&>(*this);
; 255  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 256  : 		_STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");
; 257  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 258  : 		--static_cast<_Mybase&>(*this);
; 259  : 		_STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");
; 260  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 261  : 
; 262  : 		return (*this);
; 263  : 		}

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN6@operator:

; 90   : 		else if (_Ptr->_Left->_Isnil)

  0001b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00021	74 3c		 je	 SHORT $LN8@operator

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

  00023	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00026	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002a	75 24		 jne	 SHORT $LN25@operator
  0002c	57		 push	 edi
  0002d	8b ca		 mov	 ecx, edx
  0002f	8b fa		 mov	 edi, edx
  00031	53		 push	 ebx
$LL4@operator:
  00032	8b d8		 mov	 ebx, eax
  00034	89 45 fc	 mov	 DWORD PTR tv321[ebp], eax
  00037	8b d7		 mov	 edx, edi
  00039	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0003b	75 11		 jne	 SHORT $LN27@operator

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003d	89 06		 mov	 DWORD PTR [esi], eax
  0003f	8b c8		 mov	 ecx, eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	8b f9		 mov	 edi, ecx
  00046	8b d3		 mov	 edx, ebx
  00048	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004c	74 e4		 je	 SHORT $LL4@operator
$LN27@operator:
  0004e	5b		 pop	 ebx
  0004f	5f		 pop	 edi
$LN25@operator:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

  00050	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00054	75 27		 jne	 SHORT $LN28@operator

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

  00056	89 06		 mov	 DWORD PTR [esi], eax

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 254  : 		--static_cast<_Mybase&>(*this);
; 255  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 256  : 		_STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");
; 257  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 258  : 		--static_cast<_Mybase&>(*this);
; 259  : 		_STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");
; 260  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 261  : 
; 262  : 		return (*this);
; 263  : 		}

  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN8@operator:

; 479  : 		while (!_Pnode->_Right->_Isnil)

  0005f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00062	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00066	75 13		 jne	 SHORT $LN14@operator
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL13@operator:

; 480  : 			_Pnode = _Pnode->_Right;

  00070	8b c8		 mov	 ecx, eax
  00072	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00075	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00079	74 f5		 je	 SHORT $LL13@operator
$LN14@operator:

; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

  0007b	89 0e		 mov	 DWORD PTR [esi], ecx
$LN28@operator:

; 253  :  #if _ITERATOR_DEBUG_LEVEL == 0
; 254  : 		--static_cast<_Mybase&>(*this);
; 255  :  #else /* ^^^ _ITERATOR_DEBUG_LEVEL == 0 ^^^ // vvv _ITERATOR_DEBUG_LEVEL != 0 vvv */
; 256  : 		_STL_ASSERT(this->_Getcont(), "cannot decrement value-initialized map/set iterator");
; 257  : 		_Nodeptr _Ptrsav = this->_Ptr;
; 258  : 		--static_cast<_Mybase&>(*this);
; 259  : 		_STL_VERIFY(_Ptrsav != this->_Ptr, "cannot decrement begin map/set iterator");
; 260  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 261  : 
; 262  : 		return (*this);
; 263  : 		}

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >, COMDAT
; _this$ = ecx

; 37   : 		: _Ptr()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 210  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@PAUHKEY__@@@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@PAUHKEY__@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 995  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 996  : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEAAU?$less@PAUHKEY__@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Freenode0, COMDAT
; _this$dead$ = ecx

; 970  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00006	6a 2c		 push	 44			; 0000002cH
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 972  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 951  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00001	6a 2c		 push	 44			; 0000002cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 951  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000a	8b 16		 mov	 edx, DWORD PTR [esi]

; 52   : 		return (::operator new(_Bytes));

  0000c	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00018	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 966  : 		return (_Pnode);

  0001b	5e		 pop	 esi

; 967  : 		}

  0001c	c3		 ret	 0
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IBEABQAUHKEY__@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IBEABQAUHKEY__@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Key, COMDAT
; _this$dead$ = ecx

; 2122 : 		{	// return reference to key in node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 71   : 		return (_Val.first);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	83 c0 10	 add	 eax, 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2124 : 		}

  00009	5d		 pop	 ebp
  0000a	c2 04 00	 ret	 4
?_Key@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IBEABQAUHKEY__@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Key
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Kfn@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IBEABQAUHKEY__@@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IBEABQAUHKEY__@@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Kfn, COMDAT
; _this$dead$ = ecx

; 2117 : 		{	// get key from value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2118 : 		return (_Traits::_Kfn(_Val));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val$[ebp]

; 2119 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?_Kfn@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IBEABQAUHKEY__@@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Kfn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Newnode$ = 8						; size = 4
?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Destroy_if_node, COMDAT
; _this$dead$ = ecx

; 1585 : 		{	// node exists, destroy it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR __Newnode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00007	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0000a	83 f9 08	 cmp	 ecx, 8

; 3987 : 		if (_My_data._Large_string_engaged())

  0000d	72 2e		 jb	 SHORT $LN62@Destroy_if
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00012	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 12		 jb	 SHORT $LN61@Destroy_if

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00021	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00024	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00027	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00029	83 c0 fc	 add	 eax, -4			; fffffffcH
  0002c	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002f	77 30		 ja	 SHORT $LN58@Destroy_if

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00031	8b c2		 mov	 eax, edx
$LN61@Destroy_if:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00033	51		 push	 ecx
  00034	50		 push	 eax
  00035	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003a	83 c4 08	 add	 esp, 8
$LN62@Destroy_if:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0003d	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  0003f	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00046	6a 2c		 push	 44			; 0000002cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00048	c7 46 28 07 00
	00 00		 mov	 DWORD PTR [esi+40], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004f	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00050	66 89 46 14	 mov	 WORD PTR [esi+20], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00054	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00059	83 c4 08	 add	 esp, 8
  0005c	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1589 : 		}

  0005d	5d		 pop	 ebp
  0005e	c2 04 00	 ret	 4
$LN58@Destroy_if:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN115@Destroy_if:
  00067	cc		 int	 3
?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Destroy_if_node
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::size, COMDAT
; _this$ = ecx

; 1270 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1271 : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??R?$less@PAUHKEY__@@@std@@QBE_NABQAUHKEY__@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@PAUHKEY__@@@std@@QBE_NABQAUHKEY__@@0@Z PROC	; std::less<HKEY__ *>::operator(), COMDAT
; _this$dead$ = ecx

; 140  : 		{	// apply operator< to operands

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 141  : 		return (_Left < _Right);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  00006	8b 08		 mov	 ecx, DWORD PTR [eax]
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Right$[ebp]
  0000b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000d	0f 92 c0	 setb	 al

; 142  : 		}

  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??R?$less@PAUHKEY__@@@std@@QBE_NABQAUHKEY__@@0@Z ENDP	; std::less<HKEY__ *>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@PAUHKEY__@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@PAUHKEY__@@@2@XZ PROC ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAU?$less@PAUHKEY__@@@2@XZ ENDP ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
tv321 = -4						; size = 4
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator--, COMDAT
; _this$ = ecx

; 85   : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 86   : 		if (_Ptr->_Isnil)

  00007	8b 16		 mov	 edx, DWORD PTR [esi]
  00009	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0000d	74 0c		 je	 SHORT $LN4@operator

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

  0000f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN4@operator:

; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)

  0001b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00021	74 3c		 je	 SHORT $LN6@operator

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

  00023	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00026	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002a	75 24		 jne	 SHORT $LN23@operator
  0002c	57		 push	 edi
  0002d	8b ca		 mov	 ecx, edx
  0002f	8b fa		 mov	 edi, edx
  00031	53		 push	 ebx
$LL2@operator:
  00032	8b d8		 mov	 ebx, eax
  00034	89 45 fc	 mov	 DWORD PTR tv321[ebp], eax
  00037	8b d7		 mov	 edx, edi
  00039	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0003b	75 11		 jne	 SHORT $LN25@operator

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003d	89 06		 mov	 DWORD PTR [esi], eax
  0003f	8b c8		 mov	 ecx, eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	8b f9		 mov	 edi, ecx
  00046	8b d3		 mov	 edx, ebx
  00048	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004c	74 e4		 je	 SHORT $LL2@operator
$LN25@operator:
  0004e	5b		 pop	 ebx
  0004f	5f		 pop	 edi
$LN23@operator:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

  00050	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00054	75 27		 jne	 SHORT $LN26@operator

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

  00056	89 06		 mov	 DWORD PTR [esi], eax

; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}

  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN6@operator:

; 479  : 		while (!_Pnode->_Right->_Isnil)

  0005f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00062	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00066	75 13		 jne	 SHORT $LN12@operator
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL11@operator:

; 480  : 			_Pnode = _Pnode->_Right;

  00070	8b c8		 mov	 ecx, eax
  00072	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00075	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00079	74 f5		 je	 SHORT $LL11@operator
$LN12@operator:

; 101  : 				}
; 102  : 			}
; 103  : 		else
; 104  : 			{
; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

  0007b	89 0e		 mov	 DWORD PTR [esi], ecx
$LN26@operator:

; 106  : 			}
; 107  : 
; 108  : 		return (*this);
; 109  : 		}

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 37   : 		: _Ptr()

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 39   : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c3		 ret	 0
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1020 : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 1021 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@PAUHKEY__@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<HKEY__ *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@ABU31@@Z
_TEXT	SEGMENT
__New_capacity$1$ = -4					; size = 4
_<_Args_0>$ = 8						; size = 4
??$construct@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@ABU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::construct<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 4d 08	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00007	53		 push	 ebx
  00008	56		 push	 esi
  00009	8b f2		 mov	 esi, edx
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 194  : }

  0000b	8b 01		 mov	 eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000d	57		 push	 edi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 194  : }

  0000e	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  00011	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00013	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 1785 : 		_Myres(0)

  0001a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00021	83 7f 14 08	 cmp	 DWORD PTR [edi+20], 8

; 2399 : 		const size_type _Right_size = _Right_data._Mysize;

  00025	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]

; 1815 : 		if (_Large_string_engaged())

  00028	72 02		 jb	 SHORT $LN40@construct
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 346  : 	return (_Ptr);

  0002a	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN40@construct:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2401 : 		if (_Right_size < this->_BUF_SIZE)

  0002c	83 fb 08	 cmp	 ebx, 8
  0002f	73 18		 jae	 SHORT $LN29@construct
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00031	0f 10 07	 movups	 xmm0, XMMWORD PTR [edi]
  00034	5f		 pop	 edi
  00035	0f 11 46 04	 movups	 XMMWORD PTR [esi+4], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

  00039	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2405 : 			_My_data._Myres = this->_BUF_SIZE - 1;

  0003c	c7 46 18 07 00
	00 00		 mov	 DWORD PTR [esi+24], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
$LN29@construct:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00049	8b c3		 mov	 eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  0004b	b9 fe ff ff 7f	 mov	 ecx, 2147483646		; 7ffffffeH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2410 : 		const size_type _New_capacity = _Min_value(_Right_size | this->_ALLOC_MASK, max_size());

  00050	83 c8 07	 or	 eax, 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 24   : 	return (_Right < _Left ? _Right : _Left);

  00053	3b c1		 cmp	 eax, ecx
  00055	0f 47 c1	 cmova	 eax, ecx
  00058	89 45 fc	 mov	 DWORD PTR __New_capacity$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2411 : 		const pointer _New_array = _Al.allocate(_New_capacity + 1); // throws

  0005b	40		 inc	 eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  0005c	8d 0c 00	 lea	 ecx, DWORD PTR [eax+eax]

; 26   : 	if (_Max_possible < _Count)

  0005f	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00064	76 05		 jbe	 SHORT $LN73@construct

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00066	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00069	eb 08		 jmp	 SHORT $LN114@construct
$LN73@construct:
  0006b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00071	72 29		 jb	 SHORT $LN76@construct
$LN114@construct:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00073	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00076	83 ca ff	 or	 edx, -1
  00079	3b c1		 cmp	 eax, ecx
  0007b	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0007e	50		 push	 eax
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00084	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00087	85 c0		 test	 eax, eax
  00089	74 0b		 je	 SHORT $LN85@construct

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0008b	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]
  0008e	83 e1 e0	 and	 ecx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00091	89 41 fc	 mov	 DWORD PTR [ecx-4], eax

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00094	eb 19		 jmp	 SHORT $LN75@construct
$LN85@construct:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00096	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN76@construct:

; 188  : 	if (_Bytes != 0)

  0009c	85 c9		 test	 ecx, ecx
  0009e	74 0d		 je	 SHORT $LN77@construct

; 52   : 		return (::operator new(_Bytes));

  000a0	51		 push	 ecx
  000a1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a6	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000a9	8b c8		 mov	 ecx, eax
  000ab	eb 02		 jmp	 SHORT $LN75@construct
$LN77@construct:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000ad	33 c9		 xor	 ecx, ecx
$LN75@construct:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000af	8d 04 5d 02 00
	00 00		 lea	 eax, DWORD PTR [ebx*2+2]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  000b6	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000b9	50		 push	 eax
  000ba	57		 push	 edi
  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2415 : 		_My_data._Myres = _New_capacity;

  000c1	8b 45 fc	 mov	 eax, DWORD PTR __New_capacity$1$[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\wchar.h

; 233  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  000c4	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

  000c7	89 5e 14	 mov	 DWORD PTR [esi+20], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2415 : 		_My_data._Myres = _New_capacity;

  000ca	89 46 18	 mov	 DWORD PTR [esi+24], eax
  000cd	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

  000ce	5e		 pop	 esi
  000cf	5b		 pop	 ebx
  000d0	8b e5		 mov	 esp, ebp
  000d2	5d		 pop	 ebp
  000d3	c3		 ret	 0
$LN115@construct:
??$construct@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@ABU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@1@QAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@ABU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::construct<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAU10@@Z PROC ; std::forward<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@YAAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AAU10@@Z ENDP ; std::forward<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Val$dead$ = 20					; size = 4
__Node$ = 24						; size = 4
??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>, COMDAT
; _this$ = ecx

; 1805 : 		{	// add node with value next to _Wherenode, to left if _Addleft

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1806 : 		auto& _My_data = this->_Get_data();
; 1807 : 		if (max_size() - 1 <= _My_data._Mysize)

  00004	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00007	89 4d fc	 mov	 DWORD PTR _this$1$[ebp], ecx
  0000a	3d 5c 74 d1 05	 cmp	 eax, 97612892		; 05d1745cH
  0000f	72 13		 jb	 SHORT $LN5@Insert_at

; 1808 : 			{	// tree would get too big, fail
; 1809 : 			_Destroy_if_node(_Node);

  00011	ff 75 18	 push	 DWORD PTR __Node$[ebp]
  00014	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Destroy_if_node

; 1810 : 			_Xlength_error("map/set<T> too long");

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN5@Insert_at:
  00024	53		 push	 ebx

; 1811 : 			}
; 1812 : 
; 1813 : 		_Nodeptr _Newnode = _Buy_if_not_node(_Node, _STD forward<_Valty>(_Val));
; 1814 : 
; 1815 : 		++_My_data._Mysize;
; 1816 : 		_Newnode->_Parent = _Wherenode;

  00025	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  00028	40		 inc	 eax
  00029	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002c	8b 45 10	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0002f	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1817 : 
; 1818 : 		if (_Wherenode == _My_data._Myhead)

  00032	8b 11		 mov	 edx, DWORD PTR [ecx]
  00034	3b c2		 cmp	 eax, edx
  00036	75 0e		 jne	 SHORT $LN6@Insert_at

; 1819 : 			{	// first node in tree, just set head values
; 1820 : 			_My_data._Root() = _Newnode;

  00038	89 5a 04	 mov	 DWORD PTR [edx+4], ebx

; 498  : 		return (_Myhead->_Left);

  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1821 : 			_My_data._Lmost() = _Newnode;

  0003d	89 18		 mov	 DWORD PTR [eax], ebx

; 1822 : 			_My_data._Rmost() = _Newnode;

  0003f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00041	89 58 08	 mov	 DWORD PTR [eax+8], ebx
  00044	eb 1f		 jmp	 SHORT $LN11@Insert_at
$LN6@Insert_at:

; 1823 : 			}
; 1824 : 		else if (_Addleft)

  00046	80 7d 0c 00	 cmp	 BYTE PTR __Addleft$[ebp], 0
  0004a	74 0c		 je	 SHORT $LN8@Insert_at

; 1825 : 			{	// add to left of _Wherenode
; 1826 : 			_Wherenode->_Left = _Newnode;

  0004c	89 18		 mov	 DWORD PTR [eax], ebx

; 498  : 		return (_Myhead->_Left);

  0004e	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1827 : 			if (_Wherenode == _My_data._Lmost())

  00050	3b 02		 cmp	 eax, DWORD PTR [edx]
  00052	75 11		 jne	 SHORT $LN11@Insert_at

; 1828 : 				{
; 1829 : 				_My_data._Lmost() = _Newnode;

  00054	89 1a		 mov	 DWORD PTR [edx], ebx

; 1830 : 				}
; 1831 : 			}
; 1832 : 		else

  00056	eb 0d		 jmp	 SHORT $LN11@Insert_at
$LN8@Insert_at:

; 1833 : 			{	// add to right of _Wherenode
; 1834 : 			_Wherenode->_Right = _Newnode;

  00058	89 58 08	 mov	 DWORD PTR [eax+8], ebx

; 503  : 		return (_Myhead->_Right);

  0005b	8b 11		 mov	 edx, DWORD PTR [ecx]

; 1835 : 			if (_Wherenode == _My_data._Rmost())

  0005d	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00060	75 03		 jne	 SHORT $LN11@Insert_at

; 1836 : 				{
; 1837 : 				_My_data._Rmost() = _Newnode;

  00062	89 5a 08	 mov	 DWORD PTR [edx+8], ebx
$LN11@Insert_at:

; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

  00065	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00068	8b d3		 mov	 edx, ebx
  0006a	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0006e	0f 85 99 01 00
	00		 jne	 $LN3@Insert_at
  00074	56		 push	 esi
  00075	57		 push	 edi
$LL2@Insert_at:

; 1842 : 			{
; 1843 : 			if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left)

  00076	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00079	8d 7a 04	 lea	 edi, DWORD PTR [edx+4]
  0007c	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0007f	8d 59 04	 lea	 ebx, DWORD PTR [ecx+4]
  00082	8b 06		 mov	 eax, DWORD PTR [esi]
  00084	3b c8		 cmp	 ecx, eax
  00086	0f 85 ba 00 00
	00		 jne	 $LN12@Insert_at

; 1844 : 				{	// fixup red-red in left subtree
; 1845 : 				_Wherenode = _Pnode->_Parent->_Parent->_Right;

  0008c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 1846 : 				if (_Wherenode->_Color == this->_Red)

  0008f	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  00093	0f 84 b3 00 00
	00		 je	 $LN102@Insert_at

; 1847 : 					{	// parent has two red children, blacken both
; 1848 : 					_Pnode->_Parent->_Color = this->_Black;
; 1849 : 					_Wherenode->_Color = this->_Black;
; 1850 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;
; 1851 : 					_Pnode = _Pnode->_Parent->_Parent;
; 1852 : 					}
; 1853 : 				else
; 1854 : 					{	// parent has red and black children
; 1855 : 					if (_Pnode == _Pnode->_Parent->_Right)

  00099	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0009c	3b d6		 cmp	 edx, esi
  0009e	75 47		 jne	 SHORT $LN99@Insert_at

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  000a0	8b 06		 mov	 eax, DWORD PTR [esi]

; 1856 : 						{	// rotate right child to left
; 1857 : 						_Pnode = _Pnode->_Parent;

  000a2	8b d1		 mov	 edx, ecx

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  000a4	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  000a7	8b 06		 mov	 eax, DWORD PTR [esi]
  000a9	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ad	75 03		 jne	 SHORT $LN56@Insert_at

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  000af	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN56@Insert_at:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  000b2	8b 03		 mov	 eax, DWORD PTR [ebx]
  000b4	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  000b7	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  000ba	8b 00		 mov	 eax, DWORD PTR [eax]
  000bc	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  000bf	75 0b		 jne	 SHORT $LN57@Insert_at

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  000c1	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 532  : 		_Wherenode->_Parent = _Pnode;

  000c4	8b fb		 mov	 edi, ebx
  000c6	89 16		 mov	 DWORD PTR [esi], edx
  000c8	89 33		 mov	 DWORD PTR [ebx], esi
  000ca	eb 1d		 jmp	 SHORT $LN97@Insert_at
$LN57@Insert_at:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  000cc	8b 03		 mov	 eax, DWORD PTR [ebx]
  000ce	3b 10		 cmp	 edx, DWORD PTR [eax]
  000d0	75 0a		 jne	 SHORT $LN59@Insert_at

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  000d2	89 30		 mov	 DWORD PTR [eax], esi

; 532  : 		_Wherenode->_Parent = _Pnode;

  000d4	8b fb		 mov	 edi, ebx
  000d6	89 16		 mov	 DWORD PTR [esi], edx
  000d8	89 33		 mov	 DWORD PTR [ebx], esi
  000da	eb 0d		 jmp	 SHORT $LN97@Insert_at
$LN59@Insert_at:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  000dc	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 532  : 		_Wherenode->_Parent = _Pnode;

  000df	8b fb		 mov	 edi, ebx
  000e1	89 16		 mov	 DWORD PTR [esi], edx
  000e3	89 33		 mov	 DWORD PTR [ebx], esi
  000e5	eb 02		 jmp	 SHORT $LN97@Insert_at
$LN99@Insert_at:
  000e7	8b f1		 mov	 esi, ecx
$LN97@Insert_at:

; 1858 : 						_My_data._Lrotate(_Pnode);
; 1859 : 						}
; 1860 : 
; 1861 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

  000e9	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 1862 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

  000ed	8b 07		 mov	 eax, DWORD PTR [edi]
  000ef	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f2	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1863 : 					_My_data._Rrotate(_Pnode->_Parent->_Parent);

  000f6	8b 07		 mov	 eax, DWORD PTR [edi]
  000f8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  000fb	8b 31		 mov	 esi, DWORD PTR [ecx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  000fd	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00100	89 01		 mov	 DWORD PTR [ecx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  00102	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00105	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00109	75 03		 jne	 SHORT $LN63@Insert_at

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  0010b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN63@Insert_at:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0010e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00111	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00114	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  00117	8b 00		 mov	 eax, DWORD PTR [eax]
  00119	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0011c	75 0b		 jne	 SHORT $LN64@Insert_at

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  0011e	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00121	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 1864 : 					}
; 1865 : 				}
; 1866 : 			else

  00124	e9 cc 00 00 00	 jmp	 $LN101@Insert_at
$LN64@Insert_at:

; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00129	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0012c	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  0012f	75 0b		 jne	 SHORT $LN66@Insert_at

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  00131	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00134	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 1864 : 					}
; 1865 : 				}
; 1866 : 			else

  00137	e9 b9 00 00 00	 jmp	 $LN101@Insert_at
$LN66@Insert_at:

; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  0013c	89 30		 mov	 DWORD PTR [eax], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  0013e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 1864 : 					}
; 1865 : 				}
; 1866 : 			else

  00141	e9 af 00 00 00	 jmp	 $LN101@Insert_at
$LN12@Insert_at:

; 1867 : 				{	// fixup red-red in right subtree
; 1868 : 				_Wherenode = _Pnode->_Parent->_Parent->_Left;
; 1869 : 				if (_Wherenode->_Color == this->_Red)

  00146	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  0014a	75 1b		 jne	 SHORT $LN17@Insert_at
$LN102@Insert_at:

; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

  0014c	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1
  00150	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1
  00154	8b 07		 mov	 eax, DWORD PTR [edi]
  00156	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00159	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0
  0015d	8b 07		 mov	 eax, DWORD PTR [edi]
  0015f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00162	e9 91 00 00 00	 jmp	 $LN18@Insert_at
$LN17@Insert_at:

; 1870 : 					{	// parent has two red children, blacken both
; 1871 : 					_Pnode->_Parent->_Color = this->_Black;
; 1872 : 					_Wherenode->_Color = this->_Black;
; 1873 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;
; 1874 : 					_Pnode = _Pnode->_Parent->_Parent;
; 1875 : 					}
; 1876 : 				else
; 1877 : 					{	// parent has red and black children
; 1878 : 					if (_Pnode == _Pnode->_Parent->_Left)

  00167	8b 01		 mov	 eax, DWORD PTR [ecx]
  00169	3b d0		 cmp	 edx, eax
  0016b	75 3e		 jne	 SHORT $LN19@Insert_at

; 1879 : 						{	// rotate left child to right
; 1880 : 						_Pnode = _Pnode->_Parent;

  0016d	8b d1		 mov	 edx, ecx

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  0016f	8b c8		 mov	 ecx, eax

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  00171	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00174	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  00176	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00179	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0017d	75 03		 jne	 SHORT $LN70@Insert_at

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  0017f	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN70@Insert_at:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  00182	8b 03		 mov	 eax, DWORD PTR [ebx]
  00184	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00187	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  0018a	8b 00		 mov	 eax, DWORD PTR [eax]
  0018c	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  0018f	75 05		 jne	 SHORT $LN71@Insert_at

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00191	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00194	eb 0e		 jmp	 SHORT $LN74@Insert_at
$LN71@Insert_at:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00196	8b 03		 mov	 eax, DWORD PTR [ebx]
  00198	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0019b	75 05		 jne	 SHORT $LN73@Insert_at

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0019d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 551  : 			}
; 552  : 		else

  001a0	eb 02		 jmp	 SHORT $LN74@Insert_at
$LN73@Insert_at:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  001a2	89 08		 mov	 DWORD PTR [eax], ecx
$LN74@Insert_at:

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  001a4	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  001a7	8b fb		 mov	 edi, ebx
  001a9	89 0b		 mov	 DWORD PTR [ebx], ecx
$LN19@Insert_at:

; 1881 : 						_My_data._Rrotate(_Pnode);
; 1882 : 						}
; 1883 : 
; 1884 : 					_Pnode->_Parent->_Color = this->_Black;	// propagate red up

  001ab	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 1885 : 					_Pnode->_Parent->_Parent->_Color = this->_Red;

  001af	8b 07		 mov	 eax, DWORD PTR [edi]
  001b1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001b4	c6 40 0c 00	 mov	 BYTE PTR [eax+12], 0

; 1886 : 					_My_data._Lrotate(_Pnode->_Parent->_Parent);

  001b8	8b 07		 mov	 eax, DWORD PTR [edi]
  001ba	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  001bd	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  001c0	8b 06		 mov	 eax, DWORD PTR [esi]
  001c2	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  001c5	8b 06		 mov	 eax, DWORD PTR [esi]
  001c7	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001cb	75 03		 jne	 SHORT $LN77@Insert_at

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  001cd	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN77@Insert_at:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  001d0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001d3	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  001d6	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
  001d9	8b 00		 mov	 eax, DWORD PTR [eax]
  001db	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  001de	75 05		 jne	 SHORT $LN78@Insert_at

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  001e0	89 70 04	 mov	 DWORD PTR [eax+4], esi
  001e3	eb 0e		 jmp	 SHORT $LN81@Insert_at
$LN78@Insert_at:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  001e5	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  001e8	3b 08		 cmp	 ecx, DWORD PTR [eax]
  001ea	75 04		 jne	 SHORT $LN80@Insert_at

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  001ec	89 30		 mov	 DWORD PTR [eax], esi

; 525  : 			}
; 526  : 		else

  001ee	eb 03		 jmp	 SHORT $LN81@Insert_at
$LN80@Insert_at:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  001f0	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN81@Insert_at:

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  001f3	89 0e		 mov	 DWORD PTR [esi], ecx
$LN101@Insert_at:

; 1838 : 				}
; 1839 : 			}
; 1840 : 
; 1841 : 		for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == this->_Red; )

  001f5	89 71 04	 mov	 DWORD PTR [ecx+4], esi
$LN18@Insert_at:
  001f8	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001fb	80 78 0c 00	 cmp	 BYTE PTR [eax+12], 0
  001ff	0f 84 71 fe ff
	ff		 je	 $LL2@Insert_at
  00205	8b 4d fc	 mov	 ecx, DWORD PTR _this$1$[ebp]
  00208	8b 5d 18	 mov	 ebx, DWORD PTR __Node$[ebp]
  0020b	5f		 pop	 edi
  0020c	5e		 pop	 esi
$LN3@Insert_at:

; 1887 : 					}
; 1888 : 				}
; 1889 : 			}
; 1890 : 
; 1891 : 		_My_data._Root()->_Color = this->_Black;	// root is always black

  0020d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0020f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00212	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 42   : 		: _Ptr(_Pnode)

  00216	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00219	89 18		 mov	 DWORD PTR [eax], ebx

; 1892 : 		return (iterator(_Newnode, _STD addressof(_My_data)));

  0021b	5b		 pop	 ebx

; 1893 : 		}

  0021c	8b e5		 mov	 esp, ebp
  0021e	5d		 pop	 ebp
  0021f	c2 14 00	 ret	 20			; 00000014H
$LN100@Insert_at:
??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
__Newnode$GSCopy$ = -32					; size = 4
_this$GSCopy$1$ = -28					; size = 4
$T25 = -28						; size = 4
__Newnode$GSCopy$1$ = -24				; size = 4
$T34 = -24						; size = 4
__Addleft$53 = -20					; size = 1
__$EHRec$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
__Leftish$dead$ = 12					; size = 1
__Val$ = 16						; size = 4
__Newnode$ = 20						; size = 4
??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_nohint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>, COMDAT
; _this$ = ecx

; 1733 : 		{	// try to insert node, on left if _Leftish

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 14	 sub	 esp, 20			; 00000014H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b c1		 mov	 eax, ecx
  0002d	89 45 e4	 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax
  00030	8b 7d 14	 mov	 edi, DWORD PTR __Newnode$[ebp]
  00033	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]

; 1734 : 		auto& _My_data = this->_Get_data();
; 1735 : 		_TRY_BEGIN

  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1736 : 		_Nodeptr _Wherenode = _My_data._Myhead;

  0003d	8b 00		 mov	 eax, DWORD PTR [eax]
  0003f	8b d0		 mov	 edx, eax

; 1737 : 		_Nodeptr _Trynode = _Wherenode->_Parent;
; 1738 : 		bool _Addleft = true;	// add to left of head if tree empty

  00041	b0 01		 mov	 al, 1
  00043	89 7d e8	 mov	 DWORD PTR __Newnode$GSCopy$1$[ebp], edi
  00046	89 7d e0	 mov	 DWORD PTR __Newnode$GSCopy$[ebp], edi
  00049	88 45 ec	 mov	 BYTE PTR __Addleft$53[ebp], al
  0004c	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 1739 : 
; 1740 : 		while (!_Trynode->_Isnil)

  0004f	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00053	75 28		 jne	 SHORT $LN281@Insert_noh
  00055	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	8b 30		 mov	 esi, DWORD PTR [eax]
  0005a	66 0f 1f 44 00
	00		 npad	 6
$LL2@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 141  : 		return (_Left < _Right);

  00060	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1742 : 			_Wherenode = _Trynode;

  00063	8b d1		 mov	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 141  : 		return (_Left < _Right);

  00065	3b f0		 cmp	 esi, eax
  00067	0f 92 45 ec	 setb	 BYTE PTR __Addleft$53[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1756 : 			_Trynode = _Addleft ? _Trynode->_Left : _Trynode->_Right;

  0006b	73 04		 jae	 SHORT $LN16@Insert_noh
  0006d	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0006f	eb 03		 jmp	 SHORT $LN17@Insert_noh
$LN16@Insert_noh:
  00071	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
$LN17@Insert_noh:

; 1739 : 
; 1740 : 		while (!_Trynode->_Isnil)

  00074	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00078	74 e6		 je	 SHORT $LL2@Insert_noh
  0007a	8a 45 ec	 mov	 al, BYTE PTR __Addleft$53[ebp]
$LN281@Insert_noh:

; 42   : 		: _Ptr(_Pnode)

  0007d	8b f2		 mov	 esi, edx

; 1757 : 			}
; 1758 : 
; 1759 : #pragma warning(push)
; 1760 : #pragma warning(disable: 4127)	// conditional expression is constant
; 1761 : 		if (this->_Multi)
; 1762 : 			{
; 1763 : 			return (_Pairib(_Insert_at(_Addleft, _Wherenode,
; 1764 : 				_STD forward<_Valty>(_Val), _Newnode), true));
; 1765 : 			}
; 1766 : 		else
; 1767 : 			{	// insert only if unique
; 1768 : 			iterator _Where = iterator(_Wherenode, _STD addressof(_My_data));
; 1769 : 			if (!_Addleft)

  0007f	84 c0		 test	 al, al
  00081	74 78		 je	 SHORT $LN120@Insert_noh

; 42   : 		: _Ptr(_Pnode)

  00083	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00086	8b 01		 mov	 eax, DWORD PTR [ecx]
  00088	3b 10		 cmp	 edx, DWORD PTR [eax]

; 1770 : 				{	// need to test if insert after is okay
; 1771 : 				}
; 1772 : 			else if (_Where == begin())

  0008a	75 1b		 jne	 SHORT $LN11@Insert_noh

; 1774 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  0008c	57		 push	 edi
  0008d	51		 push	 ecx
  0008e	52		 push	 edx
  0008f	6a 01		 push	 1
  00091	8d 45 e4	 lea	 eax, DWORD PTR $T25[ebp]
  00094	50		 push	 eax
  00095	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	89 0b		 mov	 DWORD PTR [ebx], ecx

; 173  : 				second(_STD forward<_Other2>(_Val2))

  0009e	c6 43 04 01	 mov	 BYTE PTR [ebx+4], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1774 : 				return (_Pairib(_Insert_at(true, _Wherenode,

  000a2	e9 d5 00 00 00	 jmp	 $LN289@Insert_noh
$LN11@Insert_noh:

; 86   : 		if (_Ptr->_Isnil)

  000a7	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000ab	74 05		 je	 SHORT $LN117@Insert_noh

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

  000ad	8b 72 08	 mov	 esi, DWORD PTR [edx+8]
  000b0	eb 49		 jmp	 SHORT $LN120@Insert_noh
$LN117@Insert_noh:

; 89   : 			}
; 90   : 		else if (_Ptr->_Left->_Isnil)

  000b2	8b 02		 mov	 eax, DWORD PTR [edx]
  000b4	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000b8	74 2b		 je	 SHORT $LN119@Insert_noh

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

  000ba	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000bd	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c1	75 18		 jne	 SHORT $LN116@Insert_noh
  000c3	8b ca		 mov	 ecx, edx
$LL115@Insert_noh:
  000c5	8b f8		 mov	 edi, eax
  000c7	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000c9	75 0d		 jne	 SHORT $LN286@Insert_noh

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  000cb	8b f0		 mov	 esi, eax
  000cd	8b cf		 mov	 ecx, edi
  000cf	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000d2	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000d6	74 ed		 je	 SHORT $LL115@Insert_noh
$LN286@Insert_noh:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

  000d8	8b 7d e8	 mov	 edi, DWORD PTR __Newnode$GSCopy$1$[ebp]
$LN116@Insert_noh:
  000db	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000df	75 1a		 jne	 SHORT $LN120@Insert_noh

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

  000e1	8b f0		 mov	 esi, eax

; 101  : 				}
; 102  : 			}
; 103  : 		else

  000e3	eb 16		 jmp	 SHORT $LN120@Insert_noh
$LN119@Insert_noh:

; 104  : 			{
; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

  000e5	8b f0		 mov	 esi, eax

; 479  : 		while (!_Pnode->_Right->_Isnil)

  000e7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ea	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000ee	75 0b		 jne	 SHORT $LN120@Insert_noh
$LL124@Insert_noh:

; 480  : 			_Pnode = _Pnode->_Right;

  000f0	8b f0		 mov	 esi, eax
  000f2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000f5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f9	74 f5		 je	 SHORT $LL124@Insert_noh
$LN120@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef

; 141  : 		return (_Left < _Right);

  000fb	8b 4d 10	 mov	 ecx, DWORD PTR __Val$[ebp]
  000fe	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00101	3b 01		 cmp	 eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1782 : 			if (_DEBUG_LT_PRED(this->_Getcomp(),

  00103	73 1c		 jae	 SHORT $LN13@Insert_noh

; 1786 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  00105	57		 push	 edi
  00106	51		 push	 ecx
  00107	8b 4d e4	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0010a	8d 45 e8	 lea	 eax, DWORD PTR $T34[ebp]
  0010d	52		 push	 edx
  0010e	ff 75 ec	 push	 DWORD PTR __Addleft$53[ebp]
  00111	50		 push	 eax
  00112	e8 00 00 00 00	 call	 ??$_Insert_at@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@_NPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@1@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_at<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00117	8b 00		 mov	 eax, DWORD PTR [eax]
  00119	89 03		 mov	 DWORD PTR [ebx], eax

; 173  : 				second(_STD forward<_Other2>(_Val2))

  0011b	c6 43 04 01	 mov	 BYTE PTR [ebx+4], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1786 : 				return (_Pairib(_Insert_at(_Addleft, _Wherenode,

  0011f	eb 5b		 jmp	 SHORT $LN289@Insert_noh
$LN13@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1825 : 		return (_BUF_SIZE <= _Myres);

  00121	8b 4f 28	 mov	 ecx, DWORD PTR [edi+40]
  00124	83 f9 08	 cmp	 ecx, 8

; 3987 : 		if (_My_data._Large_string_engaged())

  00127	72 2e		 jb	 SHORT $LN212@Insert_noh
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00129	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0012c	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00133	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00139	72 12		 jb	 SHORT $LN211@Insert_noh

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0013b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0013e	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00141	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00143	83 c0 fc	 add	 eax, -4			; fffffffcH
  00146	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00149	77 47		 ja	 SHORT $LN208@Insert_noh

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0014b	8b c2		 mov	 eax, edx
$LN211@Insert_noh:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0014d	51		 push	 ecx
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00154	83 c4 08	 add	 esp, 8
$LN212@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  00157	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3995 : 		_My_data._Mysize = 0;

  00159	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00160	6a 2c		 push	 44			; 0000002cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3996 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00162	c7 47 28 07 00
	00 00		 mov	 DWORD PTR [edi+40], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00169	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 359  : 		_Left = _Right;

  0016a	66 89 47 14	 mov	 WORD PTR [edi+20], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0016e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00173	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00176	89 33		 mov	 DWORD PTR [ebx], esi

; 173  : 				second(_STD forward<_Other2>(_Val2))

  00178	c6 43 04 00	 mov	 BYTE PTR [ebx+4], 0
$LN289@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1800 : 		}

  0017c	8b c3		 mov	 eax, ebx
  0017e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00181	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00188	59		 pop	 ecx
  00189	5f		 pop	 edi
  0018a	5e		 pop	 esi
  0018b	5b		 pop	 ebx
  0018c	8b e5		 mov	 esp, ebp
  0018e	5d		 pop	 ebp
  0018f	c2 10 00	 ret	 16			; 00000010H
$LN208@Insert_noh:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00192	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
__catch$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z$0:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1797 : 		_Destroy_if_node(_Newnode);

  00198	ff 75 e0	 push	 DWORD PTR __Newnode$GSCopy$[ebp]
  0019b	e8 00 00 00 00	 call	 ?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Destroy_if_node

; 1798 : 		_RERAISE;

  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN288@Insert_noh:
  001a9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a dc	 mov	 ecx, DWORD PTR [edx-36]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_nohint@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@2@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAE?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@1@_NAAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Insert_nohint<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &,std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z PROC ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ENDP ; std::_Get_unwrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@H@Z
_TEXT	SEGMENT
??$_Get_unwrapped_n@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@H@Z PROC ; std::_Get_unwrapped_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,0>, COMDAT
; __Src$ = ecx
; ___formal$dead$ = edx

; 809  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 810  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped_n@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H$0A@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@H@Z ENDP ; std::_Get_unwrapped_n<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::_Ptr_move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 1087 : 	return {};

  00000	32 c0		 xor	 al, al

; 1088 : 	}

  00002	c3		 ret	 0
??$_Ptr_move_cat@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::_Ptr_move_cat<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 228  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 148  : 		_Last(_Dest),

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]

; 229  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};
; 230  : 	for (; _First != _Last; ++_First)

  00007	3b ca		 cmp	 ecx, edx
  00009	74 3e		 je	 SHORT $LN3@Uninitiali
  0000b	0f 1f 44 00 00	 npad	 5
$LL4@Uninitiali:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00010	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1785 : 		_Myres(0)

  00017	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  0001e	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00021	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0
  00024	f3 0f 7e 41 10	 movq	 xmm0, QWORD PTR [ecx+16]
  00029	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  0002e	83 c6 18	 add	 esi, 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  00031	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00038	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  0003f	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  00042	83 c1 18	 add	 ecx, 24			; 00000018H

; 229  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};
; 230  : 	for (; _First != _Last; ++_First)

  00045	3b ca		 cmp	 ecx, edx
  00047	75 c7		 jne	 SHORT $LL4@Uninitiali
$LN3@Uninitiali:

; 158  : 		_Destroy_range(_First, _Last, _Al);

  00049	51		 push	 ecx
  0004a	8b d6		 mov	 edx, esi
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  00053	83 c4 04	 add	 esp, 4

; 231  : 		{
; 232  : 		_Backout._Emplace_back(_STD move(*_First));
; 233  : 		}
; 234  : 
; 235  : 	return (_Backout._Release());

  00056	8b c6		 mov	 eax, esi
  00058	5e		 pop	 esi

; 236  : 	}

  00059	5d		 pop	 ebp
  0005a	c3		 ret	 0
??$_Uninitialized_move_al_unchecked@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAV12@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@YAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@PAV10@QAV10@1AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z
_TEXT	SEGMENT
??$_Seek_wrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z PROC ; std::_Seek_wrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; __It$ = ecx
; __UIt$ = edx

; 872  : 	_It = _UIt;

  00000	89 11		 mov	 DWORD PTR [ecx], edx

; 873  : 	}

  00002	c3		 ret	 0
??$_Seek_wrapped@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAXAAPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QAV10@@Z ENDP ; std::_Seek_wrapped<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??$_Kfn@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@SAABQAUHKEY__@@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
_TEXT	SEGMENT
??$_Kfn@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@SAABQAUHKEY__@@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC ; std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0>::_Kfn<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT
; __Val$ = ecx

; 71   : 		return (_Val.first);

  00000	8b c1		 mov	 eax, ecx

; 72   : 		}

  00002	c3		 ret	 0
??$_Kfn@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@SAABQAUHKEY__@@ABU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ENDP ; std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0>::_Kfn<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c2 04 00	 ret	 4
?__autoclassinit2@?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z PROC ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0000e	c2 04 00	 ret	 4
?__autoclassinit2@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEXI@Z ENDP ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release, COMDAT
; _this$ = ecx

; 170  : 		_First = _Last;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 171  : 		return (_Last);
; 172  : 		}

  00005	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 158  : 		_Destroy_range(_First, _Last, _Al);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	51		 push	 ecx
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	e8 00 00 00 00	 call	 ??$_Destroy_range@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAXPAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
  0000b	59		 pop	 ecx

; 159  : 		}

  0000c	c3		 ret	 0
??1?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::~_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >, COMDAT
; _this$ = ecx

; 150  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 147  : 		: _First(_Dest),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 148  : 		_Last(_Dest),

  00008	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 149  : 		_Al(_Al_)

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Al_$[ebp]
  0000e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 151  : 		}

  00011	8b c1		 mov	 eax, ecx
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAE@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@AAV?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
tv321 = -4						; size = 4
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator--, COMDAT
; _this$ = ecx

; 354  : 		{	// predecrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 86   : 		if (_Ptr->_Isnil)

  00007	8b 16		 mov	 edx, DWORD PTR [esi]
  00009	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0000d	74 0c		 je	 SHORT $LN8@operator

; 87   : 			{
; 88   : 			_Ptr = _Ptr->_Right;	// end() ==> rightmost

  0000f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00012	89 06		 mov	 DWORD PTR [esi], eax

; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}

  00014	8b c6		 mov	 eax, esi
  00016	5e		 pop	 esi
  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN8@operator:

; 90   : 		else if (_Ptr->_Left->_Isnil)

  0001b	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0001d	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00021	74 3c		 je	 SHORT $LN10@operator

; 91   : 			{	// climb looking for left subtree
; 92   : 			_Nodeptr _Pnode;
; 93   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Left)

  00023	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00026	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0002a	75 24		 jne	 SHORT $LN27@operator
  0002c	57		 push	 edi
  0002d	8b ca		 mov	 ecx, edx
  0002f	8b fa		 mov	 edi, edx
  00031	53		 push	 ebx
$LL6@operator:
  00032	8b d8		 mov	 ebx, eax
  00034	89 45 fc	 mov	 DWORD PTR tv321[ebp], eax
  00037	8b d7		 mov	 edx, edi
  00039	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0003b	75 11		 jne	 SHORT $LN29@operator

; 94   : 				{
; 95   : 				_Ptr = _Pnode;	// ==> parent while left subtree

  0003d	89 06		 mov	 DWORD PTR [esi], eax
  0003f	8b c8		 mov	 ecx, eax
  00041	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00044	8b f9		 mov	 edi, ecx
  00046	8b d3		 mov	 edx, ebx
  00048	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004c	74 e4		 je	 SHORT $LL6@operator
$LN29@operator:
  0004e	5b		 pop	 ebx
  0004f	5f		 pop	 edi
$LN27@operator:

; 96   : 				}
; 97   : 
; 98   : 			if (!_Ptr->_Isnil)

  00050	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00054	75 27		 jne	 SHORT $LN30@operator

; 99   : 				{	// decrement non-begin()
; 100  : 				_Ptr = _Pnode;	// ==> parent if not head

  00056	89 06		 mov	 DWORD PTR [esi], eax

; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}

  00058	8b c6		 mov	 eax, esi
  0005a	5e		 pop	 esi
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c3		 ret	 0
$LN10@operator:

; 479  : 		while (!_Pnode->_Right->_Isnil)

  0005f	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00062	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00066	75 13		 jne	 SHORT $LN16@operator
  00068	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL15@operator:

; 480  : 			_Pnode = _Pnode->_Right;

  00070	8b c8		 mov	 ecx, eax
  00072	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00075	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00079	74 f5		 je	 SHORT $LL15@operator
$LN16@operator:

; 105  : 			_Ptr = _Mytree::_Max(_Ptr->_Left);	// ==> largest of left subtree

  0007b	89 0e		 mov	 DWORD PTR [esi], ecx
$LN30@operator:

; 355  : 		--static_cast<_Mybase&>(*this);
; 356  : 		return (*this);
; 357  : 		}

  0007d	8b c6		 mov	 eax, esi
  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >::operator--
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::max_size, COMDAT
; _this$dead$ = ecx

; 1275 : 		return (_Alnode_traits::max_size(this->_Getal()));

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 1276 : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::max_size, COMDAT
; ___formal$dead$ = ecx

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	b8 5d 74 d1 05	 mov	 eax, 97612893		; 05d1745dH

; 893  : 		}

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1010 : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1011 : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buy_if_not_node@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PAU21@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
_TEXT	SEGMENT
__Node$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
??$_Buy_if_not_node@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PAU21@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buy_if_not_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>, COMDAT
; _this$dead$ = ecx

; 1574 : 		{	// node exists, just return it

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1575 : 		return (_Node);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Node$[ebp]

; 1576 : 		}

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
??$_Buy_if_not_node@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@U?$less@PAUHKEY__@@@3@V?$allocator@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@3@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@PAX@1@PAU21@AAU?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<HKEY__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >,std::less<HKEY__ *>,std::allocator<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > >,0> >::_Buy_if_not_node<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool,0>, COMDAT
; _this$ = ecx

; 174  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 173  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 175  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@$$QA_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@$$QA_N@Z PROC ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > > &,bool,0>, COMDAT
; _this$ = ecx

; 174  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 172  : 		: first(_STD forward<_Other1>(_Val1)),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Val1$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 173  : 				second(_STD forward<_Other2>(_Val2))

  0000a	8b 45 0c	 mov	 eax, DWORD PTR __Val2$[ebp]
  0000d	8a 00		 mov	 al, BYTE PTR [eax]
  0000f	88 41 04	 mov	 BYTE PTR [ecx+4], al

; 175  : 		}

  00012	8b c1		 mov	 eax, ecx
  00014	5d		 pop	 ebp
  00015	c2 08 00	 ret	 8
??$?0AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@_N@std@@QAE@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool>::pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > >,bool><std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > > &,bool,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 163  : 		{	// construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h

; 187  :         return _Where;

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00006	8b 55 08	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]

; 1784 : 		_Mysize(0),

  00009	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 1785 : 		_Myres(0)

  00010	c7 40 14 00 00
	00 00		 mov	 DWORD PTR [eax+20], 0

; 2365 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

  00017	0f 10 02	 movups	 xmm0, XMMWORD PTR [edx]
  0001a	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  0001d	f3 0f 7e 42 10	 movq	 xmm0, QWORD PTR [edx+16]
  00022	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0

; 3976 : 		_My_data._Mysize = 0;

  00027	c7 42 10 00 00
	00 00		 mov	 DWORD PTR [edx+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  0002e	c7 42 14 0f 00
	00 00		 mov	 DWORD PTR [edx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00035	c6 02 00	 mov	 BYTE PTR [edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  00038	83 41 04 18	 add	 DWORD PTR [ecx+4], 24	; 00000018H

; 166  : 		}

  0003c	5d		 pop	 ebp
  0003d	c2 04 00	 ret	 4
??$_Emplace_back@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Uninitialized_backout_al@PAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::basic_string<char,std::char_traits<char>,std::allocator<char> > *,std::allocator<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > >::_Emplace_back<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > > >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > > &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@@std@@YAAAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QAUHKEY__@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::forward<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<HKEY__ * const,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > > > > > &>
_TEXT	ENDS
END
