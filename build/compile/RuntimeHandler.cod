; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27034.0 

	TITLE	c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_C@_0BL@CHOBNDMJ@Variable?5or?5value?5is?5null?4@ ; `string'
PUBLIC	??_C@_0CB@OJCABHLM@Allocated?5memory?5pointer?5is?5nul@ ; `string'
PUBLIC	??_C@_0L@DLBPKAOP@Function?3?5@			; `string'
PUBLIC	??_C@_05LHNIPNPB@?5?$DM?$HM?$DO?5@		; `string'
PUBLIC	??_C@_08PHLEJAAL@Module?3?5@			; `string'
PUBLIC	??_C@_0CA@LNJEDMFL@Can?$GAt?5find?5module?5or?5function?4?5@ ; `string'
PUBLIC	??_C@_05MEGJJFDG@?5?$DM?9?$DO?5@		; `string'
PUBLIC	??_C@_0CB@FHNJEIA@Can?8t?5find?5offset?5type?4?5Offset?3@ ; `string'
PUBLIC	??_C@_0BC@MFGAJMC@OEP?5value?5is?5null@		; `string'
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:PROC
EXTRN	__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:PROC
EXTRN	__imp__VirtualAlloc@16:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z:PROC
EXTRN	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	__imp_?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:PROC
EXTRN	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync
EXTRN	__imp_?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC
EXTRN	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
EXTRN	__imp_?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:PROC
EXTRN	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow
EXTRN	__imp_?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:PROC
EXTRN	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	__imp_?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC
EXTRN	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	__imp_?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:PROC
CONST	ENDS
;	COMDAT ??_C@_0BC@MFGAJMC@OEP?5value?5is?5null@
CONST	SEGMENT
??_C@_0BC@MFGAJMC@OEP?5value?5is?5null@ DB 'OEP value is null', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FHNJEIA@Can?8t?5find?5offset?5type?4?5Offset?3@
CONST	SEGMENT
??_C@_0CB@FHNJEIA@Can?8t?5find?5offset?5type?4?5Offset?3@ DB 'Can''t find'
	DB	' offset type. Offset: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEGJJFDG@?5?$DM?9?$DO?5@
CONST	SEGMENT
??_C@_05MEGJJFDG@?5?$DM?9?$DO?5@ DB ' <-> ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LNJEDMFL@Can?$GAt?5find?5module?5or?5function?4?5@
CONST	SEGMENT
??_C@_0CA@LNJEDMFL@Can?$GAt?5find?5module?5or?5function?4?5@ DB 'Can`t fi'
	DB	'nd module or function. ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PHLEJAAL@Module?3?5@
CONST	SEGMENT
??_C@_08PHLEJAAL@Module?3?5@ DB 'Module: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LHNIPNPB@?5?$DM?$HM?$DO?5@
CONST	SEGMENT
??_C@_05LHNIPNPB@?5?$DM?$HM?$DO?5@ DB ' <|> ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DLBPKAOP@Function?3?5@
CONST	SEGMENT
??_C@_0L@DLBPKAOP@Function?3?5@ DB 'Function: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OJCABHLM@Allocated?5memory?5pointer?5is?5nul@
CONST	SEGMENT
??_C@_0CB@OJCABHLM@Allocated?5memory?5pointer?5is?5nul@ DB 'Allocated mem'
	DB	'ory pointer is null', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CHOBNDMJ@Variable?5or?5value?5is?5null?4@
CONST	SEGMENT
??_C@_0BL@CHOBNDMJ@Variable?5or?5value?5is?5null?4@ DB 'Variable or value'
	DB	' is null.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	FLAT:??_R1A@A@3EA@ios_base@std@@8
	DD	FLAT:??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	050H
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
	DD	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ
	DD	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
	DD	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ
	DD	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
	DD	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z
	DD	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z
	DD	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DD	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DD	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z
	DD	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ
	DD	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allo'
	DB	'cator@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD FLAT:??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$r	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$r	ENDS
;	COMDAT ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD FLAT:??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DD	FLAT:??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z
CONST	ENDS
;	COMDAT ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	050H
	DD	04H
	DD	FLAT:??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	FLAT:??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
PUBLIC	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	??$construct@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@AAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@AAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::construct<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>
PUBLIC	??$forward@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@YAAAU?$pair@$$CBW4ImportType@SegmentHeader@@K@0@AAU10@@Z ; std::forward<std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Freenode0
PUBLIC	??$_Buynode@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buynode<std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> * &>
PUBLIC	??$_Copy_or_move@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_or_move<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,std::integral_constant<bool,0> >
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
PUBLIC	??$forward@ABU?$less@W4ImportType@SegmentHeader@@@std@@@std@@YAABU?$less@W4ImportType@SegmentHeader@@@0@ABU10@@Z ; std::forward<std::less<enum SegmentHeader::ImportType> const &>
PUBLIC	??$_Get_size_of_n@$0BI@@std@@YAII@Z		; std::_Get_size_of_n<24>
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::construct<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> *,std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> * &>
PUBLIC	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>
PUBLIC	??$?0ABU?$less@W4ImportType@SegmentHeader@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@W4ImportType@SegmentHeader@@@1@$$QAU21@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1><std::less<enum SegmentHeader::ImportType> const &,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >::allocate
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buyheadnode
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::size
PUBLIC	?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Construct
PUBLIC	??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABU?$less@W4ImportType@SegmentHeader@@@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,void>
PUBLIC	??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@W4ImportType@SegmentHeader@@@2@XZ ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Get_first
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABU?$less@W4ImportType@SegmentHeader@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Getcomp
PUBLIC	?key_comp@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AU?$less@W4ImportType@SegmentHeader@@@2@XZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::key_comp
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_first
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Getal
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::select_on_container_copy_construction
PUBLIC	??0?$multimap@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@@std@@QAE@ABV01@@Z ; std::multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >
PUBLIC	??0ImportInfo@SegmentHeader@@QAE@ABU01@@Z	; SegmentHeader::ImportInfo::ImportInfo
PUBLIC	??$construct@UImportInfo@SegmentHeader@@AAU12@@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAXAAV?$allocator@UImportInfo@SegmentHeader@@@1@QAUImportInfo@SegmentHeader@@AAU34@@Z ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::construct<SegmentHeader::ImportInfo,SegmentHeader::ImportInfo &>
PUBLIC	??$forward@AAUImportInfo@SegmentHeader@@@std@@YAAAUImportInfo@SegmentHeader@@AAU12@@Z ; std::forward<SegmentHeader::ImportInfo &>
PUBLIC	??$_Emplace_back@AAUImportInfo@SegmentHeader@@@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEXAAUImportInfo@SegmentHeader@@@Z ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::_Emplace_back<SegmentHeader::ImportInfo &>
PUBLIC	??0?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@PAUImportInfo@SegmentHeader@@AAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	??1?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::~_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEPAUImportInfo@SegmentHeader@@XZ ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::_Release
PUBLIC	?__autoclassinit2@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEXI@Z ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::__autoclassinit2
PUBLIC	??$_Seek_wrapped@UImportInfo@SegmentHeader@@@std@@YAXAAPAUImportInfo@SegmentHeader@@QAU12@@Z ; std::_Seek_wrapped<SegmentHeader::ImportInfo>
PUBLIC	??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ; std::_Uninitialized_copy_al_unchecked<SegmentHeader::ImportInfo *,SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	??$_Ptr_copy_cat@UImportInfo@SegmentHeader@@U12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUImportInfo@SegmentHeader@@0@Z ; std::_Ptr_copy_cat<SegmentHeader::ImportInfo,SegmentHeader::ImportInfo>
PUBLIC	??$_Get_unwrapped_n@UImportInfo@SegmentHeader@@H$0A@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@H@Z ; std::_Get_unwrapped_n<SegmentHeader::ImportInfo,int,0>
PUBLIC	??$_Get_unwrapped@UImportInfo@SegmentHeader@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@@Z ; std::_Get_unwrapped<SegmentHeader::ImportInfo>
PUBLIC	??0?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >
PUBLIC	??$_Idl_distance@PAUImportInfo@SegmentHeader@@PAU12@@std@@YAHABQAUImportInfo@SegmentHeader@@0@Z ; std::_Idl_distance<SegmentHeader::ImportInfo *,SegmentHeader::ImportInfo *>
PUBLIC	??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z ; std::_Uninitialized_copy<SegmentHeader::ImportInfo *,SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	??$?0V?$allocator@UImportInfo@SegmentHeader@@@std@@$$V@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1><std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	??$forward@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YA$$QAV?$allocator@UImportInfo@SegmentHeader@@@0@AAV10@@Z ; std::forward<std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	??$_Get_size_of_n@$0M@@std@@YAII@Z		; std::_Get_size_of_n<12>
PUBLIC	??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Ucopy<SegmentHeader::ImportInfo *>
PUBLIC	??$?0V?$allocator@UImportInfo@SegmentHeader@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > ><std::allocator<SegmentHeader::ImportInfo>,void>
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAIABV?$allocator@UImportInfo@SegmentHeader@@@2@@Z ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::max_size
PUBLIC	?allocate@?$allocator@UImportInfo@SegmentHeader@@@std@@QAEPAUImportInfo@SegmentHeader@@I@Z ; std::allocator<SegmentHeader::ImportInfo>::allocate
PUBLIC	?max_size@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::max_size
PUBLIC	?_Xlength@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@CAXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Xlength
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QBEABV?$allocator@UImportInfo@SegmentHeader@@@2@XZ ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_first
PUBLIC	?size@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::size
PUBLIC	?_Buy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAE_NI@Z ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Buy
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABV?$allocator@UImportInfo@SegmentHeader@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Getal
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SA?AV?$allocator@UImportInfo@SegmentHeader@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::select_on_container_copy_construction
PUBLIC	??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	??0?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@ABU01@@Z ; std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::destroy<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> *>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> *>
PUBLIC	??$construct@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@AAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@AAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::construct<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>
PUBLIC	??$forward@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@YAAAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@0@AAU10@@Z ; std::forward<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::deallocate
PUBLIC	?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buynode0
PUBLIC	?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Freenode0
PUBLIC	??$destroy@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::destroy<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >
PUBLIC	??$addressof@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@YAPAU?$pair@$$CBW4ImportType@SegmentHeader@@K@0@AAU10@@Z ; std::addressof<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
PUBLIC	??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buynode<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>
PUBLIC	??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Max
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Rrotate
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Erase
PUBLIC	?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Root
PUBLIC	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Rmost
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Extract
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator++
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_first
PUBLIC	?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAEXI@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::__autoclassinit2
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::clear
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Getal
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator++
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator!=
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Get_second
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::end
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::erase
PUBLIC	?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Freeheadnode
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Get_data
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
PUBLIC	??1?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::~_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::~_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >
PUBLIC	??1?$multimap@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@@std@@QAE@XZ ; std::multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::~multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >
PUBLIC	??1ImportInfo@SegmentHeader@@QAE@XZ		; SegmentHeader::ImportInfo::~ImportInfo
PUBLIC	??_GImportInfo@SegmentHeader@@QAEPAXI@Z		; SegmentHeader::ImportInfo::`scalar deleting destructor'
PUBLIC	??$destroy@UImportInfo@SegmentHeader@@@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAXAAV?$allocator@UImportInfo@SegmentHeader@@@1@QAUImportInfo@SegmentHeader@@@Z ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::destroy<SegmentHeader::ImportInfo>
PUBLIC	??$_Unfancy@UImportInfo@SegmentHeader@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@@Z ; std::_Unfancy<SegmentHeader::ImportInfo>
PUBLIC	??$_Copy_or_move@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_or_move<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,std::integral_constant<bool,0> >
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
PUBLIC	??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_One_then_variadic_args_t>
PUBLIC	??$_Destroy_range1@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAXPAUImportInfo@SegmentHeader@@0AAV?$allocator@UImportInfo@SegmentHeader@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	??$_Uninitialized_copy_al_unchecked@KKV?$allocator@K@std@@@std@@YAPAKQAK00AAV?$allocator@K@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<unsigned long,unsigned long,std::allocator<unsigned long> >
PUBLIC	??$_Ptr_copy_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_copy_cat<unsigned long,unsigned long>
PUBLIC	??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>
PUBLIC	??$?0ABU?$less@PBD@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PBD@1@$$QAU21@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1><std::less<char const *> const &,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_second
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::size
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Get_data
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >
PUBLIC	??$_Destroy_range@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAXPAUImportInfo@SegmentHeader@@0AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z ; std::_Destroy_range<std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> * &>
PUBLIC	??$move@AAD@std@@YA$$QADAAD@Z			; std::move<char &>
PUBLIC	??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
PUBLIC	??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ; std::forward<std::allocator<char> const &>
PUBLIC	??$forward@ABU?$less@PBD@std@@@std@@YAABU?$less@PBD@0@ABU10@@Z ; std::forward<std::less<char const *> const &>
PUBLIC	??$destroy@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::destroy<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> *>
PUBLIC	??$_Uninitialized_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ; std::_Uninitialized_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >
PUBLIC	??$?0V?$allocator@K@std@@$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@K@1@@Z ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1><std::allocator<unsigned long> >
PUBLIC	??$forward@V?$allocator@K@std@@@std@@YA$$QAV?$allocator@K@0@AAV10@@Z ; std::forward<std::allocator<unsigned long> >
PUBLIC	??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,void>
PUBLIC	??$forward@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@0@AAV10@@Z ; std::forward<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_second
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Get_data
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myend
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAEAAV?$allocator@UImportInfo@SegmentHeader@@@2@XZ ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_first
PUBLIC	?deallocate@?$allocator@UImportInfo@SegmentHeader@@@std@@QAEXQAUImportInfo@SegmentHeader@@I@Z ; std::allocator<SegmentHeader::ImportInfo>::deallocate
PUBLIC	?capacity@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::capacity
PUBLIC	?_Destroy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXPAUImportInfo@SegmentHeader@@0@Z ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Destroy
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@PBD@2@XZ ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Get_first
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAV?$allocator@UImportInfo@SegmentHeader@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Getal
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myend
PUBLIC	?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
PUBLIC	?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@PBD@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Getcomp
PUBLIC	??1?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::~vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >
PUBLIC	?key_comp@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AU?$less@PBD@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::key_comp
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::deallocate
PUBLIC	??1?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@XZ ; std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::~pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >
PUBLIC	??_G?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEPAXI@Z ; std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::`scalar deleting destructor'
PUBLIC	??$_Get_size_of_n@$0CA@@std@@YAII@Z		; std::_Get_size_of_n<32>
PUBLIC	??$construct@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::construct<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> *,std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> * &>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> *>
PUBLIC	??$swap@DX@std@@YAXAAD0@Z			; std::swap<char,void>
PUBLIC	??$destroy@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::destroy<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >
PUBLIC	??$addressof@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@YAPAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@0@AAU10@@Z ; std::addressof<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >
PUBLIC	??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$_Max_value@PAD@std@@YAABQADABQAD0@Z		; std::_Max_value<char *>
PUBLIC	??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>
PUBLIC	??$?0V?$allocator@K@std@@X@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAV?$allocator@K@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > ><std::allocator<unsigned long>,void>
PUBLIC	??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >::allocate
PUBLIC	?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Max
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Rrotate
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Erase
PUBLIC	?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
PUBLIC	?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Root
PUBLIC	?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Rmost
PUBLIC	?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Extract
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator++
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_first
PUBLIC	?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::__autoclassinit2
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::clear
PUBLIC	?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Construct
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Getal
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator++
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator!=
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_second
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Get_second
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::end
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase
PUBLIC	?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Freeheadnode
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Min
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Get_second
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Get_data
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Buy@?$vector@KV?$allocator@K@std@@@std@@AAE_NI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Buy
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Get_data
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Min
PUBLIC	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Lmost
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>
PUBLIC	??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator==
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tidy
PUBLIC	??1?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >
PUBLIC	?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Getal
PUBLIC	?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Get_data
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::select_on_container_copy_construction
PUBLIC	?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Lmost
PUBLIC	??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >
PUBLIC	??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator*
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator++
PUBLIC	??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator==
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SA?AV?$allocator@K@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<unsigned long> >::select_on_container_copy_construction
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Mylast
PUBLIC	?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ; std::pointer_traits<char *>::pointer_to
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
PUBLIC	?_Unchecked_begin@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Unchecked_end
PUBLIC	?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Unchecked_end
PUBLIC	??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator*
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator++
PUBLIC	??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator!=
PUBLIC	?_Unchecked_begin@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEPBUImportInfo@SegmentHeader@@XZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEPBUImportInfo@SegmentHeader@@XZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Unchecked_end
PUBLIC	??0?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@ABV01@@Z ; std::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::~_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >
PUBLIC	?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Unchecked_end
PUBLIC	??D?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@XZ ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator*
PUBLIC	??E?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator++
PUBLIC	??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator!=
PUBLIC	?InvokeOEP@RuntimeHandler@@QAEXXZ		; RuntimeHandler::InvokeOEP
PUBLIC	?__autoclassinit2@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEXI@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::__autoclassinit2
PUBLIC	?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
PUBLIC	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	?__autoclassinit2@?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::__autoclassinit2
PUBLIC	?ReconstructHotPoints@RuntimeHandler@@QAEXXZ	; RuntimeHandler::ReconstructHotPoints
PUBLIC	?ExtractSegment@RuntimeHandler@@QAEXXZ		; RuntimeHandler::ExtractSegment
PUBLIC	??1SegmentHeader@@QAE@XZ			; SegmentHeader::~SegmentHeader
PUBLIC	??0SegmentHeader@@QAE@ABV0@@Z			; SegmentHeader::SegmentHeader
PUBLIC	?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ	; Segment::GetHeader
PUBLIC	??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::~map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >
PUBLIC	?GetRelocations@SegmentHeader@@QAE?AV?$vector@KV?$allocator@K@std@@@std@@XZ ; SegmentHeader::GetRelocations
PUBLIC	?GetImports@SegmentHeader@@QAE?AV?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@XZ ; SegmentHeader::GetImports
PUBLIC	?eq@?$char_traits@D@std@@SA_NABD0@Z		; std::char_traits<char>::eq
EXTRN	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0SegmentHeader@@QAE@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0SegmentHeader@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0SegmentHeader@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SegmentHeader@@QAE@ABV0@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+4
__unwindtable$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$9
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$14
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$2
	DD	03H
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$3
	DD	05H
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$4
	DD	06H
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$6
	DD	08H
	DD	FLAT:__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$7
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__tryblocktable$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z$3
__catchsym$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$2
__catchsym$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z DD 0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z$3
__catchsym$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z$2
	DD	0ffffffffH
	DD	00H
__tryblocktable$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z$8
__catchsym$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__tryblocktable$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z$3
__catchsym$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$2
__catchsym$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$0
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
;	COMDAT ?eq@?$char_traits@D@std@@SA_NABD0@Z
_TEXT	SEGMENT
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		; std::char_traits<char>::eq, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 511  : 		return (_Left == _Right);

  00000	8a 01		 mov	 al, BYTE PTR [ecx]
  00002	3a 02		 cmp	 al, BYTE PTR [edx]
  00004	0f 94 c0	 sete	 al

; 512  : 		}

  00007	c3		 ret	 0
?eq@?$char_traits@D@std@@SA_NABD0@Z ENDP		; std::char_traits<char>::eq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
;	COMDAT ?GetImports@SegmentHeader@@QAE?AV?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetImports@SegmentHeader@@QAE?AV?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@XZ PROC ; SegmentHeader::GetImports, COMDAT
; _this$ = ecx

; 55   :     std::map <const char*, std::vector<ImportInfo>> GetImports() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 124  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  00003	51		 push	 ecx
  00004	51		 push	 ecx
  00005	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00008	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h

; 56   :         return m_imports;

  0000d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 57   :     }

  00010	5d		 pop	 ebp
  00011	c2 04 00	 ret	 4
?GetImports@SegmentHeader@@QAE?AV?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@XZ ENDP ; SegmentHeader::GetImports
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
;	COMDAT ?GetRelocations@SegmentHeader@@QAE?AV?$vector@KV?$allocator@K@std@@@std@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?GetRelocations@SegmentHeader@@QAE?AV?$vector@KV?$allocator@K@std@@@std@@XZ PROC ; SegmentHeader::GetRelocations, COMDAT
; _this$ = ecx

; 59   :     std::vector <DWORD> GetRelocations() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 60   :         return m_relocations;

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
  0000f	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 61   :     }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?GetRelocations@SegmentHeader@@QAE?AV?$vector@KV?$allocator@K@std@@@std@@XZ ENDP ; SegmentHeader::GetRelocations
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T17 = -4						; size = 4
??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::~map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 2113 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T17[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00015	6a 20		 push	 32			; 00000020H
  00017	ff 36		 push	 DWORD PTR [esi]
  00019	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
  00021	5e		 pop	 esi
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::~map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
;	COMDAT ?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ PROC	; Segment::GetHeader, COMDAT
; _this$ = ecx

; 39   : 	SegmentHeader GetHeader () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 124  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  00026	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00029	51		 push	 ecx
  0002a	56		 push	 esi
  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
  00032	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	51		 push	 ecx
  0003d	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00040	e8 00 00 00 00	 call	 ??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h

; 40   : 		return m_Header;

  00045	8b c7		 mov	 eax, edi

; 41   : 	}

  00047	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00051	59		 pop	 ecx
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ$1:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__ehhandler$?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetHeader@Segment@@QAE?AVSegmentHeader@@XZ ENDP	; Segment::GetHeader
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??0SegmentHeader@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0SegmentHeader@@QAE@ABV0@@Z PROC			; SegmentHeader::SegmentHeader, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SegmentHeader@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 124  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	51		 push	 ecx
  0002e	56		 push	 esi
  0002f	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
  00034	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	50		 push	 eax
  0003f	8d 4f 08	 lea	 ecx, DWORD PTR [edi+8]
  00042	e8 00 00 00 00	 call	 ??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
  00047	8b c7		 mov	 eax, edi
  00049	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00053	59		 pop	 ecx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	8b e5		 mov	 esp, ebp
  00058	5d		 pop	 ebp
  00059	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SegmentHeader@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__ehhandler$??0SegmentHeader@@QAE@ABV0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SegmentHeader@@QAE@ABV0@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SegmentHeader@@QAE@ABV0@@Z ENDP			; SegmentHeader::SegmentHeader
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??1SegmentHeader@@QAE@XZ
_TEXT	SEGMENT
$T54 = -4						; size = 4
??1SegmentHeader@@QAE@XZ PROC				; SegmentHeader::~SegmentHeader, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1913 : 		if (this->_Myfirst() != pointer())

  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000a	85 c0		 test	 eax, eax
  0000c	74 41		 je	 SHORT $LN6@SegmentHea

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0000e	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00011	2b c8		 sub	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00013	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00016	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001c	72 12		 jb	 SHORT $LN82@SegmentHea

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001e	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00021	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00024	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00026	83 c0 fc	 add	 eax, -4			; fffffffcH
  00029	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002c	77 42		 ja	 SHORT $LN79@SegmentHea

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002e	8b c2		 mov	 eax, edx
$LN82@SegmentHea:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00037	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0003e	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  00041	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 1920 : 			this->_Myend() = pointer();

  00048	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
$LN6@SegmentHea:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  0004f	8b 06		 mov	 eax, DWORD PTR [esi]

; 2113 : 		erase(begin(), end());

  00051	8b ce		 mov	 ecx, esi
  00053	50		 push	 eax
  00054	ff 30		 push	 DWORD PTR [eax]
  00056	8d 45 fc	 lea	 eax, DWORD PTR $T54[ebp]
  00059	50		 push	 eax
  0005a	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0005f	6a 20		 push	 32			; 00000020H
  00061	ff 36		 push	 DWORD PTR [esi]
  00063	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00068	83 c4 08	 add	 esp, 8
  0006b	5e		 pop	 esi
  0006c	8b e5		 mov	 esp, ebp
  0006e	5d		 pop	 ebp
  0006f	c3		 ret	 0
$LN79@SegmentHea:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN204@SegmentHea:
  00076	cc		 int	 3
??1SegmentHeader@@QAE@XZ ENDP				; SegmentHeader::~SegmentHeader
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
;	COMDAT ?ExtractSegment@RuntimeHandler@@QAEXXZ
_TEXT	SEGMENT
?ExtractSegment@RuntimeHandler@@QAEXXZ PROC		; RuntimeHandler::ExtractSegment, COMDAT
; _this$dead$ = ecx

; 4    :     //Allocate memory for segment, and set pointer.
; 5    :     PanicUtils::SetImportant (&Segment::UnsafeAllocatedPointer, reinterpret_cast<DWORD> (VirtualAlloc (NULL, SegmentHeader::Datacase::ALLOCATION, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE)));

  00000	6a 40		 push	 64			; 00000040H
  00002	68 00 30 00 00	 push	 12288			; 00003000H
  00007	68 40 89 96 00	 push	 9865536			; 00968940H
  0000c	6a 00		 push	 0
  0000e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 4    :     if (variable && value) {

  00014	85 c0		 test	 eax, eax
  00016	74 28		 je	 SHORT $LN4@ExtractSeg
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 8    :     PanicUtils::RequireNonNull (PanicUtils::Layers::INIT, reinterpret_cast<DWORD> (memcpy (reinterpret_cast<PVOID> (Segment::GetSafeAllocationPointer()), SegmentData, SegmentHeader::Datacase::SIZE)), "Allocated memory pointer is null");

  00018	68 00 6a 18 00	 push	 1600000			; 00186a00H
  0001d	68 00 00 00 00	 push	 OFFSET ?SegmentData@@3QBEB ; SegmentData
  00022	50		 push	 eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 5    :         *variable = value;

  00023	a3 00 00 00 00	 mov	 DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA, eax ; Segment::UnsafeAllocatedPointer
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 8    :     PanicUtils::RequireNonNull (PanicUtils::Layers::INIT, reinterpret_cast<DWORD> (memcpy (reinterpret_cast<PVOID> (Segment::GetSafeAllocationPointer()), SegmentData, SegmentHeader::Datacase::SIZE)), "Allocated memory pointer is null");

  00028	e8 00 00 00 00	 call	 _memcpy
  0002d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00030	85 c0		 test	 eax, eax
  00032	75 1b		 jne	 SHORT $LN15@ExtractSeg

; 14   :         PanicUtils::Release (layer, reason);

  00034	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CB@OJCABHLM@Allocated?5memory?5pointer?5is?5nul@
  00039	33 c9		 xor	 ecx, ecx
  0003b	e9 00 00 00 00	 jmp	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN4@ExtractSeg:

; 8    :         PanicUtils::Release (Layers::ROUTINE, reason);

  00040	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BL@CHOBNDMJ@Variable?5or?5value?5is?5null?4@
  00045	b9 01 00 00 00	 mov	 ecx, 1
  0004a	e9 00 00 00 00	 jmp	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN15@ExtractSeg:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 9    : }

  0004f	c3		 ret	 0
?ExtractSegment@RuntimeHandler@@QAEXXZ ENDP		; RuntimeHandler::ExtractSegment
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
;	COMDAT ?ReconstructHotPoints@RuntimeHandler@@QAEXXZ
_TEXT	SEGMENT
_<end>$L2$1$ = -220					; size = 4
$T153 = -216						; size = 24
$T140 = -216						; size = 24
$T54 = -212						; size = 20
$T3 = -212						; size = 20
_<end>$L1$1$ = -192					; size = 4
$T176 = -192						; size = 4
$T118 = -192						; size = 4
_this$GSCopy$1$ = -188					; size = 4
_functionPointer$1$ = -188				; size = 4
_<begin>$L2$1$ = -184					; size = 4
_message$187 = -180					; size = 152
_message$188 = -180					; size = 152
_$S1$189 = -28						; size = 12
_$S2$190 = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ReconstructHotPoints@RuntimeHandler@@QAEXXZ PROC	; RuntimeHandler::ReconstructHotPoints, COMDAT
; _this$ = ecx

; 11   : void RuntimeHandler::ReconstructHotPoints () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	50		 push	 eax
  00025	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00028	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002e	8b c1		 mov	 eax, ecx
  00030	89 85 44 ff ff
	ff		 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h

; 40   : 		return m_Header;

  00036	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 124  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  00038	51		 push	 ecx
  00039	56		 push	 esi
  0003a	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00040	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
  00045	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00048	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004f	50		 push	 eax
  00050	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp+8]
  00056	e8 00 00 00 00	 call	 ??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h

; 60   :         return m_relocations;

  0005b	8d 85 34 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp+8]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 17   :     for (const auto& relocation : m_Segment.GetHeader().GetRelocations ()) {

  00061	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h

; 60   :         return m_relocations;

  00068	50		 push	 eax
  00069	8d 4d e4	 lea	 ecx, DWORD PTR _$S1$189[ebp]
  0006c	e8 00 00 00 00	 call	 ??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 17   :     for (const auto& relocation : m_Segment.GetHeader().GetRelocations ()) {

  00071	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00077	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0007e	e8 00 00 00 00	 call	 ??1SegmentHeader@@QAE@XZ
  00083	8b 5d e4	 mov	 ebx, DWORD PTR _$S1$189[ebp]
  00086	33 c9		 xor	 ecx, ecx
  00088	8b 7d e8	 mov	 edi, DWORD PTR _$S1$189[ebp+4]
  0008b	33 f6		 xor	 esi, esi
  0008d	2b fb		 sub	 edi, ebx
  0008f	8b d3		 mov	 edx, ebx
  00091	83 c7 03	 add	 edi, 3
  00094	c1 ef 02	 shr	 edi, 2
  00097	3b 5d e8	 cmp	 ebx, DWORD PTR _$S1$189[ebp+4]
  0009a	0f 47 f9	 cmova	 edi, ecx
  0009d	85 ff		 test	 edi, edi
  0009f	74 22		 je	 SHORT $LN3@Reconstruc
$LL4@Reconstruc:

; 18   :         //Subtract value with old base address in segment from memory.
; 19   :         *reinterpret_cast<DWORD*> (Segment::UnsafeAllocatedPointer + relocation) -= SegmentHeader::Datacase::RUNTIME;

  000a1	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000a3	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  000a6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  000ab	46		 inc	 esi
  000ac	81 04 01 00 00
	a0 c2		 add	 DWORD PTR [ecx+eax], -1029701632 ; c2a00000H

; 20   :         //Add new base address in segment to relocations.
; 21   :         *reinterpret_cast<DWORD*> (Segment::UnsafeAllocatedPointer + relocation) += Segment::UnsafeAllocatedPointer;

  000b3	8b 42 fc	 mov	 eax, DWORD PTR [edx-4]
  000b6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  000bc	01 0c 08	 add	 DWORD PTR [eax+ecx], ecx
  000bf	3b f7		 cmp	 esi, edi
  000c1	75 de		 jne	 SHORT $LL4@Reconstruc
$LN3@Reconstruc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1913 : 		if (this->_Myfirst() != pointer())

  000c3	85 db		 test	 ebx, ebx
  000c5	74 39		 je	 SHORT $LN71@Reconstruc

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  000c7	8b 45 ec	 mov	 eax, DWORD PTR _$S1$189[ebp+8]
  000ca	2b c3		 sub	 eax, ebx
  000cc	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000cf	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  000d6	8b c3		 mov	 eax, ebx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000d8	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000de	72 16		 jb	 SHORT $LN147@Reconstruc

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000e0	8b 5b fc	 mov	 ebx, DWORD PTR [ebx-4]
  000e3	83 c1 23	 add	 ecx, 35			; 00000023H
  000e6	2b c3		 sub	 eax, ebx

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000e8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000eb	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ee	76 06		 jbe	 SHORT $LN147@Reconstruc
  000f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN147@Reconstruc:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000f6	51		 push	 ecx
  000f7	53		 push	 ebx
  000f8	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000fd	83 c4 08	 add	 esp, 8
$LN71@Reconstruc:
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h

; 40   : 		return m_Header;

  00100	8b b5 44 ff ff
	ff		 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 124  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  00106	51		 push	 ecx
  00107	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T54[ebp]
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h

; 40   : 		return m_Header;

  0010d	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 124  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  0010f	56		 push	 esi
  00110	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
  00115	8d 46 08	 lea	 eax, DWORD PTR [esi+8]
  00118	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0011f	50		 push	 eax
  00120	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T54[ebp+8]
  00126	e8 00 00 00 00	 call	 ??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
  0012b	51		 push	 ecx
  0012c	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T54[ebp]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 29   :     for (const auto& importsMap : m_Segment.GetHeader().GetImports ()) {

  00132	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 124  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  00139	50		 push	 eax
  0013a	8d 4d e8	 lea	 ecx, DWORD PTR _$S2$190[ebp]
  0013d	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 29   :     for (const auto& importsMap : m_Segment.GetHeader().GetImports ()) {

  00142	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1913 : 		if (this->_Myfirst() != pointer())

  00146	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR $T54[ebp+8]
  0014c	85 c9		 test	 ecx, ecx
  0014e	74 5a		 je	 SHORT $LN211@Reconstruc

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00150	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR $T54[ebp+16]
  00156	2b c1		 sub	 eax, ecx
  00158	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0015b	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  00162	8b c1		 mov	 eax, ecx

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00164	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  0016a	72 16		 jb	 SHORT $LN287@Reconstruc

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0016c	8b 49 fc	 mov	 ecx, DWORD PTR [ecx-4]
  0016f	83 c2 23	 add	 edx, 35			; 00000023H
  00172	2b c1		 sub	 eax, ecx

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;
; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00174	83 c0 fc	 add	 eax, -4			; fffffffcH
  00177	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0017a	76 06		 jbe	 SHORT $LN287@Reconstruc
  0017c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN287@Reconstruc:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00182	52		 push	 edx
  00183	51		 push	 ecx
  00184	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00189	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  0018c	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+8], 0

; 1919 : 			this->_Mylast() = pointer();

  00196	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+12], 0

; 1920 : 			this->_Myend() = pointer();

  001a0	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T54[ebp+16], 0
$LN211@Reconstruc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2113 : 		erase(begin(), end());

  001aa	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR $T54[ebp]
  001b0	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T54[ebp]
  001b6	50		 push	 eax
  001b7	ff 30		 push	 DWORD PTR [eax]
  001b9	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T118[ebp]
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  001c5	6a 20		 push	 32			; 00000020H
  001c7	ff b5 2c ff ff
	ff		 push	 DWORD PTR $T54[ebp]
  001cd	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  001d2	8b 45 e8	 mov	 eax, DWORD PTR _$S2$190[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  001d5	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  001d8	89 85 40 ff ff
	ff		 mov	 DWORD PTR _<end>$L1$1$[ebp], eax
  001de	8b 38		 mov	 edi, DWORD PTR [eax]
  001e0	3b f8		 cmp	 edi, eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 29   :     for (const auto& importsMap : m_Segment.GetHeader().GetImports ()) {

  001e2	0f 84 5f 01 00
	00		 je	 $LN782@Reconstruc
  001e8	0f 1f 84 00 00
	00 00 00	 npad	 8
$LL449@Reconstruc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1684 : 		return (this->_Myfirst());

  001f0	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]

; 1694 : 		return (this->_Mylast());

  001f3	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]

; 1684 : 		return (this->_Myfirst());

  001f6	89 9d 48 ff ff
	ff		 mov	 DWORD PTR _<begin>$L2$1$[ebp], ebx

; 1694 : 		return (this->_Mylast());

  001fc	89 8d 24 ff ff
	ff		 mov	 DWORD PTR _<end>$L2$1$[ebp], ecx
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 32   :         for (const auto& importInfo : importsMap.second) {

  00202	3b d9		 cmp	 ebx, ecx
  00204	0f 84 f1 00 00
	00		 je	 $LN5@Reconstruc
  0020a	66 0f 1f 44 00
	00		 npad	 6
$LL10@Reconstruc:

; 35   :             DWORD functionPointer = Utils::GetFunction (importsMap.first, importInfo.function);

  00210	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00213	8b 1b		 mov	 ebx, DWORD PTR [ebx]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 5    :    HMODULE hModule = GetModuleHandleA (module);

  00215	56		 push	 esi
  00216	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4

; 6    : 
; 7    :    if (!hModule) {

  0021c	85 c0		 test	 eax, eax
  0021e	75 07		 jne	 SHORT $LN482@Reconstruc

; 8    :        hModule = LoadLibraryA (module);

  00220	56		 push	 esi
  00221	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
$LN482@Reconstruc:

; 24   :    return reinterpret_cast<DWORD> (GetProcAddress(GetModule(module), function));

  00227	53		 push	 ebx
  00228	50		 push	 eax
  00229	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 35   :             DWORD functionPointer = Utils::GetFunction (importsMap.first, importInfo.function);

  0022f	8b d0		 mov	 edx, eax
  00231	89 95 44 ff ff
	ff		 mov	 DWORD PTR _functionPointer$1$[ebp], edx

; 36   : 
; 37   :             //Check non-nullptr at function and module. (Why don't use RequireNonNull? Because it's slow!)
; 38   :             if (!functionPointer) {

  00237	85 d2		 test	 edx, edx
  00239	0f 84 43 01 00
	00		 je	 $LN756@Reconstruc
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 498  : 		return (_Myhead->_Left);

  0023f	8b 9d 48 ff ff
	ff		 mov	 ebx, DWORD PTR _<begin>$L2$1$[ebp]
  00245	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]

; 42   : 		: _Ptr(_Pnode)

  00248	8b 31		 mov	 esi, DWORD PTR [ecx]

; 120  : 		return (_Ptr == _Right._Ptr);

  0024a	3b f1		 cmp	 esi, ecx
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 46   :             for (const auto& parsedOffset : importInfo.offsetsMap) {

  0024c	0f 84 8e 00 00
	00		 je	 $LN8@Reconstruc
$LL578@Reconstruc:

; 47   : 
; 48   :                 //More about ImportType: SegmentHeader.h
; 49   :                 switch (parsedOffset.first) {

  00252	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00255	83 e8 00	 sub	 eax, 0
  00258	74 1c		 je	 SHORT $LN17@Reconstruc
  0025a	83 e8 01	 sub	 eax, 1
  0025d	0f 85 b0 01 00
	00		 jne	 $LN783@Reconstruc

; 54   :                       break;
; 55   : 
; 56   :                     case SegmentHeader::ImportType::PUBLIC:
; 57   :                         //Patch global variables.
; 58   :                         *reinterpret_cast<DWORD*> (Segment::UnsafeAllocatedPointer + parsedOffset.second) = functionPointer;

  00263	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00266	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  0026b	8b 9d 44 ff ff
	ff		 mov	 ebx, DWORD PTR _functionPointer$1$[ebp]
  00271	89 1c 10	 mov	 DWORD PTR [eax+edx], ebx

; 59   :                       break;

  00274	eb 12		 jmp	 SHORT $LN11@Reconstruc
$LN17@Reconstruc:

; 50   : 
; 51   :                     case SegmentHeader::ImportType::INTERNAL:
; 52   :                         //Patch functions (and in them) that call import.
; 53   :                         *reinterpret_cast<DWORD*> (Segment::UnsafeAllocatedPointer + parsedOffset.second) = functionPointer - (Segment::UnsafeAllocatedPointer + parsedOffset.second + 0x4);

  00276	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00279	2b d3		 sub	 edx, ebx
  0027b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00280	2b d0		 sub	 edx, eax
  00282	83 ea 04	 sub	 edx, 4
  00285	89 14 03	 mov	 DWORD PTR [ebx+eax], edx
$LN11@Reconstruc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 59   : 		if (_Ptr->_Right->_Isnil)

  00288	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0028b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0028f	74 23		 je	 SHORT $LN577@Reconstruc

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00291	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00294	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00298	75 16		 jne	 SHORT $LN576@Reconstruc
  0029a	66 0f 1f 44 00
	00		 npad	 6
$LL575@Reconstruc:
  002a0	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  002a3	75 0b		 jne	 SHORT $LN576@Reconstruc

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  002a5	8b f0		 mov	 esi, eax
  002a7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002aa	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  002ae	74 f0		 je	 SHORT $LL575@Reconstruc
$LN576@Reconstruc:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  002b0	8b f0		 mov	 esi, eax

; 68   : 			}
; 69   : 		else

  002b2	eb 18		 jmp	 SHORT $LN760@Reconstruc
$LN577@Reconstruc:

; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

  002b4	8b f0		 mov	 esi, eax

; 486  : 		while (!_Pnode->_Left->_Isnil)

  002b6	8b 16		 mov	 edx, DWORD PTR [esi]
  002b8	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  002bc	75 0e		 jne	 SHORT $LN760@Reconstruc
  002be	66 90		 npad	 2
$LL581@Reconstruc:
  002c0	8b 02		 mov	 eax, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  002c2	8b f2		 mov	 esi, edx
  002c4	8b d0		 mov	 edx, eax
  002c6	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  002ca	74 f4		 je	 SHORT $LL581@Reconstruc
$LN760@Reconstruc:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 46   :             for (const auto& parsedOffset : importInfo.offsetsMap) {

  002cc	8b 95 44 ff ff
	ff		 mov	 edx, DWORD PTR _functionPointer$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 120  : 		return (_Ptr == _Right._Ptr);

  002d2	3b f1		 cmp	 esi, ecx
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 46   :             for (const auto& parsedOffset : importInfo.offsetsMap) {

  002d4	0f 85 78 ff ff
	ff		 jne	 $LL578@Reconstruc
  002da	8b 9d 48 ff ff
	ff		 mov	 ebx, DWORD PTR _<begin>$L2$1$[ebp]
$LN8@Reconstruc:

; 32   :         for (const auto& importInfo : importsMap.second) {

  002e0	83 c3 0c	 add	 ebx, 12			; 0000000cH
  002e3	89 9d 48 ff ff
	ff		 mov	 DWORD PTR _<begin>$L2$1$[ebp], ebx
  002e9	3b 9d 24 ff ff
	ff		 cmp	 ebx, DWORD PTR _<end>$L2$1$[ebp]
  002ef	0f 85 1b ff ff
	ff		 jne	 $LL10@Reconstruc
  002f5	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _<end>$L1$1$[ebp]
$LN5@Reconstruc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 59   : 		if (_Ptr->_Right->_Isnil)

  002fb	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  002fe	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00302	74 20		 je	 SHORT $LN448@Reconstruc

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00304	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00307	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0030b	75 13		 jne	 SHORT $LN447@Reconstruc
  0030d	0f 1f 00	 npad	 3
$LL446@Reconstruc:
  00310	3b 79 08	 cmp	 edi, DWORD PTR [ecx+8]
  00313	75 0b		 jne	 SHORT $LN447@Reconstruc

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00315	8b f9		 mov	 edi, ecx
  00317	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0031a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0031e	74 f0		 je	 SHORT $LL446@Reconstruc
$LN447@Reconstruc:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  00320	8b f9		 mov	 edi, ecx

; 68   : 			}
; 69   : 		else

  00322	eb 18		 jmp	 SHORT $LN764@Reconstruc
$LN448@Reconstruc:

; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

  00324	8b f9		 mov	 edi, ecx

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00326	8b 17		 mov	 edx, DWORD PTR [edi]
  00328	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0032c	75 0e		 jne	 SHORT $LN764@Reconstruc
  0032e	66 90		 npad	 2
$LL452@Reconstruc:
  00330	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  00332	8b fa		 mov	 edi, edx
  00334	8b d1		 mov	 edx, ecx
  00336	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0033a	74 f4		 je	 SHORT $LL452@Reconstruc
$LN764@Reconstruc:

; 120  : 		return (_Ptr == _Right._Ptr);

  0033c	3b f8		 cmp	 edi, eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 29   :     for (const auto& importsMap : m_Segment.GetHeader().GetImports ()) {

  0033e	0f 85 ac fe ff
	ff		 jne	 $LL449@Reconstruc
  00344	8b 45 e8	 mov	 eax, DWORD PTR _$S2$190[ebp]
$LN782@Reconstruc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2113 : 		erase(begin(), end());

  00347	50		 push	 eax
  00348	ff 30		 push	 DWORD PTR [eax]
  0034a	8d 85 40 ff ff
	ff		 lea	 eax, DWORD PTR $T176[ebp]
  00350	50		 push	 eax
  00351	8d 4d e8	 lea	 ecx, DWORD PTR _$S2$190[ebp]
  00354	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00359	6a 20		 push	 32			; 00000020H
  0035b	ff 75 e8	 push	 DWORD PTR _$S2$190[ebp]
  0035e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00363	83 c4 08	 add	 esp, 8
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 77   : }

  00366	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00369	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00370	59		 pop	 ecx
  00371	5f		 pop	 edi
  00372	5e		 pop	 esi
  00373	5b		 pop	 ebx
  00374	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00377	33 cd		 xor	 ecx, ebp
  00379	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0037e	8b e5		 mov	 esp, ebp
  00380	5d		 pop	 ebp
  00381	c3		 ret	 0
$LN756@Reconstruc:

; 39   :                 //Just error. Message, value, etc.
; 40   :                 std::ostringstream message;

  00382	51		 push	 ecx
  00383	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$188[ebp]
  00389	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
  0038e	83 ec 08	 sub	 esp, 8
  00391	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$188[ebp]
  00397	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >

; 41   :                 message << "Can`t find module or function. " << "Module: " << importsMap.first << " <|> " << "Function: " << importInfo.function;

  0039c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CA@LNJEDMFL@Can?$GAt?5find?5module?5or?5function?4?5@
  003a1	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  003a5	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$188[ebp]
  003ab	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003b0	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_08PHLEJAAL@Module?3?5@
  003b5	8b c8		 mov	 ecx, eax
  003b7	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003bc	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  003bf	8b c8		 mov	 ecx, eax
  003c1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003c6	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05LHNIPNPB@?5?$DM?$HM?$DO?5@
  003cb	8b c8		 mov	 ecx, eax
  003cd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003d2	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@DLBPKAOP@Function?3?5@
  003d7	8b c8		 mov	 ecx, eax
  003d9	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  003de	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _<begin>$L2$1$[ebp]
  003e4	8b c8		 mov	 ecx, eax
  003e6	8b 12		 mov	 edx, DWORD PTR [edx]
  003e8	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 42   :                 PanicUtils::Release (PanicUtils::Layers::INIT, message.str().c_str());

  003ed	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T140[ebp]
  003f3	50		 push	 eax
  003f4	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$188[ebp]
  003fa	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  003ff	8b c8		 mov	 ecx, eax
  00401	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  00405	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  0040a	8b d0		 mov	 edx, eax
  0040c	33 c9		 xor	 ecx, ecx
  0040e	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN783@Reconstruc:

; 60   : 
; 61   :                     default:
; 62   :                         //Just error. Message, value, etc.
; 63   :                         std::ostringstream message;

  00413	51		 push	 ecx
  00414	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$187[ebp]
  0041a	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
  0041f	83 ec 08	 sub	 esp, 8
  00422	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$187[ebp]
  00428	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >

; 64   :                         message << "Can't find offset type. Offset: " << parsedOffset.second << " <-> " << "Function: " << importInfo.function;

  0042d	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CB@FHNJEIA@Can?8t?5find?5offset?5type?4?5Offset?3@
  00432	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
  00436	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$187[ebp]
  0043c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00441	ff 76 14	 push	 DWORD PTR [esi+20]
  00444	8b c8		 mov	 ecx, eax
  00446	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  0044c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_05MEGJJFDG@?5?$DM?9?$DO?5@
  00451	8b c8		 mov	 ecx, eax
  00453	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00458	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0L@DLBPKAOP@Function?3?5@
  0045d	8b c8		 mov	 ecx, eax
  0045f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00464	8b 95 48 ff ff
	ff		 mov	 edx, DWORD PTR _<begin>$L2$1$[ebp]
  0046a	8b c8		 mov	 ecx, eax
  0046c	8b 12		 mov	 edx, DWORD PTR [edx]
  0046e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 65   :                         PanicUtils::Release (PanicUtils::Layers::ROUTINE, message.str().c_str());

  00473	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR $T153[ebp]
  00479	50		 push	 eax
  0047a	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$187[ebp]
  00480	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00485	8b c8		 mov	 ecx, eax
  00487	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
  0048b	e8 00 00 00 00	 call	 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
  00490	8b d0		 mov	 edx, eax
  00492	b9 01 00 00 00	 mov	 ecx, 1
  00497	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN790@Reconstruc:
  0049c	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$9:
  00000	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$0:
  0000b	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1SegmentHeader@@QAE@XZ
__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$14:
  00016	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T54[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$2:
  00021	8d 8d 2c ff ff
	ff		 lea	 ecx, DWORD PTR $T54[ebp]
  00027	e9 00 00 00 00	 jmp	 ??1SegmentHeader@@QAE@XZ
__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$3:
  0002c	8d 4d e8	 lea	 ecx, DWORD PTR _$S2$190[ebp]
  0002f	e9 00 00 00 00	 jmp	 ??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$4:
  00034	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$188[ebp]
  0003a	e9 00 00 00 00	 jmp	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$5:
  0003f	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T140[ebp]
  00045	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$6:
  0004a	8d 8d 4c ff ff
	ff		 lea	 ecx, DWORD PTR _message$187[ebp]
  00050	e9 00 00 00 00	 jmp	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
__unwindfunclet$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ$7:
  00055	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T153[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ:
  00060	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00064	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00067	8b 8a 20 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-224]
  0006d	33 c8		 xor	 ecx, eax
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00077	33 c8		 xor	 ecx, eax
  00079	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0007e	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ReconstructHotPoints@RuntimeHandler@@QAEXXZ
  00083	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ReconstructHotPoints@RuntimeHandler@@QAEXXZ ENDP	; RuntimeHandler::ReconstructHotPoints
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c2 04 00	 ret	 4
?__autoclassinit2@?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
; _this$ = ecx

; 614  : 		{	// destroy the object

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	56		 push	 esi
  00003	8d 71 50	 lea	 esi, DWORD PTR [ecx+80]

; 615  : 		}

  00006	8d 4e b4	 lea	 ecx, DWORD PTR [esi-76]
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00014	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  0001d	89 44 32 ac	 mov	 DWORD PTR [edx+esi-84], eax
  00021	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00026	8d 4e b8	 lea	 ecx, DWORD PTR [esi-72]
  00029	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0002f	8b ce		 mov	 ecx, esi
  00031	5e		 pop	 esi
  00032	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	68 98 00 00 00	 push	 152			; 00000098H
  00005	6a 00		 push	 0
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 _memset
  0000d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00010	c2 04 00	 ret	 4
?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEXI@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c2 04 00	 ret	 4
?__autoclassinit2@?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEXI@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
;	COMDAT ?InvokeOEP@RuntimeHandler@@QAEXXZ
_TEXT	SEGMENT
?InvokeOEP@RuntimeHandler@@QAEXXZ PROC			; RuntimeHandler::InvokeOEP, COMDAT
; _this$dead$ = ecx
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  00005	85 c0		 test	 eax, eax
  00007	75 0d		 jne	 SHORT $LN6@InvokeOEP

; 14   :         PanicUtils::Release (layer, reason);

  00009	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0000e	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00011	e9 00 00 00 00	 jmp	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN6@InvokeOEP:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 81   :     SegmentHeader::DLLMAIN_CALLBACK DllMain = reinterpret_cast <SegmentHeader::DLLMAIN_CALLBACK> (Segment::GetSafeAllocationPointer() + SegmentHeader::Datacase::OEP);

  00016	8d 88 8c 73 04
	00		 lea	 ecx, DWORD PTR [eax+291724]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  0001c	85 c9		 test	 ecx, ecx
  0001e	75 0a		 jne	 SHORT $LN11@InvokeOEP

; 14   :         PanicUtils::Release (layer, reason);

  00020	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BC@MFGAJMC@OEP?5value?5is?5null@
  00025	e9 00 00 00 00	 jmp	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN11@InvokeOEP:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 85   :     DllMain (reinterpret_cast<HMODULE> (Segment::GetSafeAllocationPointer()), DLL_PROCESS_ATTACH, NULL);

  0002a	6a 00		 push	 0
  0002c	6a 01		 push	 1
  0002e	50		 push	 eax
  0002f	ff d1		 call	 ecx

; 86   : }

  00031	c3		 ret	 0
?InvokeOEP@RuntimeHandler@@QAEXXZ ENDP			; RuntimeHandler::InvokeOEP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator!=, COMDAT
; _this$ = ecx

; 124  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		return (!(*this == _Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 126  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator++, COMDAT
; _this$ = ecx

; 166  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN6@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL4@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL4@operator
$LN21@operator:

; 167  : 		++static_cast<_Mybase&>(*this);
; 168  : 		return (*this);

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 169  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN6@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN11@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL10@operator
$LN11@operator:

; 167  : 		++static_cast<_Mybase&>(*this);
; 168  : 		return (*this);

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 169  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@XZ PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator*, COMDAT
; _this$ = ecx

; 49   : 		return (_Ptr->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 157  : 		return ((reference)**(_Mybase *)this);
; 158  : 		}

  00005	c3		 ret	 0
??D?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@XZ ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Unchecked_end@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1219 : 		{	// return unchecked iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1220 : 		return (_Unchecked_iterator(this->_Get_data()._Myhead, nullptr));
; 1221 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked_end@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1209 : 		{	// return unchecked iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		return (_Myhead->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 42   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1210 : 		return (_Unchecked_iterator(this->_Get_data()._Lmost(), nullptr));
; 1211 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T17 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::~_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >, COMDAT
; _this$ = ecx

; 1167 : 		{	// destroy tree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 42   : 		: _Ptr(_Pnode)

  00007	8b 06		 mov	 eax, DWORD PTR [esi]

; 2113 : 		erase(begin(), end());

  00009	50		 push	 eax
  0000a	ff 30		 push	 DWORD PTR [eax]
  0000c	8d 45 fc	 lea	 eax, DWORD PTR $T17[ebp]
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00015	6a 20		 push	 32			; 00000020H
  00017	ff 36		 push	 DWORD PTR [esi]
  00019	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001e	83 c4 08	 add	 esp, 8
  00021	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1169 : 		}

  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::~_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??0?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@ABV01@@Z PROC ; std::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >, COMDAT
; _this$ = ecx

; 125  : 		{	// construct map by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >

; 126  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@ABV01@@Z ENDP ; std::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_end@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEPBUImportInfo@SegmentHeader@@XZ
_TEXT	SEGMENT
?_Unchecked_end@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEPBUImportInfo@SegmentHeader@@XZ PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1694 : 		return (this->_Mylast());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1695 : 		}

  00003	c3		 ret	 0
?_Unchecked_end@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEPBUImportInfo@SegmentHeader@@XZ ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEPBUImportInfo@SegmentHeader@@XZ
_TEXT	SEGMENT
?_Unchecked_begin@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEPBUImportInfo@SegmentHeader@@XZ PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1684 : 		return (this->_Myfirst());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1685 : 		}

  00002	c3		 ret	 0
?_Unchecked_begin@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEPBUImportInfo@SegmentHeader@@XZ ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator!=, COMDAT
; _this$ = ecx

; 124  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 		return (!(*this == _Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 126  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 75   : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 75   : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@XZ
_TEXT	SEGMENT
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator*, COMDAT
; _this$ = ecx

; 49   : 		return (_Ptr->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 50   : 		}

  00005	c3		 ret	 0
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Unchecked_end@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_end@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1224 : 		{	// return unchecked iterator for end of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1225 : 		return (_Unchecked_const_iterator(this->_Get_data()._Myhead, nullptr));
; 1226 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?_Unchecked_end@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1214 : 		{	// return unchecked iterator for beginning of nonmutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		return (_Myhead->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 42   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1215 : 		return (_Unchecked_const_iterator(this->_Get_data()._Lmost(), nullptr));
; 1216 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?_Unchecked_begin@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AV?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_end@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ
_TEXT	SEGMENT
?_Unchecked_end@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Unchecked_end, COMDAT
; _this$ = ecx

; 1689 : 		return (this->_Mylast());

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1690 : 		}

  00003	c3		 ret	 0
?_Unchecked_end@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Unchecked_begin@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ
_TEXT	SEGMENT
?_Unchecked_begin@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Unchecked_begin, COMDAT
; _this$ = ecx

; 1679 : 		return (this->_Myfirst());

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 1680 : 		}

  00002	c3		 ret	 0
?_Unchecked_begin@?$vector@KV?$allocator@K@std@@@std@@QAEPAKXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$GSCopy$1$ = -8					; size = 4
$T70 = -1						; size = 1
__Right$ = 8						; size = 4
??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	57		 push	 edi
  0000a	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  0000d	89 7d f8	 mov	 DWORD PTR __Right$GSCopy$1$[ebp], edi

; 389  : 		: _Myfirst(),

  00010	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 390  : 		_Mylast(),

  00016	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 391  : 		_Myend()

  0001d	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00024	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00027	2b 07		 sub	 eax, DWORD PTR [edi]
  00029	c1 f8 02	 sar	 eax, 2

; 1877 : 		if (_Newcapacity == 0)

  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 8a 00 00
	00		 je	 $LN5@vector

; 1878 : 			{
; 1879 : 			return (false);
; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

  00034	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00039	0f 87 89 00 00
	00		 ja	 $LN185@vector
  0003f	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00040	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00047	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0004d	72 2b		 jb	 SHORT $LN83@vector

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0004f	8d 46 23	 lea	 eax, DWORD PTR [esi+35]

; 94   : 	if (_Block_size <= _Bytes)

  00052	83 c9 ff	 or	 ecx, -1
  00055	3b c6		 cmp	 eax, esi
  00057	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  0005a	50		 push	 eax
  0005b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00060	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00062	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00065	85 c9		 test	 ecx, ecx
  00067	74 0b		 je	 SHORT $LN92@vector

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00069	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0006c	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0006f	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));

  00072	eb 17		 jmp	 SHORT $LN82@vector
$LN92@vector:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN83@vector:

; 188  : 	if (_Bytes != 0)

  0007a	85 f6		 test	 esi, esi
  0007c	74 0b		 je	 SHORT $LN84@vector

; 52   : 		return (::operator new(_Bytes));

  0007e	56		 push	 esi
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00084	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  00087	eb 02		 jmp	 SHORT $LN82@vector
$LN84@vector:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  00089	33 c0		 xor	 eax, eax
$LN82@vector:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  0008b	89 03		 mov	 DWORD PTR [ebx], eax

; 1888 : 		this->_Mylast() = this->_Myfirst();

  0008d	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  00090	8b 03		 mov	 eax, DWORD PTR [ebx]
  00092	03 c6		 add	 eax, esi
  00094	89 43 08	 mov	 DWORD PTR [ebx+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 211  : 	const auto _UFirst = _Get_unwrapped(_First);

  00097	8b 17		 mov	 edx, DWORD PTR [edi]

; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00099	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 214  : 	_Seek_wrapped(_Dest,

  0009b	51		 push	 ecx
  0009c	8d 4d ff	 lea	 ecx, DWORD PTR $T70[ebp]
  0009f	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_copy_cat<unsigned long,unsigned long>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  000a4	8b 75 f8	 mov	 esi, DWORD PTR __Right$GSCopy$1$[ebp]
  000a7	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000aa	2b f2		 sub	 esi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  000ac	56		 push	 esi
  000ad	52		 push	 edx
  000ae	57		 push	 edi
  000af	e8 00 00 00 00	 call	 _memmove
  000b4	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  000b7	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

  000ba	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  000bd	5e		 pop	 esi
$LN5@vector:

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();
; 741  : 			_RERAISE;
; 742  : 			_CATCH_END
; 743  : 			}
; 744  : 		}

  000be	5f		 pop	 edi
  000bf	8b c3		 mov	 eax, ebx
  000c1	5b		 pop	 ebx
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c2 04 00	 ret	 4
$LN185@vector:

; 1884 : 			_Xlength();

  000c8	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN183@vector:
  000cd	cc		 int	 3
??0?$vector@KV?$allocator@K@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 623  : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 624  : 		return (_Stringbuffer.str());

  00003	ff 75 08	 push	 DWORD PTR ___$ReturnUdt$[ebp]
  00006	83 c1 04	 add	 ecx, 4
  00009	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  0000e	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 625  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 614  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]

; 615  : 		}

  00006	8d 4e b4	 lea	 ecx, DWORD PTR [esi-76]
  00009	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0000c	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00014	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  0001d	89 44 32 ac	 mov	 DWORD PTR [edx+esi-84], eax
  00021	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00026	8d 4e b8	 lea	 ecx, DWORD PTR [esi-72]
  00029	5e		 pop	 esi
  0002a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T1 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Mode$dead$ = 8					; size = 4
_$initVBases$dead$ = 12					; size = 4
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 570  : 		{	// construct empty writable character buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00027	8b f9		 mov	 edi, ecx
  00029	89 7d ec	 mov	 DWORD PTR _this$[ebp], edi
  0002c	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
  00033	8d 4f 50	 lea	 ecx, DWORD PTR [edi+80]
  00036	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
  0003c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  00042	6a 00		 push	 0
  00044	6a 00		 push	 0
  00046	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  00049	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00050	56		 push	 esi
  00051	8b cf		 mov	 ecx, edi
  00053	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00060	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00067	8b 07		 mov	 eax, DWORD PTR [edi]
  00069	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0006c	c7 04 07 00 00
	00 00		 mov	 DWORD PTR [edi+eax], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  00073	8b 07		 mov	 eax, DWORD PTR [edi]
  00075	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00078	8d 41 b0	 lea	 eax, DWORD PTR [ecx-80]
  0007b	89 44 39 fc	 mov	 DWORD PTR [ecx+edi-4], eax

; 33   : 		{	// construct empty character buffer from mode

  0007f	8b ce		 mov	 ecx, esi
  00081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00087	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 571  : 		}

  0008d	8b c7		 mov	 eax, edi

; 30   : 		: _Seekhigh(nullptr),

  0008f	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 31   : 		_Mystate(_Getstate(_Mode)),

  00096	c7 46 3c 04 00
	00 00		 mov	 DWORD PTR [esi+60], 4

; 571  : 		}

  0009d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T1[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 10 00 00
	00		 je	 $LN5@basic_ostr
  0000c	83 65 f0 fe	 and	 DWORD PTR $T1[ebp], -2	; fffffffeH
  00010	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00013	83 c1 50	 add	 ecx, 80			; 00000050H
  00016	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
$LN5@basic_ostr:
  0001c	c3		 ret	 0
__unwindfunclet$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1:
  0001d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00020	83 c1 08	 add	 ecx, 8
  00023	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z:
  00029	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00030	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
__Seeklow$1$ = -24					; size = 4
__Off$2$ = -20						; size = 4
__Gptr_old$1$ = -16					; size = 4
tv257 = -12						; size = 4
tv231 = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Pos$ = 12						; size = 24
__Mode$ = 36						; size = 4
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT
; _this$ = ecx

; 323  : 		{	// change position to _Pos, according to _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  00009	8b 45 10	 mov	 eax, DWORD PTR __Pos$[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 323  : 		{	// change position to _Pos, according to _Mode

  0000c	53		 push	 ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  0000d	8b 5d 0c	 mov	 ebx, DWORD PTR __Pos$[ebp]
  00010	03 5d 14	 add	 ebx, DWORD PTR __Pos$[ebp+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 323  : 		{	// change position to _Pos, according to _Mode

  00013	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  00014	13 45 18	 adc	 eax, DWORD PTR __Pos$[ebp+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 323  : 		{	// change position to _Pos, according to _Mode

  00017	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  0001a	57		 push	 edi
  0001b	8b f9		 mov	 edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 55   : 		return (_Myoff + _Fpos);

  0001d	89 44 24 14	 mov	 DWORD PTR __Off$2$[esp+40], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00021	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	89 44 24 18	 mov	 DWORD PTR __Gptr_old$1$[esp+40], eax

; 235  : 		return (*_IPnext);

  0002a	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 327  : 		if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old)

  0002f	85 c9		 test	 ecx, ecx
  00031	74 08		 je	 SHORT $LN2@seekpos
  00033	39 4f 38	 cmp	 DWORD PTR [edi+56], ecx
  00036	73 03		 jae	 SHORT $LN2@seekpos

; 328  : 			{	// update high-water pointer
; 329  : 			_Seekhigh = _Pptr_old;

  00038	89 4f 38	 mov	 DWORD PTR [edi+56], ecx
$LN2@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0003b	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0003e	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 333  : 		const auto _Seekdist = _Seekhigh - _Seeklow;

  00040	8b 47 38	 mov	 eax, DWORD PTR [edi+56]
  00043	89 44 24 20	 mov	 DWORD PTR tv231[esp+40], eax
  00047	2b c2		 sub	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00049	89 54 24 10	 mov	 DWORD PTR __Seeklow$1$[esp+40], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 334  : 		if (static_cast<unsigned long long>(_Off) > static_cast<unsigned long long>(_Seekdist))

  0004d	99		 cdq
  0004e	39 54 24 14	 cmp	 DWORD PTR __Off$2$[esp+40], edx
  00052	72 15		 jb	 SHORT $LN3@seekpos
  00054	77 04		 ja	 SHORT $LN30@seekpos
  00056	3b d8		 cmp	 ebx, eax
  00058	76 0f		 jbe	 SHORT $LN3@seekpos
$LN30@seekpos:

; 358  : 		}

  0005a	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00060	c7 46 04 ff ff
	ff ff		 mov	 DWORD PTR [esi+4], -1
  00067	eb 78		 jmp	 SHORT $LN31@seekpos
$LN3@seekpos:

; 335  : 			{
; 336  : 			return (pos_type(off_type(-1)));
; 337  : 			}
; 338  : 
; 339  : 		if (_Off != 0
; 340  : 			&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)

  00069	8b 55 24	 mov	 edx, DWORD PTR __Mode$[ebp]
  0006c	8b c3		 mov	 eax, ebx
  0006e	0b 44 24 14	 or	 eax, DWORD PTR __Off$2$[esp+40]
  00072	74 15		 je	 SHORT $LN4@seekpos
  00074	f6 c2 01	 test	 dl, 1
  00077	74 07		 je	 SHORT $LN6@seekpos
  00079	83 7c 24 18 00	 cmp	 DWORD PTR __Gptr_old$1$[esp+40], 0
  0007e	74 da		 je	 SHORT $LN30@seekpos
$LN6@seekpos:
  00080	f6 c2 02	 test	 dl, 2
  00083	74 04		 je	 SHORT $LN4@seekpos
  00085	85 c9		 test	 ecx, ecx
  00087	74 d1		 je	 SHORT $LN30@seekpos
$LN4@seekpos:

; 341  : 				|| ((_Mode & ios_base::out) && _Pptr_old == nullptr)))
; 342  : 			{
; 343  : 			return (pos_type(off_type(-1)));
; 344  : 			}
; 345  : 
; 346  : 		const auto _Newptr = _Seeklow + _Off;	// may perform nullptr + 0

  00089	8b 44 24 10	 mov	 eax, DWORD PTR __Seeklow$1$[esp+40]
  0008d	03 c3		 add	 eax, ebx

; 347  : 		if ((_Mode & ios_base::in) && _Gptr_old != nullptr)

  0008f	f6 c2 01	 test	 dl, 1
  00092	74 1a		 je	 SHORT $LN7@seekpos
  00094	83 7c 24 18 00	 cmp	 DWORD PTR __Gptr_old$1$[esp+40], 0
  00099	74 13		 je	 SHORT $LN7@seekpos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  0009b	8b 57 1c	 mov	 edx, DWORD PTR [edi+28]
  0009e	89 02		 mov	 DWORD PTR [edx], eax

; 253  : 		*_IGcount = (int)(_Last - _Next);

  000a0	8b 54 24 20	 mov	 edx, DWORD PTR tv231[esp+40]
  000a4	2b d0		 sub	 edx, eax
  000a6	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  000a9	89 10		 mov	 DWORD PTR [eax], edx
  000ab	8b 55 24	 mov	 edx, DWORD PTR __Mode$[ebp]
$LN7@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 352  : 		if ((_Mode & ios_base::out) && _Pptr_old != nullptr)

  000ae	f6 c2 02	 test	 dl, 2
  000b1	74 25		 je	 SHORT $LN8@seekpos
  000b3	85 c9		 test	 ecx, ecx
  000b5	74 21		 je	 SHORT $LN8@seekpos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  000b7	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000ba	8b 4f 30	 mov	 ecx, DWORD PTR [edi+48]
  000bd	8b 10		 mov	 edx, DWORD PTR [eax]

; 299  : 		*_IPfirst = _First;

  000bf	8b 47 10	 mov	 eax, DWORD PTR [edi+16]

; 258  : 		return (*_IPnext + *_IPcount);

  000c2	03 11		 add	 edx, DWORD PTR [ecx]

; 299  : 		*_IPfirst = _First;

  000c4	8b 4c 24 10	 mov	 ecx, DWORD PTR __Seeklow$1$[esp+40]
  000c8	89 08		 mov	 DWORD PTR [eax], ecx

; 300  : 		*_IPnext = _Next;

  000ca	03 cb		 add	 ecx, ebx
  000cc	8b 47 20	 mov	 eax, DWORD PTR [edi+32]

; 301  : 		*_IPcount = (int)(_Last - _Next);

  000cf	2b d1		 sub	 edx, ecx
  000d1	89 08		 mov	 DWORD PTR [eax], ecx
  000d3	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  000d6	89 10		 mov	 DWORD PTR [eax], edx
$LN8@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  000d8	8b 44 24 14	 mov	 eax, DWORD PTR __Off$2$[esp+40]
  000dc	89 1e		 mov	 DWORD PTR [esi], ebx
  000de	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN31@seekpos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 358  : 		}

  000e1	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  000e8	0f 57 c0	 xorps	 xmm0, xmm0
  000eb	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  000f2	8b c6		 mov	 eax, esi
  000f4	5f		 pop	 edi
  000f5	66 0f d6 46 10	 movq	 QWORD PTR [esi+16], xmm0
  000fa	5e		 pop	 esi
  000fb	5b		 pop	 ebx
  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c2 20 00	 ret	 32			; 00000020H
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
__Gptr_old$1$ = -28					; size = 4
__Off$2$ = -24						; size = 4
__Newoff$ = -24						; size = 8
__Newptr$1$ = -16					; size = 4
__Seekdist$1$ = -16					; size = 4
__Seeklow$1$ = -12					; size = 4
tv248 = -8						; size = 4
tv183 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 8
__Way$ = 20						; size = 4
__Mode$ = 24						; size = 4
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT
; _this$ = ecx

; 249  : 		{	// change position by _Off, according to _Way, _Mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  0000e	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00011	8b 38		 mov	 edi, DWORD PTR [eax]

; 235  : 		return (*_IPnext);

  00013	8b 46 20	 mov	 eax, DWORD PTR [esi+32]

; 225  : 		return (*_IGnext);

  00016	89 7c 24 0c	 mov	 DWORD PTR __Gptr_old$1$[esp+40], edi

; 235  : 		return (*_IPnext);

  0001a	8b 08		 mov	 ecx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 252  : 		if (_Pptr_old != nullptr && _Seekhigh < _Pptr_old)

  0001c	85 c9		 test	 ecx, ecx
  0001e	74 08		 je	 SHORT $LN4@seekoff
  00020	39 4e 38	 cmp	 DWORD PTR [esi+56], ecx
  00023	73 03		 jae	 SHORT $LN4@seekoff

; 253  : 			{	// update high-water pointer
; 254  : 			_Seekhigh = _Pptr_old;

  00025	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
$LN4@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00028	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 260  : 		switch (_Way)

  0002b	8b 5d 18	 mov	 ebx, DWORD PTR __Mode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0002e	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 258  : 		const auto _Seekdist = _Seekhigh - _Seeklow;

  00030	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00033	89 44 24 24	 mov	 DWORD PTR tv183[esp+40], eax
  00037	2b c2		 sub	 eax, edx
  00039	89 44 24 18	 mov	 DWORD PTR __Seekdist$1$[esp+40], eax

; 260  : 		switch (_Way)

  0003d	8b 45 14	 mov	 eax, DWORD PTR __Way$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00040	89 54 24 1c	 mov	 DWORD PTR __Seeklow$1$[esp+40], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 260  : 		switch (_Way)

  00044	83 e8 00	 sub	 eax, 0
  00047	74 63		 je	 SHORT $LN5@seekoff
  00049	83 e8 01	 sub	 eax, 1
  0004c	74 10		 je	 SHORT $LN7@seekoff
  0004e	83 e8 01	 sub	 eax, 1
  00051	75 44		 jne	 SHORT $LN13@seekoff

; 264  : 				break;
; 265  : 			case ios_base::end:
; 266  : 				_Newoff = _Seekdist;

  00053	8b 44 24 18	 mov	 eax, DWORD PTR __Seekdist$1$[esp+40]
  00057	99		 cdq
  00058	8b f8		 mov	 edi, eax
  0005a	8b c2		 mov	 eax, edx

; 267  : 				break;

  0005c	eb 5f		 jmp	 SHORT $LN2@seekoff
$LN7@seekoff:

; 268  : 			case ios_base::cur:
; 269  : 				{
; 270  : 				constexpr auto _Both = ios_base::in | ios_base::out;
; 271  : 				if ((_Mode & _Both) != _Both)

  0005e	8b c3		 mov	 eax, ebx
  00060	83 e0 03	 and	 eax, 3
  00063	3c 03		 cmp	 al, 3
  00065	74 30		 je	 SHORT $LN13@seekoff

; 272  : 					{	// prohibited by N4727 [stringbuf.virtuals] Table 107 "seekoff positioning"
; 273  : 					if (_Mode & ios_base::in)

  00067	f6 c3 01	 test	 bl, 1
  0006a	74 13		 je	 SHORT $LN9@seekoff

; 274  : 						{
; 275  : 						if (_Gptr_old != nullptr || _Seeklow == nullptr)

  0006c	85 ff		 test	 edi, edi
  0006e	75 04		 jne	 SHORT $LN12@seekoff
  00070	85 d2		 test	 edx, edx
  00072	75 23		 jne	 SHORT $LN13@seekoff
$LN12@seekoff:

; 276  : 							{
; 277  : 							_Newoff = _Gptr_old - _Seeklow;

  00074	8b c7		 mov	 eax, edi
  00076	2b c2		 sub	 eax, edx
  00078	99		 cdq
  00079	8b f8		 mov	 edi, eax
  0007b	8b c2		 mov	 eax, edx

; 278  : 							break;

  0007d	eb 3e		 jmp	 SHORT $LN2@seekoff
$LN9@seekoff:

; 279  : 							}
; 280  : 						}
; 281  : 					else if ((_Mode & ios_base::out) && (_Pptr_old != nullptr || _Seeklow == nullptr))

  0007f	f6 c3 02	 test	 bl, 2
  00082	74 13		 je	 SHORT $LN13@seekoff
  00084	85 c9		 test	 ecx, ecx
  00086	75 04		 jne	 SHORT $LN14@seekoff
  00088	85 d2		 test	 edx, edx
  0008a	75 0b		 jne	 SHORT $LN13@seekoff
$LN14@seekoff:

; 282  : 						{
; 283  : 						_Newoff = _Pptr_old - _Seeklow;

  0008c	8b c1		 mov	 eax, ecx
  0008e	2b c2		 sub	 eax, edx
  00090	99		 cdq
  00091	8b f8		 mov	 edi, eax
  00093	8b c2		 mov	 eax, edx

; 284  : 						break;

  00095	eb 26		 jmp	 SHORT $LN2@seekoff
$LN13@seekoff:

; 319  : 		}

  00097	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009a	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [eax], -1
  000a0	c7 40 04 ff ff
	ff ff		 mov	 DWORD PTR [eax+4], -1
  000a7	e9 a5 00 00 00	 jmp	 $LN46@seekoff
$LN5@seekoff:
  000ac	0f 57 c0	 xorps	 xmm0, xmm0

; 261  : 			{
; 262  : 			case ios_base::beg:
; 263  : 				_Newoff = 0;

  000af	66 0f 13 44 24
	10		 movlpd	 QWORD PTR __Newoff$[esp+40], xmm0
  000b5	8b 44 24 14	 mov	 eax, DWORD PTR __Newoff$[esp+44]
  000b9	8b 7c 24 10	 mov	 edi, DWORD PTR __Newoff$[esp+40]
$LN2@seekoff:

; 285  : 						}
; 286  : 					}
; 287  : 				}
; 288  : 
; 289  : 				// fallthrough
; 290  : 			default:
; 291  : 				return (pos_type(off_type(-1)));
; 292  : 			}
; 293  : 
; 294  : 		if (static_cast<unsigned long long>(_Off) + _Newoff > static_cast<unsigned long long>(_Seekdist))

  000bd	03 7d 0c	 add	 edi, DWORD PTR __Off$[ebp]
  000c0	13 45 10	 adc	 eax, DWORD PTR __Off$[ebp+4]
  000c3	89 44 24 10	 mov	 DWORD PTR __Off$2$[esp+40], eax
  000c7	8b 44 24 18	 mov	 eax, DWORD PTR __Seekdist$1$[esp+40]
  000cb	99		 cdq
  000cc	39 54 24 10	 cmp	 DWORD PTR __Off$2$[esp+40], edx
  000d0	72 06		 jb	 SHORT $LN16@seekoff
  000d2	77 c3		 ja	 SHORT $LN13@seekoff
  000d4	3b f8		 cmp	 edi, eax
  000d6	77 bf		 ja	 SHORT $LN13@seekoff
$LN16@seekoff:

; 295  : 			{
; 296  : 			return (pos_type(off_type(-1)));
; 297  : 			}
; 298  : 
; 299  : 		_Off += _Newoff;
; 300  : 		if (_Off != 0
; 301  : 			&& (((_Mode & ios_base::in) && _Gptr_old == nullptr)

  000d8	8b 54 24 0c	 mov	 edx, DWORD PTR __Gptr_old$1$[esp+40]
  000dc	8b c7		 mov	 eax, edi
  000de	0b 44 24 10	 or	 eax, DWORD PTR __Off$2$[esp+40]
  000e2	74 12		 je	 SHORT $LN17@seekoff
  000e4	f6 c3 01	 test	 bl, 1
  000e7	74 04		 je	 SHORT $LN19@seekoff
  000e9	85 d2		 test	 edx, edx
  000eb	74 aa		 je	 SHORT $LN13@seekoff
$LN19@seekoff:
  000ed	f6 c3 02	 test	 bl, 2
  000f0	74 04		 je	 SHORT $LN17@seekoff
  000f2	85 c9		 test	 ecx, ecx
  000f4	74 a1		 je	 SHORT $LN13@seekoff
$LN17@seekoff:

; 302  : 				|| ((_Mode & ios_base::out) && _Pptr_old == nullptr)))
; 303  : 			{
; 304  : 			return (pos_type(off_type(-1)));
; 305  : 			}
; 306  : 
; 307  : 		const auto _Newptr = _Seeklow + _Off;	// may perform nullptr + 0

  000f6	8b 44 24 1c	 mov	 eax, DWORD PTR __Seeklow$1$[esp+40]
  000fa	03 c7		 add	 eax, edi
  000fc	89 44 24 18	 mov	 DWORD PTR __Newptr$1$[esp+40], eax

; 308  : 		if ((_Mode & ios_base::in) && _Gptr_old != nullptr)

  00100	f6 c3 01	 test	 bl, 1
  00103	74 14		 je	 SHORT $LN20@seekoff
  00105	85 d2		 test	 edx, edx
  00107	74 10		 je	 SHORT $LN20@seekoff
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  00109	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0010c	89 02		 mov	 DWORD PTR [edx], eax

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0010e	8b 54 24 24	 mov	 edx, DWORD PTR tv183[esp+40]
  00112	2b d0		 sub	 edx, eax
  00114	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00117	89 10		 mov	 DWORD PTR [eax], edx
$LN20@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 313  : 		if ((_Mode & ios_base::out) && _Pptr_old != nullptr)

  00119	f6 c3 02	 test	 bl, 2
  0011c	74 27		 je	 SHORT $LN21@seekoff
  0011e	85 c9		 test	 ecx, ecx
  00120	74 23		 je	 SHORT $LN21@seekoff
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  00122	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00125	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00128	8b 10		 mov	 edx, DWORD PTR [eax]

; 299  : 		*_IPfirst = _First;

  0012a	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 258  : 		return (*_IPnext + *_IPcount);

  0012d	03 11		 add	 edx, DWORD PTR [ecx]

; 299  : 		*_IPfirst = _First;

  0012f	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Seeklow$1$[esp+40]
  00133	89 08		 mov	 DWORD PTR [eax], ecx

; 300  : 		*_IPnext = _Next;

  00135	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00138	8b 4c 24 18	 mov	 ecx, DWORD PTR __Newptr$1$[esp+40]

; 301  : 		*_IPcount = (int)(_Last - _Next);

  0013c	2b d1		 sub	 edx, ecx
  0013e	89 08		 mov	 DWORD PTR [eax], ecx
  00140	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00143	89 10		 mov	 DWORD PTR [eax], edx
$LN21@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 32   : 		: _Myoff(_Off), _Fpos(0), _Mystate()

  00145	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00148	8b 4c 24 10	 mov	 ecx, DWORD PTR __Off$2$[esp+40]
  0014c	89 38		 mov	 DWORD PTR [eax], edi
  0014e	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN46@seekoff:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 319  : 		}

  00151	5f		 pop	 edi
  00152	0f 57 c0	 xorps	 xmm0, xmm0
  00155	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0015c	5e		 pop	 esi
  0015d	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00164	66 0f d6 40 10	 movq	 QWORD PTR [eax+16], xmm0
  00169	5b		 pop	 ebx
  0016a	8b e5		 mov	 esp, ebp
  0016c	5d		 pop	 ebp
  0016d	c2 14 00	 ret	 20			; 00000014H
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ
_TEXT	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT
; _this$ = ecx

; 216  : 		{	// get an element from stream, but don't point past it

  00000	8b d1		 mov	 edx, ecx
  00002	56		 push	 esi
  00003	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00004	8b 7a 1c	 mov	 edi, DWORD PTR [edx+28]
  00007	8b 0f		 mov	 ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 218  : 		if (_Gptr == nullptr)

  00009	85 c9		 test	 ecx, ecx
  0000b	74 47		 je	 SHORT $LN5@underflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 240  : 		return (*_IGnext + *_IGcount);

  0000d	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00010	8b 00		 mov	 eax, DWORD PTR [eax]
  00012	03 c1		 add	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 223  : 		if (_Gptr < _Mysb::egptr())

  00014	3b c8		 cmp	 ecx, eax
  00016	73 06		 jae	 SHORT $LN3@underflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00018	0f b6 01	 movzx	 eax, BYTE PTR [ecx]
  0001b	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 244  : 		}

  0001c	5e		 pop	 esi
  0001d	c3		 ret	 0
$LN3@underflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  0001e	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 229  : 		const auto _Pptr = _Mysb::pptr();

  00021	8b 00		 mov	 eax, DWORD PTR [eax]
  00023	85 c0		 test	 eax, eax

; 230  : 		if (!_Pptr || (_Mystate & _Noread))

  00025	74 2d		 je	 SHORT $LN5@underflow
  00027	f6 42 3c 04	 test	 BYTE PTR [edx+60], 4
  0002b	75 27		 jne	 SHORT $LN5@underflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  0002d	8b 72 38	 mov	 esi, DWORD PTR [edx+56]
  00030	3b f0		 cmp	 esi, eax
  00032	0f 42 f0	 cmovb	 esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 236  : 		if (_Local_highwater <= _Gptr)

  00035	3b f1		 cmp	 esi, ecx
  00037	76 1b		 jbe	 SHORT $LN5@underflow

; 237  : 			{	// nothing in the put area to take
; 238  : 			return (_Traits::eof());
; 239  : 			}
; 240  : 
; 241  : 		_Seekhigh = _Local_highwater;

  00039	89 72 38	 mov	 DWORD PTR [edx+56], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 252  : 		*_IGnext = _Next;

  0003c	8b c7		 mov	 eax, edi

; 225  : 		return (*_IGnext);

  0003e	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00040	2b f1		 sub	 esi, ecx
  00042	5f		 pop	 edi

; 252  : 		*_IGnext = _Next;

  00043	89 08		 mov	 DWORD PTR [eax], ecx

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00045	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00048	89 30		 mov	 DWORD PTR [eax], esi

; 225  : 		return (*_IGnext);

  0004a	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 244  : 		}

  0004d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  0004e	8b 00		 mov	 eax, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 526  : 		return (static_cast<unsigned char>(_Ch));

  00050	0f b6 00	 movzx	 eax, BYTE PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 244  : 		}

  00053	c3		 ret	 0
$LN5@underflow:
  00054	5f		 pop	 edi

; 231  : 			{	// no put area or read disallowed
; 232  : 			return (_Traits::eof());

  00055	83 c8 ff	 or	 eax, -1

; 244  : 		}

  00058	5e		 pop	 esi
  00059	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Meta$ = 8						; size = 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT
; _this$ = ecx

; 194  : 		{	// put an element back to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00003	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 194  : 		{	// put an element back to stream

  00006	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00007	8b 30		 mov	 esi, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00009	85 f6		 test	 esi, esi
  0000b	74 3f		 je	 SHORT $LN3@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  0000d	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	76 38		 jbe	 SHORT $LN3@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00014	8b 55 08	 mov	 edx, DWORD PTR __Meta$[ebp]
  00017	83 fa ff	 cmp	 edx, -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  0001a	74 0b		 je	 SHORT $LN2@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 511  : 		return (_Left == _Right);

  0001c	3a 56 ff	 cmp	 dl, BYTE PTR [esi-1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 198  : 			|| (!_Traits::eq_int_type(_Traits::eof(), _Meta)

  0001f	74 06		 je	 SHORT $LN2@pbackfail
  00021	f6 41 3c 02	 test	 BYTE PTR [ecx+60], 2
  00025	75 25		 jne	 SHORT $LN3@pbackfail
$LN2@pbackfail:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 245  : 		*_IGcount -= _Off;

  00027	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0002a	ff 00		 inc	 DWORD PTR [eax]

; 246  : 		*_IGnext += _Off;

  0002c	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0002f	ff 08		 dec	 DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00031	83 fa ff	 cmp	 edx, -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 207  : 		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))

  00034	74 07		 je	 SHORT $LN4@pbackfail
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00036	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00039	8b 09		 mov	 ecx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 209  : 			*_Mysb::gptr() = _Traits::to_char_type(_Meta);

  0003b	88 11		 mov	 BYTE PTR [ecx], dl
$LN4@pbackfail:

; 210  : 			}
; 211  : 
; 212  : 		return (_Traits::not_eof(_Meta));

  0003d	33 c0		 xor	 eax, eax
  0003f	83 fa ff	 cmp	 edx, -1
  00042	5e		 pop	 esi
  00043	0f 44 d0	 cmove	 edx, eax
  00046	8b c2		 mov	 eax, edx

; 213  : 		}

  00048	5d		 pop	 ebp
  00049	c2 04 00	 ret	 4
$LN3@pbackfail:

; 199  : 				&& !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])
; 200  : 				&& (_Mystate & _Constant)))
; 201  : 			{	// can't put back, fail
; 202  : 			return (_Traits::eof());

  0004c	83 c8 ff	 or	 eax, -1
  0004f	5e		 pop	 esi

; 213  : 		}

  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Back_shift$1$ = -4					; size = 4
__Meta$ = 8						; size = 4
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT
; _this$ = ecx

; 119  : 		{	// put an element to stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 120  : 		if (_Mystate & _Constant)

  0000b	f6 47 3c 02	 test	 BYTE PTR [edi+60], 2
  0000f	0f 85 8a 01 00
	00		 jne	 $LN10@overflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 531  : 		return (_Left == _Right);

  00015	8b 5d 08	 mov	 ebx, DWORD PTR __Meta$[ebp]
  00018	83 fb ff	 cmp	 ebx, -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 125  : 		if (_Traits::eq_int_type(_Traits::eof(), _Meta))

  0001b	75 0b		 jne	 SHORT $LN3@overflow

; 191  : 		}

  0001d	5f		 pop	 edi
  0001e	5e		 pop	 esi
  0001f	33 c0		 xor	 eax, eax
  00021	5b		 pop	 ebx
  00022	8b e5		 mov	 esp, ebp
  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN3@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  00028	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0002b	8b 30		 mov	 esi, DWORD PTR [eax]

; 258  : 		return (*_IPnext + *_IPcount);

  0002d	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  00030	8b 08		 mov	 ecx, DWORD PTR [eax]
  00032	03 ce		 add	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 132  : 		if (_Pptr != nullptr && _Pptr < _Epptr)

  00034	85 f6		 test	 esi, esi
  00036	74 1f		 je	 SHORT $LN105@overflow
  00038	3b f1		 cmp	 esi, ecx
  0003a	73 1b		 jae	 SHORT $LN105@overflow

; 133  : 			{	// room in buffer, store it
; 134  : 			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0003c	8b cf		 mov	 ecx, edi
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ

; 135  : 			_Seekhigh = _Pptr + 1;

  00044	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00047	88 18		 mov	 BYTE PTR [eax], bl

; 136  : 			return (_Meta);

  00049	8b c3		 mov	 eax, ebx
  0004b	89 4f 38	 mov	 DWORD PTR [edi+56], ecx
  0004e	5f		 pop	 edi

; 191  : 		}

  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	8b e5		 mov	 esp, ebp
  00053	5d		 pop	 ebp
  00054	c2 04 00	 ret	 4
$LN105@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00057	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0005a	8b 18		 mov	 ebx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 148  : 		if (_Oldsize < _MINSIZE)

  0005c	2b cb		 sub	 ecx, ebx
  0005e	f7 de		 neg	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00060	89 5d fc	 mov	 DWORD PTR __Back_shift$1$[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 148  : 		if (_Oldsize < _MINSIZE)

  00063	1b f6		 sbb	 esi, esi
  00065	23 f1		 and	 esi, ecx
  00067	83 fe 20	 cmp	 esi, 32			; 00000020H
  0006a	73 15		 jae	 SHORT $LN6@overflow

; 150  : 			_Newsize = _MINSIZE;

  0006c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00071	51		 push	 ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 150  : 			_Newsize = _MINSIZE;

  00072	89 4d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00075	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0007a	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  0007d	8b d8		 mov	 ebx, eax
  0007f	eb 64		 jmp	 SHORT $LN46@overflow
$LN6@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 152  : 		else if (_Oldsize < INT_MAX / 2)

  00081	81 fe ff ff ff
	3f		 cmp	 esi, 1073741823		; 3fffffffH
  00087	73 23		 jae	 SHORT $LN8@overflow

; 153  : 			{	// grow by 50 percent
; 154  : 			_Newsize = _Oldsize << 1;

  00089	8d 0c 36	 lea	 ecx, DWORD PTR [esi+esi]
  0008c	89 4d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  0008f	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00095	73 29		 jae	 SHORT $LN107@overflow

; 183  : 		{	// boost the alignment of big allocations to help autovectorization
; 184  : 		return (_Allocate_manually_vector_aligned<_Traits>(_Bytes));
; 185  : 		}
; 186  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 187  : 
; 188  : 	if (_Bytes != 0)

  00097	85 c9		 test	 ecx, ecx
  00099	74 0d		 je	 SHORT $LN48@overflow

; 52   : 		return (::operator new(_Bytes));

  0009b	51		 push	 ecx
  0009c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000a1	83 c4 04	 add	 esp, 4

; 190  : 		return (_Traits::_Allocate(_Bytes));

  000a4	8b d8		 mov	 ebx, eax
  000a6	eb 3d		 jmp	 SHORT $LN46@overflow
$LN48@overflow:

; 191  : 		}
; 192  : 
; 193  : 	return (nullptr);

  000a8	33 db		 xor	 ebx, ebx
  000aa	eb 39		 jmp	 SHORT $LN46@overflow
$LN8@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 156  : 		else if (_Oldsize < INT_MAX)

  000ac	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH
  000b2	0f 83 e7 00 00
	00		 jae	 $LN10@overflow

; 157  : 			{
; 158  : 			_Newsize = INT_MAX;

  000b8	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  000bd	89 4d f8	 mov	 DWORD PTR __Newsize$1$[ebp], ecx
$LN107@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  000c0	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  000c3	83 ca ff	 or	 edx, -1
  000c6	3b c1		 cmp	 eax, ecx
  000c8	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  000cb	50		 push	 eax
  000cc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000d1	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  000d4	85 c0		 test	 eax, eax
  000d6	0f 84 bd 00 00
	00		 je	 $LN95@overflow

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  000dc	8d 58 23	 lea	 ebx, DWORD PTR [eax+35]
  000df	83 e3 e0	 and	 ebx, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  000e2	89 43 fc	 mov	 DWORD PTR [ebx-4], eax
$LN46@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000e5	56		 push	 esi
  000e6	ff 75 fc	 push	 DWORD PTR __Back_shift$1$[ebp]
  000e9	53		 push	 ebx
  000ea	e8 00 00 00 00	 call	 _memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 168  : 		const auto _New_pnext = _Newptr + _Oldsize;

  000ef	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 301  : 		*_IPcount = (int)(_Last - _Next);

  000f2	8b cb		 mov	 ecx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 169  : 		_Seekhigh = _New_pnext + 1; // to include _Meta

  000f4	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 301  : 		*_IPcount = (int)(_Last - _Next);

  000f7	2b ca		 sub	 ecx, edx
  000f9	03 4d f8	 add	 ecx, DWORD PTR __Newsize$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 471  : 		return (static_cast<char *>(_CSTD memcpy(_First1, _First2, _Count)));

  000fc	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 169  : 		_Seekhigh = _New_pnext + 1; // to include _Meta

  000ff	89 47 38	 mov	 DWORD PTR [edi+56], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 299  : 		*_IPfirst = _First;

  00102	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00105	89 18		 mov	 DWORD PTR [eax], ebx

; 300  : 		*_IPnext = _Next;

  00107	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0010a	89 10		 mov	 DWORD PTR [eax], edx

; 301  : 		*_IPcount = (int)(_Last - _Next);

  0010c	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
  0010f	89 08		 mov	 DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 172  : 		if (_Mystate & _Noread)

  00111	f6 47 3c 04	 test	 BYTE PTR [edi+60], 4
  00115	74 15		 je	 SHORT $LN12@overflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00117	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0011a	89 18		 mov	 DWORD PTR [eax], ebx

; 252  : 		*_IGnext = _Next;

  0011c	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  0011f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00125	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00128	89 18		 mov	 DWORD PTR [eax], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 176  : 		else

  0012a	eb 1e		 jmp	 SHORT $LN13@overflow
$LN12@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  0012c	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 178  : 			_Mysb::setg(_Newptr,

  0012f	8b 57 38	 mov	 edx, DWORD PTR [edi+56]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00132	8b 08		 mov	 ecx, DWORD PTR [eax]

; 251  : 		*_IGfirst = _First;

  00134	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]

; 225  : 		return (*_IGnext);

  00137	2b 4d fc	 sub	 ecx, DWORD PTR __Back_shift$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 178  : 			_Mysb::setg(_Newptr,

  0013a	03 cb		 add	 ecx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0013c	2b d1		 sub	 edx, ecx
  0013e	89 18		 mov	 DWORD PTR [eax], ebx
  00140	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  00143	89 08		 mov	 DWORD PTR [eax], ecx
  00145	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  00148	89 10		 mov	 DWORD PTR [eax], edx
$LN13@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 183  : 		if (_Mystate & _Allocated)

  0014a	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  0014d	a8 01		 test	 al, 1
  0014f	74 2a		 je	 SHORT $LN99@overflow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00151	8b 45 fc	 mov	 eax, DWORD PTR __Back_shift$1$[ebp]
  00154	81 fe 00 10 00
	00		 cmp	 esi, 4096		; 00001000H
  0015a	72 12		 jb	 SHORT $LN98@overflow

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0015c	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0015f	83 c6 23	 add	 esi, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00162	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00164	83 c0 fc	 add	 eax, -4			; fffffffcH
  00167	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0016a	77 2d		 ja	 SHORT $LN95@overflow

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0016c	8b c1		 mov	 eax, ecx
$LN98@overflow:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0016e	56		 push	 esi
  0016f	50		 push	 eax
  00170	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00175	8b 47 3c	 mov	 eax, DWORD PTR [edi+60]
  00178	83 c4 08	 add	 esp, 8
$LN99@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 188  : 		_Mystate |= _Allocated;

  0017b	83 c8 01	 or	 eax, 1

; 189  : 		*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  0017e	8b cf		 mov	 ecx, edi
  00180	89 47 3c	 mov	 DWORD PTR [edi+60], eax
  00183	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
  00189	8b 4d 08	 mov	 ecx, DWORD PTR __Meta$[ebp]
  0018c	5f		 pop	 edi

; 191  : 		}

  0018d	5e		 pop	 esi
  0018e	88 08		 mov	 BYTE PTR [eax], cl
  00190	8b c1		 mov	 eax, ecx
  00192	5b		 pop	 ebx
  00193	8b e5		 mov	 esp, ebp
  00195	5d		 pop	 ebp
  00196	c2 04 00	 ret	 4
$LN95@overflow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN10@overflow:
  0019f	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 191  : 		}

  001a0	5e		 pop	 esi
  001a1	83 c8 ff	 or	 eax, -1
  001a4	5b		 pop	 ebx
  001a5	8b e5		 mov	 esp, ebp
  001a7	5d		 pop	 ebp
  001a8	c2 04 00	 ret	 4
$LN109@overflow:
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ
_TEXT	SEGMENT
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 77   : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 402  : 		if (_Mystate & _Allocated)

  00003	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1

; 77   : 		{	// destroy the object

  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 402  : 		if (_Mystate & _Allocated)

  0000d	74 47		 je	 SHORT $LN37@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  0000f	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	85 c9		 test	 ecx, ecx
  00016	74 09		 je	 SHORT $LN6@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  00018	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0001f	eb 0a		 jmp	 SHORT $LN7@basic_stri
$LN6@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 240  : 		return (*_IGnext + *_IGcount);

  00021	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00024	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00027	8b 10		 mov	 edx, DWORD PTR [eax]
  00029	03 11		 add	 edx, DWORD PTR [ecx]
$LN7@basic_stri:

; 220  : 		return (*_IGfirst);

  0002b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00032	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00038	72 12		 jb	 SHORT $LN36@basic_stri

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0003a	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0003d	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00040	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00042	83 c0 fc	 add	 eax, -4			; fffffffcH
  00045	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00048	77 56		 ja	 SHORT $LN33@basic_stri

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0004a	8b c1		 mov	 eax, ecx
$LN36@basic_stri:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004c	52		 push	 edx
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00053	83 c4 08	 add	 esp, 8
$LN37@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00056	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 79   : 		}

  00059	8b ce		 mov	 ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  0005b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  00061	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00064	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  0006a	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0006d	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 292  : 		*_IPfirst = _First;

  00073	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00076	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 293  : 		*_IPnext = _First;

  0007c	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0007f	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  00085	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00088	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 412  : 		_Mystate &= ~_Allocated;

  0008e	83 66 3c fe	 and	 DWORD PTR [esi+60], -2	; fffffffeH
  00092	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 79   : 		}

  00099	5e		 pop	 esi
  0009a	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
$LN33@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN45@basic_stri:
  000a6	cc		 int	 3
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 614  : 		{	// destroy the object

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	8b 46 b0	 mov	 eax, DWORD PTR [esi-80]
  00009	57		 push	 edi
  0000a	8d 7e b0	 lea	 edi, DWORD PTR [esi-80]

; 615  : 		}

  0000d	8d 4e b4	 lea	 ecx, DWORD PTR [esi-76]
  00010	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00013	c7 44 30 b0 00
	00 00 00	 mov	 DWORD PTR [eax+esi-80], OFFSET ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0001b	8b 07		 mov	 eax, DWORD PTR [edi]
  0001d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00020	8d 42 b0	 lea	 eax, DWORD PTR [edx-80]
  00023	89 44 32 ac	 mov	 DWORD PTR [edx+esi-84], eax
  00027	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0002c	8d 4e b8	 lea	 ecx, DWORD PTR [esi-72]
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
  00035	8b ce		 mov	 ecx, esi
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  0003d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00041	74 0e		 je	 SHORT $LN9@scalar
  00043	68 98 00 00 00	 push	 152			; 00000098H
  00048	57		 push	 edi
  00049	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004e	83 c4 08	 add	 esp, 8
$LN9@scalar:
  00051	8b c7		 mov	 eax, edi
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi
  00055	5d		 pop	 ebp
  00056	c2 04 00	 ret	 4
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  0000b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0000f	74 0b		 je	 SHORT $LN4@scalar
  00011	6a 44		 push	 68			; 00000044H
  00013	56		 push	 esi
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
$LN4@scalar:
  0001c	8b c6		 mov	 eax, esi
  0001e	5e		 pop	 esi
  0001f	5d		 pop	 ebp
  00020	c2 04 00	 ret	 4
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z
_TEXT	SEGMENT
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z PROC	; std::pointer_traits<char *>::pointer_to, COMDAT
; __Val$ = ecx

; 342  : 		return (_STD addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 343  : 		}

  00002	c3		 ret	 0
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ENDP	; std::pointer_traits<char *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 591  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 592  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 581  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 582  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SA?AV?$allocator@K@2@ABV32@@Z
_TEXT	SEGMENT
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SA?AV?$allocator@K@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<unsigned long> >::select_on_container_copy_construction, COMDAT
; ___$ReturnUdt$ = ecx
; __Al$dead$ = edx

; 897  : 		return (_Al);

  00000	8b c1		 mov	 eax, ecx

; 898  : 		}

  00002	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@K@std@@@std@@SA?AV?$allocator@K@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<unsigned long> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator==, COMDAT
; _this$ = ecx

; 119  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 		return (_Ptr == _Right._Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 121  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator++, COMDAT
; _this$ = ecx

; 58   : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN4@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN19@operator
$LL2@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN19@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL2@operator
$LN19@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 75   : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN4@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN9@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL8@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL8@operator
$LN9@operator:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else
; 70   : 			{
; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree
; 72   : 			}
; 73   : 
; 74   : 		return (*this);

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 75   : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@XZ
_TEXT	SEGMENT
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator*, COMDAT
; _this$ = ecx

; 49   : 		return (_Ptr->_Myval);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 50   : 		}

  00005	c3		 ret	 0
??D?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBEABU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >, COMDAT
; _this$ = ecx

; 152  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 153  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::_Tree_unchecked_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Lmost, COMDAT
; _this$ = ecx

; 498  : 		return (_Myhead->_Left);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 499  : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@ABV32@@Z
_TEXT	SEGMENT
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::select_on_container_copy_construction, COMDAT
; ___$ReturnUdt$ = ecx
; __Al$dead$ = edx

; 897  : 		return (_Al);

  00000	8b c1		 mov	 eax, ecx

; 898  : 		}

  00002	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1015 : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 1016 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1010 : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1011 : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00000	6a 20		 push	 32			; 00000020H
  00002	ff 31		 push	 DWORD PTR [ecx]
  00004	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00009	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 814  : 		}

  0000c	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T17 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 2112 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 42   : 		: _Ptr(_Pnode)

  00004	8b 01		 mov	 eax, DWORD PTR [ecx]

; 2113 : 		erase(begin(), end());

  00006	50		 push	 eax
  00007	ff 30		 push	 DWORD PTR [eax]
  00009	8d 45 fc	 lea	 eax, DWORD PTR $T17[ebp]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase

; 2114 : 		}

  00012	8b e5		 mov	 esp, ebp
  00014	5d		 pop	 ebp
  00015	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator==, COMDAT
; _this$ = ecx

; 119  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 120  : 		return (_Ptr == _Right._Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 121  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Lmost, COMDAT
; _this$ = ecx

; 498  : 		return (_Myhead->_Left);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 499  : 		}

  00002	c3		 ret	 0
?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Lmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Min, COMDAT
; __Pnode$ = ecx

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00006	75 0d		 jne	 SHORT $LN9@Min
$LL2@Min:
  00008	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  0000a	8b c2		 mov	 eax, edx
  0000c	8b d1		 mov	 edx, ecx
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	74 f4		 je	 SHORT $LL2@Min

; 489  : 		}

  00014	c3		 ret	 0
$LN9@Min:

; 488  : 		return (_Pnode);

  00015	8b c1		 mov	 eax, ecx

; 489  : 		}

  00017	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Get_data, COMDAT
; _this$ = ecx

; 1020 : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 1021 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@KV?$allocator@K@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@KV?$allocator@K@std@@@std@@AAE_NI@Z PROC	; std::vector<unsigned long,std::allocator<unsigned long> >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1873 : 		this->_Myfirst() = pointer();
; 1874 : 		this->_Mylast() = pointer();
; 1875 : 		this->_Myend() = pointer();
; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Newcapacity$[ebp]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001e	85 ff		 test	 edi, edi
  00020	75 08		 jne	 SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

  00022	5f		 pop	 edi
  00023	32 c0		 xor	 al, al

; 1892 : 		}

  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

  0002a	81 ff ff ff ff
	3f		 cmp	 edi, 1073741823		; 3fffffffH
  00030	77 7f		 ja	 SHORT $LN99@Buy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00032	c1 e7 02	 shl	 edi, 2

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00035	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0003b	72 3d		 jb	 SHORT $LN45@Buy

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0003d	8d 47 23	 lea	 eax, DWORD PTR [edi+35]

; 94   : 	if (_Block_size <= _Bytes)

  00040	83 c9 ff	 or	 ecx, -1
  00043	3b c7		 cmp	 eax, edi
  00045	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0004e	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00050	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00053	85 c9		 test	 ecx, ecx
  00055	74 1d		 je	 SHORT $LN54@Buy

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00057	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0005a	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0005d	89 48 fc	 mov	 DWORD PTR [eax-4], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00060	89 06		 mov	 DWORD PTR [esi], eax

; 1888 : 		this->_Mylast() = this->_Myfirst();

  00062	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	03 c7		 add	 eax, edi
  00069	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  0006c	b0 01		 mov	 al, 1
  0006e	5f		 pop	 edi

; 1892 : 		}

  0006f	5e		 pop	 esi
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN54@Buy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN45@Buy:

; 188  : 	if (_Bytes != 0)

  0007a	85 ff		 test	 edi, edi
  0007c	74 1d		 je	 SHORT $LN46@Buy

; 52   : 		return (::operator new(_Bytes));

  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00084	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00086	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1888 : 		this->_Mylast() = this->_Myfirst();

  00089	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  0008c	8b 06		 mov	 eax, DWORD PTR [esi]
  0008e	03 c7		 add	 eax, edi
  00090	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  00093	b0 01		 mov	 al, 1
  00095	5f		 pop	 edi

; 1892 : 		}

  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
$LN46@Buy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 193  : 	return (nullptr);

  0009b	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  0009d	89 06		 mov	 DWORD PTR [esi], eax

; 1888 : 		this->_Mylast() = this->_Myfirst();

  0009f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  000a2	8b 06		 mov	 eax, DWORD PTR [esi]
  000a4	03 c7		 add	 eax, edi
  000a6	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  000a9	b0 01		 mov	 al, 1
  000ab	5f		 pop	 edi

; 1892 : 		}

  000ac	5e		 pop	 esi
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN99@Buy:

; 1883 : 			{
; 1884 : 			_Xlength();

  000b1	e8 00 00 00 00	 call	 ?_Xlength@?$vector@KV?$allocator@K@std@@@std@@CAXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlength
$LN97@Buy:
  000b6	cc		 int	 3
?_Buy@?$vector@KV?$allocator@K@std@@@std@@AAE_NI@Z ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Buy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 401  : 		{	// discard any allocated buffer and clear pointers

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 402  : 		if (_Mystate & _Allocated)

  00003	f6 46 3c 01	 test	 BYTE PTR [esi+60], 1
  00007	74 47		 je	 SHORT $LN35@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  00009	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  0000c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 09		 je	 SHORT $LN4@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 258  : 		return (*_IPnext + *_IPcount);

  00012	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00015	8b 10		 mov	 edx, DWORD PTR [eax]
  00017	03 d1		 add	 edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00019	eb 0a		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 240  : 		return (*_IGnext + *_IGcount);

  0001b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  0001e	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  00021	8b 10		 mov	 edx, DWORD PTR [eax]
  00023	03 11		 add	 edx, DWORD PTR [ecx]
$LN5@Tidy:

; 220  : 		return (*_IGfirst);

  00025	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 404  : 			_Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00028	8b 00		 mov	 eax, DWORD PTR [eax]
  0002a	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0002c	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00032	72 12		 jb	 SHORT $LN34@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00034	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00037	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0003a	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0003f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00042	77 4f		 ja	 SHORT $LN31@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00044	8b c1		 mov	 eax, ecx
$LN34@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00046	52		 push	 edx
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0004d	83 c4 08	 add	 esp, 8
$LN35@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 251  : 		*_IGfirst = _First;

  00050	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00053	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 252  : 		*_IGnext = _Next;

  00059	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005c	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 253  : 		*_IGcount = (int)(_Last - _Next);

  00062	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00065	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 292  : 		*_IPfirst = _First;

  0006b	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0006e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 293  : 		*_IPnext = _First;

  00074	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00077	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 294  : 		*_IPcount = (int)(_Last - _First);

  0007d	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00080	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 412  : 		_Mystate &= ~_Allocated;

  00086	83 66 3c fe	 and	 DWORD PTR [esi+60], -2	; fffffffeH
  0008a	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0
  00091	5e		 pop	 esi

; 413  : 		}

  00092	c3		 ret	 0
$LN31@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN42@Tidy:
  00099	cc		 int	 3
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT
; _this$ = ecx

; 95   : 		{	// return string copy of character array

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx
  00028	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 3976 : 		_My_data._Mysize = 0;

  0002f	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 108  : 		return (_Result);

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	8b 4f 3c	 mov	 ecx, DWORD PTR [edi+60]
  0004d	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR $T1[ebp], 1
  00054	f6 c1 02	 test	 cl, 2
  00057	75 1b		 jne	 SHORT $LN2@str
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 235  : 		return (*_IPnext);

  00059	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 97   : 		if (!(_Mystate & _Constant) && _Mysb::pptr() != nullptr)

  0005c	8b 18		 mov	 ebx, DWORD PTR [eax]
  0005e	85 db		 test	 ebx, ebx
  00060	74 12		 je	 SHORT $LN2@str
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 230  : 		return (*_IPfirst);

  00062	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00065	3b 5f 38	 cmp	 ebx, DWORD PTR [edi+56]
  00068	0f 42 5f 38	 cmovb	 ebx, DWORD PTR [edi+56]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 230  : 		return (*_IPfirst);

  0006c	8b 10		 mov	 edx, DWORD PTR [eax]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 100  : 			_Result.assign(_Base, static_cast<_Mysize_type>(_Max_value(_Mysb::pptr(), _Seekhigh) - _Base));

  0006e	2b da		 sub	 ebx, edx
  00070	53		 push	 ebx
  00071	52		 push	 edx
  00072	eb 1e		 jmp	 SHORT $LN46@str
$LN2@str:

; 102  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != nullptr)

  00074	f6 c1 04	 test	 cl, 4
  00077	75 20		 jne	 SHORT $LN43@str
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 225  : 		return (*_IGnext);

  00079	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 102  : 		else if (!(_Mystate & _Noread) && _Mysb::gptr() != nullptr)

  0007c	8b 10		 mov	 edx, DWORD PTR [eax]
  0007e	85 d2		 test	 edx, edx
  00080	74 17		 je	 SHORT $LN43@str
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\streambuf

; 220  : 		return (*_IGfirst);

  00082	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]

; 240  : 		return (*_IGnext + *_IGcount);

  00087	8b 47 2c	 mov	 eax, DWORD PTR [edi+44]
  0008a	8b 00		 mov	 eax, DWORD PTR [eax]
  0008c	2b c1		 sub	 eax, ecx
  0008e	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream

; 105  : 			_Result.assign(_Base, static_cast<_Mysize_type>(_Mysb::egptr() - _Base));

  00090	50		 push	 eax
  00091	51		 push	 ecx
$LN46@str:

; 109  : 		}

  00092	8b ce		 mov	 ecx, esi
  00094	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN43@str:
  00099	8b c6		 mov	 eax, esi
  0009b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0009e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a5	59		 pop	 ecx
  000a6	5f		 pop	 edi
  000a7	5e		 pop	 esi
  000a8	5b		 pop	 ebx
  000a9	8b e5		 mov	 esp, ebp
  000ab	5d		 pop	 ebp
  000ac	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T1[ebp]
  00003	83 e0 01	 and	 eax, 1
  00006	0f 84 0c 00 00
	00		 je	 $LN7@str
  0000c	83 65 f0 fe	 and	 DWORD PTR $T1[ebp], -2	; fffffffeH
  00010	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN7@str:
  00018	c3		 ret	 0
__ehhandler$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00019	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001d	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00020	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Mode$ = 8						; size = 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 33   : 		{	// construct empty character buffer from mode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ

; 431  : 		if (!(_Mode & ios_base::out))

  00011	8b 5d 08	 mov	 ebx, DWORD PTR __Mode$[ebp]
  00014	8b d3		 mov	 edx, ebx
  00016	f7 d2		 not	 edx

; 33   : 		{	// construct empty character buffer from mode

  00018	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@

; 431  : 		if (!(_Mode & ios_base::out))

  0001e	83 e2 01	 and	 edx, 1

; 30   : 		: _Seekhigh(nullptr),

  00021	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 431  : 		if (!(_Mode & ios_base::out))

  00028	c1 e2 02	 shl	 edx, 2
  0002b	8b c3		 mov	 eax, ebx

; 432  : 			{
; 433  : 			_State |= _Constant;
; 434  : 			}
; 435  : 
; 436  : 		if (_Mode & ios_base::app)

  0002d	8b ca		 mov	 ecx, edx
  0002f	83 c9 02	 or	 ecx, 2
  00032	24 02		 and	 al, 2
  00034	8b c3		 mov	 eax, ebx
  00036	0f 45 ca	 cmovne	 ecx, edx

; 437  : 			{
; 438  : 			_State |= _Append;
; 439  : 			}
; 440  : 
; 441  : 		if (_Mode & ios_base::ate)

  00039	8b d1		 mov	 edx, ecx
  0003b	83 ca 08	 or	 edx, 8
  0003e	24 08		 and	 al, 8
  00040	0f 44 d1	 cmove	 edx, ecx

; 31   : 		_Mystate(_Getstate(_Mode)),

  00043	8b c2		 mov	 eax, edx
  00045	83 c8 10	 or	 eax, 16			; 00000010H

; 441  : 		if (_Mode & ios_base::ate)

  00048	80 e3 04	 and	 bl, 4

; 31   : 		_Mystate(_Getstate(_Mode)),

  0004b	0f 44 c2	 cmove	 eax, edx
  0004e	89 46 3c	 mov	 DWORD PTR [esi+60], eax

; 34   : 		}

  00051	8b c6		 mov	 eax, esi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	8b e5		 mov	 esp, ebp
  00057	5d		 pop	 ebp
  00058	c2 04 00	 ret	 4
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 560  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 561  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		this->_Adopt(_Plist);
; 45   : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,std::_Iterator_base0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Min, COMDAT
; __Pnode$ = ecx

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00000	8b 11		 mov	 edx, DWORD PTR [ecx]
  00002	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00006	75 0d		 jne	 SHORT $LN9@Min
$LL2@Min:
  00008	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  0000a	8b c2		 mov	 eax, edx
  0000c	8b d1		 mov	 edx, ecx
  0000e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00012	74 f4		 je	 SHORT $LL2@Min

; 489  : 		}

  00014	c3		 ret	 0
$LN9@Min:

; 488  : 		return (_Pnode);

  00015	8b c1		 mov	 eax, ecx

; 489  : 		}

  00017	c3		 ret	 0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Min
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Freeheadnode, COMDAT
; _this$dead$ = ecx

; 946  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00006	6a 20		 push	 32			; 00000020H
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 948  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
__Head$1$ = -24						; size = 4
___$ReturnUdt$GSCopy$1$ = -20				; size = 4
_this$GSCopy$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1385 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 45 f0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax

; 498  : 		return (_Myhead->_Left);

  0002d	8b 18		 mov	 ebx, DWORD PTR [eax]

; 42   : 		: _Ptr(_Pnode)

  0002f	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 1385 : 		{	// erase [_First, _Last)

  00032	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]

; 1386 : 		if (_First == begin() && _Last == end())

  00035	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00038	89 4d ec	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], ecx

; 498  : 		return (_Myhead->_Left);

  0003b	89 5d e8	 mov	 DWORD PTR __Head$1$[ebp], ebx

; 42   : 		: _Ptr(_Pnode)

  0003e	3b 03		 cmp	 eax, DWORD PTR [ebx]

; 1386 : 		if (_First == begin() && _Last == end())

  00040	75 7d		 jne	 SHORT $LN264@erase

; 42   : 		: _Ptr(_Pnode)

  00042	3b d3		 cmp	 edx, ebx

; 1386 : 		if (_First == begin() && _Last == end())

  00044	75 79		 jne	 SHORT $LN264@erase

; 1408 : 		{	// erase all

  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0004d	8b c3		 mov	 eax, ebx

; 1415 : 		_Erase(_My_data._Root());

  0004f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00052	8b f7		 mov	 esi, edi
  00054	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00058	75 32		 jne	 SHORT $LN62@erase
  0005a	8b 5d f0	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0005d	0f 1f 00	 npad	 3
$LL63@erase:

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	8b cb		 mov	 ecx, ebx
  00065	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Erase

; 2023 : 			_Pnode = _Pnode->_Left;

  0006a	8b 36		 mov	 esi, DWORD PTR [esi]

; 2024 : 			_Alnode& _Al = this->_Getal();
; 2025 : 			_Alnode_traits::destroy(_Al, _STD addressof(_Rootnode->_Myval));

  0006c	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 894  : 		_Tidy();

  0006f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00074	6a 20		 push	 32			; 00000020H
  00076	57		 push	 edi
  00077	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0007c	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0007f	8b fe		 mov	 edi, esi
  00081	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00085	74 d9		 je	 SHORT $LL63@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00087	8b 03		 mov	 eax, DWORD PTR [ebx]
  00089	8b 5d e8	 mov	 ebx, DWORD PTR __Head$1$[ebp]
$LN62@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1416 : 		_My_data._Root() = _Head;

  0008c	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 498  : 		return (_Myhead->_Left);

  0008f	8b 45 f0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1417 : 		_My_data._Lmost() = _Head;

  00094	89 19		 mov	 DWORD PTR [ecx], ebx

; 1418 : 		_My_data._Rmost() = _Head;

  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	89 59 08	 mov	 DWORD PTR [ecx+8], ebx

; 1419 : 		_My_data._Mysize = 0;

  0009b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 498  : 		return (_Myhead->_Left);

  000a2	8b 08		 mov	 ecx, DWORD PTR [eax]

; 42   : 		: _Ptr(_Pnode)

  000a4	8b 45 ec	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  000a7	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000a9	89 08		 mov	 DWORD PTR [eax], ecx

; 1396 : 			}
; 1397 : 		}

  000ab	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000ae	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000b5	59		 pop	 ecx
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c2 0c 00	 ret	 12			; 0000000cH
$LN264@erase:

; 278  : 		return (this->_Ptr == _Right._Ptr);

  000bf	3b c2		 cmp	 eax, edx

; 1387 : 			{	// erase all
; 1388 : 			clear();
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// partial erase, one at a time
; 1393 : 			while (_First != _Last)

  000c1	0f 84 bf 00 00
	00		 je	 $LN3@erase
  000c7	8b 5d f0	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  000ca	66 0f 1f 44 00
	00		 npad	 6
$LL2@erase:

; 59   : 		if (_Ptr->_Right->_Isnil)

  000d0	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000d3	8d 78 08	 lea	 edi, DWORD PTR [eax+8]

; 246  : 		_Tree_const_iterator _Tmp = *this;

  000d6	8b c8		 mov	 ecx, eax

; 59   : 		if (_Ptr->_Right->_Isnil)

  000d8	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000dc	74 21		 je	 SHORT $LN157@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  000de	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000e1	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000e5	75 13		 jne	 SHORT $LN156@erase
$LL155@erase:
  000e7	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000ea	75 0e		 jne	 SHORT $LN156@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  000ec	8b c2		 mov	 eax, edx
  000ee	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  000f1	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000f4	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000f8	74 ed		 je	 SHORT $LL155@erase
$LN156@erase:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  000fa	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx

; 68   : 			}
; 69   : 		else

  000fd	eb 17		 jmp	 SHORT $LN158@erase
$LN157@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000ff	8b 16		 mov	 edx, DWORD PTR [esi]
  00101	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00105	75 0c		 jne	 SHORT $LN162@erase
$LL161@erase:
  00107	8b 02		 mov	 eax, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  00109	8b f2		 mov	 esi, edx
  0010b	8b d0		 mov	 edx, eax
  0010d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00111	74 f4		 je	 SHORT $LL161@erase
$LN162@erase:

; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

  00113	89 75 0c	 mov	 DWORD PTR __First$[ebp], esi
$LN158@erase:

; 59   : 		if (_Ptr->_Right->_Isnil)

  00116	8b 17		 mov	 edx, DWORD PTR [edi]

; 1369 : 		const_iterator _Successor = _Where;

  00118	8b c1		 mov	 eax, ecx

; 59   : 		if (_Ptr->_Right->_Isnil)

  0011a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0011e	74 22		 je	 SHORT $LN179@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00120	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00123	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00127	75 31		 jne	 SHORT $LN184@erase
  00129	0f 1f 80 00 00
	00 00		 npad	 7
$LL177@erase:
  00130	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00133	75 25		 jne	 SHORT $LN184@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00135	8b c2		 mov	 eax, edx
  00137	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0013a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0013e	74 f0		 je	 SHORT $LL177@erase

; 68   : 			}
; 69   : 		else

  00140	eb 18		 jmp	 SHORT $LN184@erase
$LN179@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00142	8b 12		 mov	 edx, DWORD PTR [edx]
  00144	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00148	75 10		 jne	 SHORT $LN184@erase
  0014a	66 0f 1f 44 00
	00		 npad	 6
$LL183@erase:
  00150	8b 02		 mov	 eax, DWORD PTR [edx]
  00152	8b d0		 mov	 edx, eax
  00154	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00158	74 f6		 je	 SHORT $LL183@erase
$LN184@erase:

; 1371 : 		_Nodeptr _Erasednode = _My_data._Extract(_Where);	// node to erase

  0015a	51		 push	 ecx
  0015b	8b cb		 mov	 ecx, ebx
  0015d	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Extract
  00162	8b f0		 mov	 esi, eax

; 1372 : 
; 1373 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1374 : 		_Orphan_ptr(_Erasednode);
; 1375 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1376 : 
; 1377 : 		_Alnode& _Al = this->_Getal();
; 1378 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Erasednode->_Myval));	// delete erased node

  00164	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 894  : 		_Tidy();

  00167	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0016c	6a 20		 push	 32			; 00000020H
  0016e	56		 push	 esi
  0016f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 278  : 		return (this->_Ptr == _Right._Ptr);

  00174	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00177	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 278  : 		return (this->_Ptr == _Right._Ptr);

  0017a	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1387 : 			{	// erase all
; 1388 : 			clear();
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// partial erase, one at a time
; 1393 : 			while (_First != _Last)

  0017d	0f 85 4d ff ff
	ff		 jne	 $LL2@erase
  00183	8b 4d ec	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
$LN3@erase:

; 42   : 		: _Ptr(_Pnode)

  00186	89 01		 mov	 DWORD PTR [ecx], eax

; 1394 : 				erase(_First++);
; 1395 : 			return (iterator(_First._Ptr, _STD addressof(this->_Get_data())));

  00188	8b c1		 mov	 eax, ecx

; 1396 : 			}
; 1397 : 		}

  0018a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0018d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00194	59		 pop	 ecx
  00195	5f		 pop	 edi
  00196	5e		 pop	 esi
  00197	5b		 pop	 ebx
  00198	8b e5		 mov	 esp, ebp
  0019a	5d		 pop	 ebp
  0019b	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::end, COMDAT
; _this$ = ecx

; 1197 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1198 : 		auto& _My_data = this->_Get_data();
; 1199 : 		return (iterator(_My_data._Myhead, _STD addressof(_My_data)));
; 1200 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::begin, COMDAT
; _this$ = ecx

; 1185 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		return (_Myhead->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 42   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1186 : 		auto& _My_data = this->_Get_data();
; 1187 : 		return (iterator(_My_data._Lmost(), _STD addressof(_My_data)));
; 1188 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QBEABV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3976 : 		_My_data._Mysize = 0;

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 2150 : 		}

  00007	8b c1		 mov	 eax, ecx

; 3977 : 		_My_data._Myres = this->_BUF_SIZE - 1;

  00009	c7 41 14 0f 00
	00 00		 mov	 DWORD PTR [ecx+20], 15	; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\iosfwd

; 506  : 		_Left = _Right;

  00010	c6 01 00	 mov	 BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 2150 : 		}

  00013	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z
_TEXT	SEGMENT
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT
; __Mode$ = ecx

; 424  : 		{	// convert open mode to stream state bits

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 425  : 		int _State = 0;
; 426  : 		if (!(_Mode & ios_base::in))
; 427  : 			{
; 428  : 			_State |= _Noread;
; 429  : 			}
; 430  : 
; 431  : 		if (!(_Mode & ios_base::out))

  00003	8b d3		 mov	 edx, ebx
  00005	8b c3		 mov	 eax, ebx
  00007	f7 d2		 not	 edx
  00009	83 e2 01	 and	 edx, 1
  0000c	c1 e2 02	 shl	 edx, 2
  0000f	56		 push	 esi

; 432  : 			{
; 433  : 			_State |= _Constant;
; 434  : 			}
; 435  : 
; 436  : 		if (_Mode & ios_base::app)

  00010	8b f2		 mov	 esi, edx
  00012	83 ce 02	 or	 esi, 2
  00015	24 02		 and	 al, 2
  00017	8b c3		 mov	 eax, ebx
  00019	0f 45 f2	 cmovne	 esi, edx

; 437  : 			{
; 438  : 			_State |= _Append;
; 439  : 			}
; 440  : 
; 441  : 		if (_Mode & ios_base::ate)

  0001c	8b ce		 mov	 ecx, esi
  0001e	83 c9 08	 or	 ecx, 8
  00021	24 08		 and	 al, 8
  00023	0f 44 ce	 cmove	 ecx, esi

; 442  : 			{
; 443  : 			_State |= _Atend;
; 444  : 			}
; 445  : 
; 446  : 		return (_State);

  00026	8b c1		 mov	 eax, ecx
  00028	83 c8 10	 or	 eax, 16			; 00000010H
  0002b	80 e3 04	 and	 bl, 4
  0002e	5e		 pop	 esi
  0002f	0f 44 c1	 cmove	 eax, ecx
  00032	5b		 pop	 ebx

; 447  : 		}

  00033	c3		 ret	 0
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator!=, COMDAT
; _this$ = ecx

; 282  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  : 		return (!(*this == _Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 284  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator==, COMDAT
; _this$ = ecx

; 273  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 275  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 277  : 
; 278  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 279  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator++, COMDAT
; _this$ = ecx

; 245  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 246  : 		_Tree_const_iterator _Tmp = *this;

  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 07		 mov	 DWORD PTR [edi], eax

; 59   : 		if (_Ptr->_Right->_Isnil)

  0000e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00011	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00015	74 25		 je	 SHORT $LN10@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0001e	75 30		 jne	 SHORT $LN15@operator
$LL8@operator:
  00020	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00023	75 2b		 jne	 SHORT $LN15@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00025	89 16		 mov	 DWORD PTR [esi], edx
  00027	8b c2		 mov	 eax, edx
  00029	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0002c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00030	74 ee		 je	 SHORT $LL8@operator

; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}

  00032	8b c7		 mov	 eax, edi
  00034	89 16		 mov	 DWORD PTR [esi], edx
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN10@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0003c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00042	75 0c		 jne	 SHORT $LN15@operator
$LL14@operator:
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00046	8b d1		 mov	 edx, ecx
  00048	8b c8		 mov	 ecx, eax
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f4		 je	 SHORT $LL14@operator
$LN15@operator:

; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}

  00050	8b c7		 mov	 eax, edi
  00052	89 16		 mov	 DWORD PTR [esi], edx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 328  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1005 : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1006 : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Construct, COMDAT
; _this$ = ecx

; 807  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 809  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Head$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::clear, COMDAT
; _this$ = ecx

; 1408 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx

; 1409 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1410 : 		this->_Orphan_ptr(nullptr);
; 1411 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1412 : 
; 1413 : 		auto& _My_data = this->_Get_data();
; 1414 : 		auto _Head = _My_data._Myhead;

  00028	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0002a	8b c1		 mov	 eax, ecx

; 1409 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1410 : 		this->_Orphan_ptr(nullptr);
; 1411 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1412 : 
; 1413 : 		auto& _My_data = this->_Get_data();
; 1414 : 		auto _Head = _My_data._Myhead;

  0002c	89 4d f0	 mov	 DWORD PTR __Head$1$[ebp], ecx

; 1415 : 		_Erase(_My_data._Root());

  0002f	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00032	8b f3		 mov	 esi, ebx
  00034	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00038	75 32		 jne	 SHORT $LN13@clear
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL14@clear:

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

  00040	ff 76 08	 push	 DWORD PTR [esi+8]
  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Erase

; 2023 : 			_Pnode = _Pnode->_Left;

  0004a	8b 36		 mov	 esi, DWORD PTR [esi]

; 2024 : 			_Alnode& _Al = this->_Getal();
; 2025 : 			_Alnode_traits::destroy(_Al, _STD addressof(_Rootnode->_Myval));

  0004c	8d 4b 14	 lea	 ecx, DWORD PTR [ebx+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 894  : 		_Tidy();

  0004f	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00054	6a 20		 push	 32			; 00000020H
  00056	53		 push	 ebx
  00057	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005c	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0005f	8b de		 mov	 ebx, esi
  00061	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00065	74 d9		 je	 SHORT $LL14@clear
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00067	8b 07		 mov	 eax, DWORD PTR [edi]
  00069	8b 4d f0	 mov	 ecx, DWORD PTR __Head$1$[ebp]
$LN13@clear:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1416 : 		_My_data._Root() = _Head;

  0006c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 498  : 		return (_Myhead->_Left);

  0006f	8b 07		 mov	 eax, DWORD PTR [edi]

; 1417 : 		_My_data._Lmost() = _Head;

  00071	89 08		 mov	 DWORD PTR [eax], ecx

; 1418 : 		_My_data._Rmost() = _Head;

  00073	8b 07		 mov	 eax, DWORD PTR [edi]
  00075	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1419 : 		_My_data._Mysize = 0;

  00078	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1420 : 		}

  0007f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00082	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00089	59		 pop	 ecx
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	5b		 pop	 ebx
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase, COMDAT
; _this$ = ecx

; 1362 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1363 : 		auto& _My_data = this->_Get_data();
; 1364 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1365 : 		_STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data)
; 1366 : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 1367 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1368 : 
; 1369 : 		const_iterator _Successor = _Where;

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  0000e	8b c1		 mov	 eax, ecx

; 59   : 		if (_Ptr->_Right->_Isnil)

  00010	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00013	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00017	74 1b		 je	 SHORT $LN16@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00019	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0001c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00020	75 2a		 jne	 SHORT $LN21@erase
$LL14@erase:
  00022	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00025	75 25		 jne	 SHORT $LN21@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00027	8b c6		 mov	 eax, esi
  00029	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0002c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00030	74 f0		 je	 SHORT $LL14@erase

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

  00032	eb 18		 jmp	 SHORT $LN21@erase
$LN16@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00034	8b 16		 mov	 edx, DWORD PTR [esi]
  00036	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0003a	75 10		 jne	 SHORT $LN21@erase
  0003c	0f 1f 40 00	 npad	 4
$LL20@erase:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f2		 mov	 esi, edx
  00044	8b d0		 mov	 edx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL20@erase
$LN21@erase:

; 1370 : 		++_Successor;	// save successor iterator for return
; 1371 : 		_Nodeptr _Erasednode = _My_data._Extract(_Where);	// node to erase

  0004c	51		 push	 ecx
  0004d	8b cf		 mov	 ecx, edi
  0004f	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Extract
  00054	8b f8		 mov	 edi, eax

; 1372 : 
; 1373 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1374 : 		_Orphan_ptr(_Erasednode);
; 1375 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1376 : 
; 1377 : 		_Alnode& _Al = this->_Getal();
; 1378 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Erasednode->_Myval));	// delete erased node

  00056	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 894  : 		_Tidy();

  00059	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0005e	6a 20		 push	 32			; 00000020H
  00060	57		 push	 edi
  00061	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00066	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  00069	89 33		 mov	 DWORD PTR [ebx], esi

; 1379 : 		_Node::_Freenode0(_Al, _Erasednode);
; 1380 : 
; 1381 : 		return (iterator(_Successor._Ptr, _STD addressof(_My_data)));	// return successor iterator

  0006b	8b c3		 mov	 eax, ebx
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 1382 : 		}

  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
?erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c2 04 00	 ret	 4
?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator++, COMDAT
; _this$ = ecx

; 234  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN6@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL4@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL4@operator
$LN21@operator:

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 242  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN6@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN11@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL10@operator
$LN11@operator:

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 242  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Erasednode$1$ = -8					; size = 4
_this$GSCopy$1$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Extract, COMDAT
; _this$ = ecx

; 562  : 		{	// extract node at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 563  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 564  : 		_STL_VERIFY(_Where._Getcont() == this
; 565  : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 566  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 567  : 
; 568  : 		_Nodeptr _Erasednode = _Where._Ptr;	// node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	8b d0		 mov	 edx, eax
  0000b	53		 push	 ebx

; 59   : 		if (_Ptr->_Right->_Isnil)

  0000c	8d 58 08	 lea	 ebx, DWORD PTR [eax+8]

; 562  : 		{	// extract node at _Where

  0000f	89 4d fc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00012	56		 push	 esi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00013	8b 33		 mov	 esi, DWORD PTR [ebx]

; 563  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 564  : 		_STL_VERIFY(_Where._Getcont() == this
; 565  : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 566  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 567  : 
; 568  : 		_Nodeptr _Erasednode = _Where._Ptr;	// node to erase

  00015	89 55 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], edx

; 59   : 		if (_Ptr->_Right->_Isnil)

  00018	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0001c	74 1e		 je	 SHORT $LN51@Extract

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0001e	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00021	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00025	75 2c		 jne	 SHORT $LN165@Extract
$LL49@Extract:
  00027	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0002a	75 27		 jne	 SHORT $LN165@Extract

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0002c	8b c6		 mov	 eax, esi
  0002e	89 45 08	 mov	 DWORD PTR __Where$[ebp], eax
  00031	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00034	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00038	74 ed		 je	 SHORT $LL49@Extract

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

  0003a	eb 17		 jmp	 SHORT $LN165@Extract
$LN51@Extract:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0003c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00042	75 0c		 jne	 SHORT $LN56@Extract
$LL55@Extract:
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00046	8b f1		 mov	 esi, ecx
  00048	8b c8		 mov	 ecx, eax
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f4		 je	 SHORT $LL55@Extract
$LN56@Extract:
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN165@Extract:

; 569  : 		++_Where;	// save successor iterator for return
; 570  : 
; 571  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 572  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 573  : 		_Nodeptr _Pnode = _Erasednode;
; 574  : 
; 575  : 		if (_Pnode->_Left->_Isnil)

  00053	89 75 08	 mov	 DWORD PTR __Where$[ebp], esi
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	57		 push	 edi
  00059	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0005b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005f	75 15		 jne	 SHORT $LN158@Extract

; 576  : 			{
; 577  : 			_Fixnode = _Pnode->_Right;	// stitch up right subtree
; 578  : 			}
; 579  : 		else if (_Pnode->_Right->_Isnil)

  00061	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00065	74 04		 je	 SHORT $LN7@Extract

; 580  : 			{
; 581  : 			_Fixnode = _Pnode->_Left;	// stitch up left subtree

  00067	8b f8		 mov	 edi, eax

; 582  : 			}
; 583  : 		else

  00069	eb 0b		 jmp	 SHORT $LN158@Extract
$LN7@Extract:

; 584  : 			{	// two subtrees, must lift successor node to replace erased
; 585  : 			_Pnode = _Where._Ptr;	// _Pnode is successor node
; 586  : 			_Fixnode = _Pnode->_Right;	// _Fixnode is only subtree

  0006b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 587  : 			}
; 588  : 
; 589  : 		if (_Pnode == _Erasednode)

  0006e	3b f2		 cmp	 esi, edx
  00070	0f 85 8a 00 00
	00		 jne	 $LN9@Extract
$LN158@Extract:

; 590  : 			{	// at most one subtree, relink it
; 591  : 			_Fixnodeparent = _Erasednode->_Parent;
; 592  : 			if (!_Fixnode->_Isnil)

  00076	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0007a	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0007d	75 03		 jne	 SHORT $LN11@Extract

; 593  : 				_Fixnode->_Parent = _Fixnodeparent;	// link up

  0007f	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN11@Extract:

; 493  : 		return (_Myhead->_Parent);

  00082	8b 01		 mov	 eax, DWORD PTR [ecx]

; 594  : 
; 595  : 			if (_Root() == _Erasednode)

  00084	8b 75 f8	 mov	 esi, DWORD PTR __Erasednode$1$[ebp]
  00087	39 70 04	 cmp	 DWORD PTR [eax+4], esi
  0008a	75 05		 jne	 SHORT $LN12@Extract

; 596  : 				{
; 597  : 				_Root() = _Fixnode;	// link down from root

  0008c	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0008f	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 598  : 				}
; 599  : 			else if (_Fixnodeparent->_Left == _Erasednode)

  00091	39 32		 cmp	 DWORD PTR [edx], esi
  00093	75 04		 jne	 SHORT $LN14@Extract

; 600  : 				{
; 601  : 				_Fixnodeparent->_Left = _Fixnode;	// link down to left

  00095	89 3a		 mov	 DWORD PTR [edx], edi

; 602  : 				}
; 603  : 			else

  00097	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 604  : 				{
; 605  : 				_Fixnodeparent->_Right = _Fixnode;	// link down to right

  00099	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN15@Extract:

; 498  : 		return (_Myhead->_Left);

  0009c	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 606  : 				}
; 607  : 
; 608  : 			if (_Lmost() == _Erasednode)

  0009e	39 33		 cmp	 DWORD PTR [ebx], esi
  000a0	75 25		 jne	 SHORT $LN16@Extract

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  000a2	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000a6	74 04		 je	 SHORT $LN42@Extract
  000a8	8b f2		 mov	 esi, edx
  000aa	eb 19		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000ac	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  000ae	8b f7		 mov	 esi, edi

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000b0	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000b4	75 0c		 jne	 SHORT $LN66@Extract
$LL65@Extract:
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  000b8	8b f1		 mov	 esi, ecx
  000ba	8b c8		 mov	 ecx, eax
  000bc	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c0	74 f4		 je	 SHORT $LL65@Extract
$LN66@Extract:
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN43@Extract:

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  000c5	89 33		 mov	 DWORD PTR [ebx], esi
$LN16@Extract:

; 503  : 		return (_Myhead->_Right);

  000c7	8b 31		 mov	 esi, DWORD PTR [ecx]

; 611  : 					? _Fixnodeparent	// smallest is parent of erased node
; 612  : 					: _Min(_Fixnode);	// smallest in relinked subtree
; 613  : 				}
; 614  : 
; 615  : 			if (_Rmost() == _Erasednode)

  000c9	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
  000cc	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  000cf	0f 85 84 00 00
	00		 jne	 $LN83@Extract

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  000d5	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000d9	74 07		 je	 SHORT $LN44@Extract
  000db	8b ca		 mov	 ecx, edx
  000dd	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 618  : 					? _Fixnodeparent	// largest is parent of erased node
; 619  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 620  : 				}
; 621  : 			}
; 622  : 		else

  000e0	eb 74		 jmp	 SHORT $LN169@Extract
$LN44@Extract:

; 479  : 		while (!_Pnode->_Right->_Isnil)

  000e2	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  000e5	8b cf		 mov	 ecx, edi

; 479  : 		while (!_Pnode->_Right->_Isnil)

  000e7	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000eb	75 0e		 jne	 SHORT $LN74@Extract
  000ed	0f 1f 00	 npad	 3
$LL73@Extract:

; 480  : 			_Pnode = _Pnode->_Right;

  000f0	8b c8		 mov	 ecx, eax
  000f2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f9	74 f5		 je	 SHORT $LL73@Extract
$LN74@Extract:

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  000fb	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 618  : 					? _Fixnodeparent	// largest is parent of erased node
; 619  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 620  : 				}
; 621  : 			}
; 622  : 		else

  000fe	eb 56		 jmp	 SHORT $LN169@Extract
$LN9@Extract:

; 623  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 624  : 			_Erasednode->_Left->_Parent = _Pnode;	// link left up

  00100	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 625  : 			_Pnode->_Left = _Erasednode->_Left;	// link successor down

  00103	8b 02		 mov	 eax, DWORD PTR [edx]
  00105	89 06		 mov	 DWORD PTR [esi], eax

; 626  : 
; 627  : 			if (_Pnode == _Erasednode->_Right)

  00107	3b 33		 cmp	 esi, DWORD PTR [ebx]
  00109	75 04		 jne	 SHORT $LN18@Extract

; 628  : 				{
; 629  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  0010b	8b d6		 mov	 edx, esi

; 630  : 				}
; 631  : 			else

  0010d	eb 18		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 632  : 				{	// successor further down, link in place of erased
; 633  : 				_Fixnodeparent = _Pnode->_Parent;	// parent is successor's
; 634  : 				if (!_Fixnode->_Isnil)

  0010f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00113	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00116	75 03		 jne	 SHORT $LN20@Extract

; 635  : 					{
; 636  : 					_Fixnode->_Parent = _Fixnodeparent;	// link fix up

  00118	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN20@Extract:

; 637  : 					}
; 638  : 
; 639  : 				_Fixnodeparent->_Left = _Fixnode;	// link fix down

  0011b	89 3a		 mov	 DWORD PTR [edx], edi

; 640  : 				_Pnode->_Right = _Erasednode->_Right;	// link next down

  0011d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0011f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 641  : 				_Erasednode->_Right->_Parent = _Pnode;	// right up

  00122	8b 03		 mov	 eax, DWORD PTR [ebx]
  00124	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN19@Extract:

; 493  : 		return (_Myhead->_Parent);

  00127	8b 01		 mov	 eax, DWORD PTR [ecx]

; 642  : 				}
; 643  : 
; 644  : 			if (_Root() == _Erasednode)

  00129	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
  0012c	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0012f	75 05		 jne	 SHORT $LN21@Extract

; 645  : 				{
; 646  : 				_Root() = _Pnode;	// link down from root

  00131	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00134	eb 0e		 jmp	 SHORT $LN24@Extract
$LN21@Extract:

; 647  : 				}
; 648  : 			else if (_Erasednode->_Parent->_Left == _Erasednode)

  00136	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00139	39 18		 cmp	 DWORD PTR [eax], ebx
  0013b	75 04		 jne	 SHORT $LN23@Extract

; 649  : 				{
; 650  : 				_Erasednode->_Parent->_Left = _Pnode;	// link down to left

  0013d	89 30		 mov	 DWORD PTR [eax], esi

; 651  : 				}
; 652  : 			else

  0013f	eb 03		 jmp	 SHORT $LN24@Extract
$LN23@Extract:

; 653  : 				{
; 654  : 				_Erasednode->_Parent->_Right = _Pnode;	// link down to right

  00141	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN24@Extract:

; 655  : 				}
; 656  : 
; 657  : 			_Pnode->_Parent = _Erasednode->_Parent;	// link successor up

  00144	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00147	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 68   : 	_Left = _STD move(_Right);

  0014a	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  0014d	8a 4e 0c	 mov	 cl, BYTE PTR [esi+12]
  00150	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 69   : 	_Right = _STD move(_Tmp);

  00153	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl
$LN169@Extract:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 661  : 		if (_Erasednode->_Color == this->_Black)

  00156	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN83@Extract:
  00159	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  0015d	0f 85 68 01 00
	00		 jne	 $LN25@Extract

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()
; 664  : 				&& _Fixnode->_Color == this->_Black;

  00163	8b 01		 mov	 eax, DWORD PTR [ecx]
  00165	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00168	0f 84 59 01 00
	00		 je	 $LN3@Extract
  0016e	66 90		 npad	 2
$LL4@Extract:
  00170	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00174	8b da		 mov	 ebx, edx
  00176	0f 85 48 01 00
	00		 jne	 $LN168@Extract

; 666  : 				if (_Fixnode == _Fixnodeparent->_Left)

  0017c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0017e	3b f9		 cmp	 edi, ecx
  00180	0f 85 bb 00 00
	00		 jne	 $LN26@Extract

; 667  : 					{	// fixup left subtree
; 668  : 					_Pnode = _Fixnodeparent->_Right;

  00186	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 669  : 					if (_Pnode->_Color == this->_Red)

  00189	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0018d	75 46		 jne	 SHORT $LN159@Extract

; 670  : 						{	// rotate red up from right subtree
; 671  : 						_Pnode->_Color = this->_Black;

  0018f	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  00193	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 672  : 						_Fixnodeparent->_Color = this->_Red;

  00196	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0019a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0019c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  0019f	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001a5	75 03		 jne	 SHORT $LN93@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  001a7	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN93@Extract:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  001aa	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001ad	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  001b0	8b 45 fc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001b3	8b 00		 mov	 eax, DWORD PTR [eax]
  001b5	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  001b8	75 05		 jne	 SHORT $LN94@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  001ba	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  001bd	eb 0e		 jmp	 SHORT $LN97@Extract
$LN94@Extract:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  001bf	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c2	3b 10		 cmp	 edx, DWORD PTR [eax]
  001c4	75 04		 jne	 SHORT $LN96@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  001c6	89 08		 mov	 DWORD PTR [eax], ecx

; 525  : 			}
; 526  : 		else

  001c8	eb 03		 jmp	 SHORT $LN97@Extract
$LN96@Extract:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  001ca	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN97@Extract:

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  001cd	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  001cf	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 673  : 						_Lrotate(_Fixnodeparent);
; 674  : 						_Pnode = _Fixnodeparent->_Right;

  001d2	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
$LN159@Extract:

; 675  : 						}
; 676  : 
; 677  : 					if (_Pnode->_Isnil)

  001d5	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d9	0f 85 d2 00 00
	00		 jne	 $LN2@Extract

; 678  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 679  : 					else if (_Pnode->_Left->_Color == this->_Black
; 680  : 						&& _Pnode->_Right->_Color == this->_Black)

  001df	8b 31		 mov	 esi, DWORD PTR [ecx]
  001e1	80 7e 0c 01	 cmp	 BYTE PTR [esi+12], 1
  001e5	75 0d		 jne	 SHORT $LN161@Extract
  001e7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ea	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ee	0f 84 b9 00 00
	00		 je	 $LN170@Extract
$LN161@Extract:

; 681  : 						{	// redden right subtree with black children
; 682  : 						_Pnode->_Color = this->_Red;
; 683  : 						_Fixnode = _Fixnodeparent;
; 684  : 						}
; 685  : 					else
; 686  : 						{	// must rearrange right subtree
; 687  : 						if (_Pnode->_Right->_Color == this->_Black)

  001f4	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001f7	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001fb	0f 85 06 01 00
	00		 jne	 $LN166@Extract

; 688  : 							{	// rotate red up from left sub-subtree
; 689  : 							_Pnode->_Left->_Color = this->_Black;

  00201	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  00205	8b 31		 mov	 esi, DWORD PTR [ecx]

; 690  : 							_Pnode->_Color = this->_Red;

  00207	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  0020b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0020e	89 01		 mov	 DWORD PTR [ecx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  00210	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00213	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00217	75 03		 jne	 SHORT $LN100@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  00219	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN100@Extract:

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  0021c	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0021f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00222	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00225	8b 03		 mov	 eax, DWORD PTR [ebx]
  00227	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0022a	0f 85 b4 00 00
	00		 jne	 $LN101@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00230	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00233	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00236	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 691  : 							_Rrotate(_Pnode);
; 692  : 							_Pnode = _Fixnodeparent->_Right;

  00239	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0023c	e9 c9 00 00 00	 jmp	 $LN33@Extract
$LN26@Extract:

; 700  : 						}
; 701  : 					}
; 702  : 				else
; 703  : 					{	// fixup right subtree
; 704  : 					_Pnode = _Fixnodeparent->_Left;
; 705  : 					if (_Pnode->_Color == this->_Red)

  00241	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00245	75 47		 jne	 SHORT $LN160@Extract

; 706  : 						{	// rotate red up from left subtree
; 707  : 						_Pnode->_Color = this->_Black;

  00247	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  0024b	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 708  : 						_Fixnodeparent->_Color = this->_Red;

  0024d	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  00251	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00254	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  00256	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00259	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0025d	75 03		 jne	 SHORT $LN114@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  0025f	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN114@Extract:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  00262	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00265	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00268	8b 45 fc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0026b	8b 00		 mov	 eax, DWORD PTR [eax]
  0026d	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00270	75 05		 jne	 SHORT $LN115@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00272	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00275	eb 0f		 jmp	 SHORT $LN118@Extract
$LN115@Extract:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00277	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0027a	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0027d	75 05		 jne	 SHORT $LN117@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0027f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 551  : 			}
; 552  : 		else

  00282	eb 02		 jmp	 SHORT $LN118@Extract
$LN117@Extract:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  00284	89 08		 mov	 DWORD PTR [eax], ecx
$LN118@Extract:

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00286	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00289	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 709  : 						_Rrotate(_Fixnodeparent);
; 710  : 						_Pnode = _Fixnodeparent->_Left;

  0028c	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN160@Extract:

; 711  : 						}
; 712  : 
; 713  : 					if (_Pnode->_Isnil)

  0028e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00292	75 1d		 jne	 SHORT $LN2@Extract

; 714  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 715  : 					else if (_Pnode->_Right->_Color == this->_Black
; 716  : 						&& _Pnode->_Left->_Color == this->_Black)

  00294	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00297	80 7e 0c 01	 cmp	 BYTE PTR [esi+12], 1
  0029b	0f 85 d0 00 00
	00		 jne	 $LN162@Extract
  002a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  002a3	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002a7	0f 85 c4 00 00
	00		 jne	 $LN162@Extract
$LN170@Extract:

; 665  : 				_Fixnodeparent = _Fixnode->_Parent)

  002ad	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()
; 664  : 				&& _Fixnode->_Color == this->_Black;

  002b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002b4	8b fb		 mov	 edi, ebx

; 665  : 				_Fixnodeparent = _Fixnode->_Parent)

  002b6	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  002b9	8b 01		 mov	 eax, DWORD PTR [ecx]
  002bb	3b 58 04	 cmp	 ebx, DWORD PTR [eax+4]
  002be	0f 85 ac fe ff
	ff		 jne	 $LL4@Extract
$LN168@Extract:

; 734  : 						_Rrotate(_Fixnodeparent);
; 735  : 						break;	// tree now recolored/rebalanced
; 736  : 						}
; 737  : 					}
; 738  : 
; 739  : 			_Fixnode->_Color = this->_Black;	// stopping node is black

  002c4	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
$LN3@Extract:
  002c7	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 740  : 			}
; 741  : 
; 742  : 		if (0 < _Mysize)

  002cb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  002ce	5f		 pop	 edi
  002cf	85 c9		 test	 ecx, ecx
  002d1	74 07		 je	 SHORT $LN164@Extract

; 743  : 			--_Mysize;

  002d3	8b 45 fc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  002d6	49		 dec	 ecx
  002d7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN164@Extract:

; 744  : 
; 745  : 		return (_Erasednode);
; 746  : 		}

  002da	5e		 pop	 esi
  002db	8b c3		 mov	 eax, ebx
  002dd	5b		 pop	 ebx
  002de	8b e5		 mov	 esp, ebp
  002e0	5d		 pop	 ebp
  002e1	c2 04 00	 ret	 4
$LN101@Extract:

; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  002e4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002e7	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  002ea	75 0e		 jne	 SHORT $LN103@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  002ec	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  002ef	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  002f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 691  : 							_Rrotate(_Pnode);
; 692  : 							_Pnode = _Fixnodeparent->_Right;

  002f5	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  002f8	eb 10		 jmp	 SHORT $LN33@Extract
$LN103@Extract:

; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  002fa	89 30		 mov	 DWORD PTR [eax], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  002fc	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  002ff	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 691  : 							_Rrotate(_Pnode);
; 692  : 							_Pnode = _Fixnodeparent->_Right;

  00302	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00305	eb 03		 jmp	 SHORT $LN33@Extract
$LN166@Extract:

; 681  : 						{	// redden right subtree with black children
; 682  : 						_Pnode->_Color = this->_Red;
; 683  : 						_Fixnode = _Fixnodeparent;
; 684  : 						}
; 685  : 					else
; 686  : 						{	// must rearrange right subtree
; 687  : 						if (_Pnode->_Right->_Color == this->_Black)

  00307	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN33@Extract:

; 693  : 							}
; 694  : 
; 695  : 						_Pnode->_Color = _Fixnodeparent->_Color;

  0030a	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  0030d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 696  : 						_Fixnodeparent->_Color = this->_Black;

  00310	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 697  : 						_Pnode->_Right->_Color = this->_Black;

  00314	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00317	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  0031b	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0031e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00320	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  00323	8b 01		 mov	 eax, DWORD PTR [ecx]
  00325	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00329	75 03		 jne	 SHORT $LN107@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  0032b	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN107@Extract:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0032e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00331	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00334	8b 03		 mov	 eax, DWORD PTR [ebx]
  00336	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00339	75 10		 jne	 SHORT $LN108@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  0033b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  0033e	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  00340	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 698  : 						_Lrotate(_Fixnodeparent);
; 699  : 						break;	// tree now recolored/rebalanced

  00343	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00346	e9 79 ff ff ff	 jmp	 $LN168@Extract
$LN108@Extract:

; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  0034b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0034e	3b 10		 cmp	 edx, DWORD PTR [eax]
  00350	75 0f		 jne	 SHORT $LN110@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  00352	89 08		 mov	 DWORD PTR [eax], ecx

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  00354	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  00356	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 698  : 						_Lrotate(_Fixnodeparent);
; 699  : 						break;	// tree now recolored/rebalanced

  00359	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0035c	e9 63 ff ff ff	 jmp	 $LN168@Extract
$LN110@Extract:

; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  00361	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  00364	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  00366	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 698  : 						_Lrotate(_Fixnodeparent);
; 699  : 						break;	// tree now recolored/rebalanced

  00369	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0036c	e9 53 ff ff ff	 jmp	 $LN168@Extract
$LN162@Extract:

; 717  : 						{	// redden left subtree with black children
; 718  : 						_Pnode->_Color = this->_Red;
; 719  : 						_Fixnode = _Fixnodeparent;
; 720  : 						}
; 721  : 					else
; 722  : 						{	// must rearrange left subtree
; 723  : 						if (_Pnode->_Left->_Color == this->_Black)

  00371	8b 01		 mov	 eax, DWORD PTR [ecx]
  00373	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00377	75 55		 jne	 SHORT $LN167@Extract

; 724  : 							{	// rotate red up from right sub-subtree
; 725  : 							_Pnode->_Right->_Color = this->_Black;

  00379	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  0037d	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 726  : 							_Pnode->_Color = this->_Red;

  00380	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  00384	8b 06		 mov	 eax, DWORD PTR [esi]
  00386	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  00389	8b 06		 mov	 eax, DWORD PTR [esi]
  0038b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0038f	75 03		 jne	 SHORT $LN121@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  00391	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN121@Extract:

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00394	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00397	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0039a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0039d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0039f	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  003a2	75 0c		 jne	 SHORT $LN122@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  003a4	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  003a7	89 0e		 mov	 DWORD PTR [esi], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  003a9	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 727  : 							_Lrotate(_Pnode);
; 728  : 							_Pnode = _Fixnodeparent->_Left;

  003ac	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003ae	eb 21		 jmp	 SHORT $LN39@Extract
$LN122@Extract:

; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  003b0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  003b3	3b 08		 cmp	 ecx, DWORD PTR [eax]
  003b5	75 0b		 jne	 SHORT $LN124@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  003b7	89 30		 mov	 DWORD PTR [eax], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  003b9	89 0e		 mov	 DWORD PTR [esi], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  003bb	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 727  : 							_Lrotate(_Pnode);
; 728  : 							_Pnode = _Fixnodeparent->_Left;

  003be	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003c0	eb 0f		 jmp	 SHORT $LN39@Extract
$LN124@Extract:

; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  003c2	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  003c5	89 0e		 mov	 DWORD PTR [esi], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  003c7	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 727  : 							_Lrotate(_Pnode);
; 728  : 							_Pnode = _Fixnodeparent->_Left;

  003ca	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003cc	eb 03		 jmp	 SHORT $LN39@Extract
$LN167@Extract:

; 717  : 						{	// redden left subtree with black children
; 718  : 						_Pnode->_Color = this->_Red;
; 719  : 						_Fixnode = _Fixnodeparent;
; 720  : 						}
; 721  : 					else
; 722  : 						{	// must rearrange left subtree
; 723  : 						if (_Pnode->_Left->_Color == this->_Black)

  003ce	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN39@Extract:

; 729  : 							}
; 730  : 
; 731  : 						_Pnode->_Color = _Fixnodeparent->_Color;

  003d1	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  003d4	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 732  : 						_Fixnodeparent->_Color = this->_Black;

  003d7	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 733  : 						_Pnode->_Left->_Color = this->_Black;

  003db	8b 01		 mov	 eax, DWORD PTR [ecx]
  003dd	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  003e1	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  003e3	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  003e6	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  003e8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  003eb	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  003ef	75 03		 jne	 SHORT $LN128@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  003f1	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN128@Extract:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  003f4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  003f7	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  003fa	8b 03		 mov	 eax, DWORD PTR [ebx]
  003fc	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  003ff	75 11		 jne	 SHORT $LN129@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00401	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00404	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00407	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0040a	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0040d	e9 b2 fe ff ff	 jmp	 $LN168@Extract
$LN129@Extract:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00412	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00415	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00418	75 11		 jne	 SHORT $LN131@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0041a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  0041d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00420	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00423	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00426	e9 99 fe ff ff	 jmp	 $LN168@Extract
$LN131@Extract:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  0042b	89 08		 mov	 DWORD PTR [eax], ecx

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  0042d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00430	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00433	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00436	e9 89 fe ff ff	 jmp	 $LN168@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Rmost, COMDAT
; _this$ = ecx

; 503  : 		return (_Myhead->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 504  : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Root, COMDAT
; _this$ = ecx

; 493  : 		return (_Myhead->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 494  : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00000	6a 20		 push	 32			; 00000020H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000a	89 00		 mov	 DWORD PTR [eax], eax
  0000c	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0000f	89 40 08	 mov	 DWORD PTR [eax+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 940  : 		_Pnode->_Color = _Black;

  00012	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 941  : 		_Pnode->_Isnil = true;
; 942  : 		return (_Pnode);
; 943  : 		}

  00018	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Erase, COMDAT
; _this$ = ecx

; 2019 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00009	8b d9		 mov	 ebx, ecx

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0000b	8b f7		 mov	 esi, edi
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 27		 jne	 SHORT $LN3@Erase
$LL4@Erase:

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Erase

; 2023 : 			_Pnode = _Pnode->_Left;

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 2024 : 			_Alnode& _Al = this->_Getal();
; 2025 : 			_Alnode_traits::destroy(_Al, _STD addressof(_Rootnode->_Myval));

  0001f	8d 4f 14	 lea	 ecx, DWORD PTR [edi+20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 894  : 		_Tidy();

  00022	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00027	6a 20		 push	 32			; 00000020H
  00029	57		 push	 edi
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00032	8b fe		 mov	 edi, esi
  00034	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00038	74 d9		 je	 SHORT $LL4@Erase
$LN3@Erase:
  0003a	5f		 pop	 edi

; 2026 : 			_Node::_Freenode0(_Al, _Rootnode);
; 2027 : 			}
; 2028 : 		}

  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Rrotate, COMDAT
; _this$ = ecx

; 536  : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 551  : 			}
; 552  : 		else
; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Lrotate, COMDAT
; _this$ = ecx

; 507  : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 525  : 			}
; 526  : 		else
; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Max, COMDAT
; __Pnode$ = ecx

; 479  : 		while (!_Pnode->_Right->_Isnil)

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00007	75 12		 jne	 SHORT $LN9@Max
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Max:

; 480  : 			_Pnode = _Pnode->_Right;

  00010	8b c8		 mov	 ecx, eax
  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN9@Max:

; 481  : 		return (_Pnode);
; 482  : 		}

  0001b	8b c1		 mov	 eax, ecx
  0001d	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >::allocate, COMDAT
; _this$dead$ = ecx

; 52   : 		return (::operator new(_Bytes));

  00000	6a 20		 push	 32			; 00000020H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0000a	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  00006	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00009	c1 e1 05	 shl	 ecx, 5

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000c	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00012	72 12		 jb	 SHORT $LN15@deallocate

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00014	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00017	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001a	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001c	83 c0 fc	 add	 eax, -4			; fffffffcH
  0001f	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00022	77 10		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00024	8b c2		 mov	 eax, edx
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00026	51		 push	 ecx
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002d	83 c4 08	 add	 esp, 8

; 993  : 		}

  00030	5d		 pop	 ebp
  00031	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003a	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T23 = 8						; size = 1
__Right$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >, COMDAT
; _this$ = ecx

; 1097 : 		{	// construct tree by copying _Right, allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 468  : 		: _Myhead(),

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00036	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  0003d	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
  00042	89 06		 mov	 DWORD PTR [esi], eax

; 809  : 		}
; 810  : 
; 811  : 	~_Tree_comp_alloc() noexcept
; 812  : 		{	// destroy head node
; 813  : 		_Freeheadnode(_Get_data()._Myhead);
; 814  : 		}
; 815  : 
; 816  : 	void _Alloc_proxy()
; 817  : 		{	// do nothing
; 818  : 		}
; 819  : 
; 820  : 	void _Free_proxy()
; 821  : 		{	// do nothing
; 822  : 		}
; 823  : 
; 824  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 825  : 	void _Construct()
; 826  : 		{	// construct head node, proxy
; 827  : 		auto& _My_data = _Get_data();
; 828  : 		_My_data._Myhead = _Buyheadnode();
; 829  : 		_TRY_BEGIN
; 830  : 		_Alloc_proxy();
; 831  : 		_CATCH_ALL
; 832  : 		_Freeheadnode(_My_data._Myhead);
; 833  : 		_RERAISE;
; 834  : 		_CATCH_END
; 835  : 		}
; 836  : 
; 837  : 	~_Tree_comp_alloc() noexcept
; 838  : 		{	// destroy head node, proxy
; 839  : 		_Freeheadnode(_Get_data()._Myhead);
; 840  : 		_Free_proxy();
; 841  : 		}
; 842  : 
; 843  : 	void _Alloc_proxy()
; 844  : 		{	// construct proxy
; 845  : 		_Alproxy _Proxy_allocator(_Getal());
; 846  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));
; 847  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());
; 848  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());
; 849  : 		}
; 850  : 
; 851  : 	void _Free_proxy()
; 852  : 		{	// destroy proxy
; 853  : 		_Alproxy _Proxy_allocator(_Getal());
; 854  : 		_Orphan_all();
; 855  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());
; 856  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());
; 857  : 		_Myproxy() = nullptr;
; 858  : 		}
; 859  : 
; 860  : 	_Iterator_base12 **_Getpfirst() const
; 861  : 		{	// get address of iterator chain
; 862  : 		return (_Get_data()._Getpfirst());
; 863  : 		}
; 864  : 
; 865  : 	_Container_proxy * & _Myproxy() noexcept
; 866  : 		{	// return reference to _Myproxy
; 867  : 		return (_Get_data()._Myproxy);
; 868  : 		}
; 869  : 
; 870  : 	_Container_proxy * const & _Myproxy() const noexcept
; 871  : 		{	// return const reference to _Myproxy
; 872  : 		return (_Get_data()._Myproxy);
; 873  : 		}
; 874  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 875  : 
; 876  : 	void _Copy_alloc(const _Alnode& _Al)
; 877  : 		{	// replace old allocator
; 878  : 		const bool _Reload = _Alnode_traits::propagate_on_container_copy_assignment::value
; 879  : 			&& _Getal() != _Al;
; 880  : 
; 881  : 		if (_Reload)
; 882  : 			{
; 883  : 			_Free_proxy();
; 884  : 			_Freeheadnode(_Get_data()._Myhead);
; 885  : 			}
; 886  : 
; 887  : 		_Pocca(_Getal(), _Al);
; 888  : 
; 889  : 		if (_Reload)
; 890  : 			{
; 891  : 			_Get_data()._Myhead = _Buyheadnode();
; 892  : 			_Alloc_proxy();
; 893  : 			}
; 894  : 		}
; 895  : 
; 896  : 	void _Move_alloc(_Alnode& _Al)
; 897  : 		{	// replace old allocator
; 898  : 		const bool _Reload = _Alnode_traits::propagate_on_container_move_assignment::value
; 899  : 			&& _Getal() != _Al;
; 900  : 
; 901  : 		if (_Reload)
; 902  : 			{
; 903  : 			_Free_proxy();
; 904  : 			_Freeheadnode(_Get_data()._Myhead);
; 905  : 			}
; 906  : 
; 907  : 		_Pocma(_Getal(), _Al);
; 908  : 
; 909  : 		if (_Reload)
; 910  : 			{
; 911  : 			_Get_data()._Myhead = _Buyheadnode();
; 912  : 			_Alloc_proxy();
; 913  : 			}
; 914  : 		}
; 915  : 
; 916  : 	void _Orphan_all()
; 917  : 		{	// orphan all iterators
; 918  : 		_Get_data()._Orphan_all();
; 919  : 		}
; 920  : 
; 921  : 	void _Swap_all(_Tree_comp_alloc& _Right)
; 922  : 		{	// swap all iterators
; 923  : 		_Get_data()._Swap_all(_Right._Get_data());
; 924  : 		}
; 925  : 
; 926  : 	_Nodeptr _Buyheadnode()
; 927  : 		{	// get head node using current allocator
; 928  : 		_Alnode& _Al = _Getal();
; 929  : 		_Nodeptr _Pnode = _Al.allocate(1);
; 930  : 
; 931  : 		_TRY_BEGIN
; 932  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Left), _Pnode);
; 933  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _Pnode);
; 934  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _Pnode);
; 935  : 		_CATCH_ALL
; 936  : 		_Al.deallocate(_Pnode, 1);
; 937  : 		_RERAISE;
; 938  : 		_CATCH_END
; 939  : 
; 940  : 		_Pnode->_Color = _Black;
; 941  : 		_Pnode->_Isnil = true;
; 942  : 		return (_Pnode);
; 943  : 		}
; 944  : 
; 945  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 946  : 		{	// free head node using current allocator
; 947  : 		_Node::_Freenode0(_Getal(), _Pnode);
; 948  : 		}
; 949  : 
; 950  : 	_Nodeptr _Buynode0()
; 951  : 		{	// allocate a non-value node
; 952  : 		_Alnode& _Al = _Getal();
; 953  : 		_Nodeptr _Pnode = _Al.allocate(1);
; 954  : 
; 955  : 		auto& _My_data = _Get_data();
; 956  : 
; 957  : 		_TRY_BEGIN
; 958  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Left), _My_data._Myhead);
; 959  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _My_data._Myhead);
; 960  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _My_data._Myhead);
; 961  : 		_CATCH_ALL
; 962  : 		_Al.deallocate(_Pnode, 1);
; 963  : 		_RERAISE;
; 964  : 		_CATCH_END
; 965  : 
; 966  : 		return (_Pnode);
; 967  : 		}
; 968  : 
; 969  : 	void _Freenode0(_Nodeptr _Pnode)
; 970  : 		{	// free non-value node using current allocator
; 971  : 		_Node::_Freenode0(_Getal(), _Pnode);
; 972  : 		}
; 973  : 
; 974  : 	template<class... _Valty>
; 975  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 976  : 		{	// allocate a node with defaults and set links and value
; 977  : 		_Nodeptr _Pnode = _Buynode0();
; 978  : 
; 979  : 		_Pnode->_Color = _Red;
; 980  : 		_Pnode->_Isnil = false;
; 981  : 
; 982  : 		_TRY_BEGIN
; 983  : 		_Alnode_traits::construct(_Getal(),
; 984  : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 985  : 		_CATCH_ALL
; 986  : 		_Freenode0(_Pnode);
; 987  : 		_RERAISE;
; 988  : 		_CATCH_END
; 989  : 
; 990  : 		return (_Pnode);
; 991  : 		}
; 992  : 
; 993  : 	key_compare& _Getcomp() noexcept
; 994  : 		{	// return reference to ordering predicate
; 995  : 		return (_Mypair._Get_first());
; 996  : 		}
; 997  : 
; 998  : 	const key_compare& _Getcomp() const noexcept
; 999  : 		{	// return const reference to ordering predicate
; 1000 : 		return (_Mypair._Get_first());
; 1001 : 		}
; 1002 : 
; 1003 : 	_Alnode& _Getal() noexcept
; 1004 : 		{	// return reference to allocator
; 1005 : 		return (_Mypair._Get_second()._Get_first());
; 1006 : 		}
; 1007 : 
; 1008 : 	const _Alnode& _Getal() const noexcept
; 1009 : 		{	// return const reference to allocator
; 1010 : 		return (_Mypair._Get_second()._Get_first());
; 1011 : 		}
; 1012 : 
; 1013 : 	_Tree_val<_Val_types>& _Get_data() noexcept
; 1014 : 		{	// return reference to _Tree_val
; 1015 : 		return (_Mypair._Get_second()._Get_second());
; 1016 : 		}
; 1017 : 
; 1018 : 	const _Tree_val<_Val_types>& _Get_data() const noexcept
; 1019 : 		{	// return const reference to _Tree_val
; 1020 : 		return (_Mypair._Get_second()._Get_second());
; 1021 : 		}
; 1022 : 
; 1023 : private:
; 1024 : 	_Compressed_pair<key_compare,
; 1025 : 		_Compressed_pair<_Alnode, _Tree_val<_Val_types>>> _Mypair;
; 1026 : 	};
; 1027 : 
; 1028 : 		// CLASS TEMPLATE _Tree
; 1029 : template<class _Traits>
; 1030 : 	class _Tree
; 1031 : 		: public _Tree_comp_alloc<_Traits>
; 1032 : 	{	// ordered red-black tree for map/multimap/set/multiset
; 1033 : public:
; 1034 : 	using _Mybase = _Tree_comp_alloc<_Traits>;
; 1035 : 
; 1036 : 	using key_type = typename _Traits::key_type;
; 1037 : 	using value_compare = typename _Traits::value_compare;
; 1038 : 	enum
; 1039 : 		{	// get multi parameter
; 1040 : 		_Multi = _Traits::_Multi};
; 1041 : 
; 1042 : 	using _Node = typename _Mybase::_Node;
; 1043 : 	using _Nodeptr = typename _Mybase::_Nodeptr;
; 1044 : 	using _Alnode = typename _Mybase::_Alnode;
; 1045 : 	using _Alnode_traits = typename _Mybase::_Alnode_traits;
; 1046 : 
; 1047 : 	using key_compare = typename _Mybase::key_compare;
; 1048 : 	using allocator_type = typename _Mybase::allocator_type;
; 1049 : 
; 1050 : 	using value_type = typename _Mybase::value_type;
; 1051 : 	using size_type = typename _Mybase::size_type;
; 1052 : 	using difference_type = typename _Mybase::difference_type;
; 1053 : 	using pointer = typename _Mybase::pointer;
; 1054 : 	using const_pointer = typename _Mybase::const_pointer;
; 1055 : 	using reference = value_type&;
; 1056 : 	using const_reference = const value_type&;
; 1057 : 
; 1058 : 	using iterator = conditional_t<is_same_v<key_type, value_type>,
; 1059 : 		typename _Mybase::const_iterator,
; 1060 : 		typename _Mybase::iterator>;
; 1061 : 	using const_iterator = typename _Mybase::const_iterator;
; 1062 : 	using _Unchecked_iterator = conditional_t<is_same_v<key_type, value_type>,
; 1063 : 		typename _Mybase::_Unchecked_const_iterator,
; 1064 : 		typename _Mybase::_Unchecked_iterator>;
; 1065 : 	using _Unchecked_const_iterator = typename _Mybase::_Unchecked_const_iterator;
; 1066 : 
; 1067 : 	using reverse_iterator = _STD reverse_iterator<iterator>;
; 1068 : 	using const_reverse_iterator = _STD reverse_iterator<const_iterator>;
; 1069 : 
; 1070 : 	using _Pairib = pair<iterator, bool>;
; 1071 : 	using _Pairii = pair<iterator, iterator>;
; 1072 : 	using _Paircc = pair<const_iterator, const_iterator>;
; 1073 : 
; 1074 : 	using _Mytreeval = _Tree_val<typename _Mybase::_Val_types>;
; 1075 : 
; 1076 : 	struct _Copy_tag
; 1077 : 		{	// signals copying
; 1078 : 		};
; 1079 : 	struct _Move_tag
; 1080 : 		{	// signals moving
; 1081 : 		};
; 1082 : 
; 1083 : 	_Tree(const key_compare& _Parg)
; 1084 : 		: _Mybase(_Parg)
; 1085 : 		{	// construct empty tree from comparator
; 1086 : 		}
; 1087 : 
; 1088 : 	_Tree(const key_compare& _Parg,
; 1089 : 		const allocator_type& _Al)
; 1090 : 		: _Mybase(_Parg, _Al)
; 1091 : 		{	// construct empty tree from comparator, allocator
; 1092 : 		}
; 1093 : 
; 1094 : 	template<class _Any_alloc>
; 1095 : 		_Tree(const _Tree& _Right, _Any_alloc&& _Al)
; 1096 : 		: _Mybase(_Right.key_comp(), _STD forward<_Any_alloc>(_Al))

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1098 : 		_TRY_BEGIN

  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 1899 : 		_My_data._Root() = _Copy_nodes(_Right._Get_data()._Root(), _My_data._Myhead, _Movefl);

  0004f	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00052	ff 75 08	 push	 DWORD PTR $T23[ebp]
  00055	50		 push	 eax
  00056	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00058	ff 71 04	 push	 DWORD PTR [ecx+4]
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>
  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1900 : 		_My_data._Mysize = _Right.size();

  00067	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 493  : 		return (_Myhead->_Parent);

  0006a	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1900 : 		_My_data._Mysize = _Right.size();

  0006c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1901 : 		if (!_My_data._Root()->_Isnil)

  0006f	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00072	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00076	75 38		 jne	 SHORT $LN44@ImportInfo

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00078	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0007a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007e	75 0c		 jne	 SHORT $LN77@ImportInfo
$LL76@ImportInfo:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL76@ImportInfo
$LN77@ImportInfo:

; 1903 : 			_My_data._Lmost() = _Mytreeval::_Min(_My_data._Root());

  0008c	89 17		 mov	 DWORD PTR [edi], edx

; 493  : 		return (_Myhead->_Parent);

  0008e	8b 16		 mov	 edx, DWORD PTR [esi]

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

  00090	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 479  : 		while (!_Pnode->_Right->_Isnil)

  00093	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00096	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0009a	75 0f		 jne	 SHORT $LN85@ImportInfo
  0009c	0f 1f 40 00	 npad	 4
$LL84@ImportInfo:

; 480  : 			_Pnode = _Pnode->_Right;

  000a0	8b c8		 mov	 ecx, eax
  000a2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000a5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000a9	74 f5		 je	 SHORT $LL84@ImportInfo
$LN85@ImportInfo:

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

  000ab	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1905 : 			}
; 1906 : 		else

  000ae	eb 07		 jmp	 SHORT $LN45@ImportInfo
$LN44@ImportInfo:

; 1907 : 			{	// empty tree, just tidy head pointers
; 1908 : 			_My_data._Lmost() = _My_data._Myhead;

  000b0	89 3f		 mov	 DWORD PTR [edi], edi

; 503  : 		return (_Myhead->_Right);

  000b2	8b 06		 mov	 eax, DWORD PTR [esi]

; 1909 : 			_My_data._Rmost() = _My_data._Myhead;

  000b4	89 40 08	 mov	 DWORD PTR [eax+8], eax
$LN45@ImportInfo:

; 1103 : 		_CATCH_END
; 1104 : 		}

  000b7	8b c6		 mov	 eax, esi
  000b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c3	59		 pop	 ecx
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
__catch$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z$0:

; 1099 : 		_Copy(_Right, _Copy_tag());
; 1100 : 		_CATCH_ALL
; 1101 : 		_Tidy();

  000cd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tidy

; 1102 : 		_RERAISE;

  000d5	6a 00		 push	 0
  000d7	6a 00		 push	 0
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN102@ImportInfo:
  000de	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::~_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >
__ehhandler$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@K@std@@X@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAV?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$?0V?$allocator@K@std@@X@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAV?$allocator@K@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > ><std::allocator<unsigned long>,void>, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 431  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 431  : 		}

  00016	c2 04 00	 ret	 4
??$?0V?$allocator@K@std@@X@?$_Vector_alloc@U?$_Vec_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAV?$allocator@K@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > >::_Vector_alloc<std::_Vec_base_types<unsigned long,std::allocator<unsigned long> > ><std::allocator<unsigned long>,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z
_TEXT	SEGMENT
$T6 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z PROC ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>, COMDAT
; _this$dead$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 214  : 	_Seek_wrapped(_Dest,

  0000f	51		 push	 ecx
  00010	8d 4d ff	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_copy_cat<unsigned long,unsigned long>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	2b fa		 sub	 edi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0001a	57		 push	 edi
  0001b	52		 push	 edx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1824 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@AAEPAKPAK00@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$_Max_value@PAD@std@@YAABQADABQAD0@Z
_TEXT	SEGMENT
??$_Max_value@PAD@std@@YAABQADABQAD0@Z PROC		; std::_Max_value<char *>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 33   : 	return (_Left < _Right ? _Right : _Left);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	3b 02		 cmp	 eax, DWORD PTR [edx]
  00004	0f 42 ca	 cmovb	 ecx, edx
  00007	8b c1		 mov	 eax, ecx

; 34   : 	}

  00009	c3		 ret	 0
??$_Max_value@PAD@std@@YAABQADABQAD0@Z ENDP		; std::_Max_value<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00000	6a 20		 push	 32			; 00000020H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 415  : 			}

  0000b	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
;	COMDAT ??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>, COMDAT
; _this$ = ecx

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0

; 1919 : 		}

  00007	8b c1		 mov	 eax, ecx

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0

; 1919 : 		}

  00010	c2 04 00	 ret	 4
??$?0ABV?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::allocator<char> const &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@YAPAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@YAPAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@0@AAU10@@Z PROC ; std::addressof<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@YAPAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
??$destroy@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::destroy<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 886  : 		{	// destroy object at _Ptr

  00000	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 894  : 		_Tidy();

  00003	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
??$destroy@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::destroy<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
;	COMDAT ??$swap@DX@std@@YAXAAD0@Z
_TEXT	SEGMENT
??$swap@DX@std@@YAXAAD0@Z PROC				; std::swap<char,void>, COMDAT
; __Left$ = ecx
; __Right$ = edx

; 67   : 	_Ty _Tmp = _STD move(_Left);
; 68   : 	_Left = _STD move(_Right);

  00000	8a 02		 mov	 al, BYTE PTR [edx]
  00002	53		 push	 ebx
  00003	8a 19		 mov	 bl, BYTE PTR [ecx]
  00005	88 01		 mov	 BYTE PTR [ecx], al

; 69   : 	_Right = _STD move(_Tmp);

  00007	88 1a		 mov	 BYTE PTR [edx], bl
  00009	5b		 pop	 ebx

; 70   : 	}

  0000a	c3		 ret	 0
??$swap@DX@std@@YAXAAD0@Z ENDP				; std::swap<char,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$addressof@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> *>, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::construct<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> *,std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> * &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAPAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::construct<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> *,std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0CA@@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$0CA@@std@@YAII@Z PROC		; std::_Get_size_of_n<32>, COMDAT
; __Count$dead$ = ecx

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;
; 26   : 	if (_Max_possible < _Count)
; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);

  00000	b8 20 00 00 00	 mov	 eax, 32			; 00000020H

; 33   : 	}

  00005	c3		 ret	 0
??$_Get_size_of_n@$0CA@@std@@YAII@Z ENDP		; std::_Get_size_of_n<32>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??_G?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_G?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEPAXI@Z PROC ; std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx

; 894  : 		_Tidy();

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00006	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
  0000b	8b c6		 mov	 eax, esi
  0000d	5e		 pop	 esi
  0000e	c2 04 00	 ret	 4
??_G?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEPAXI@Z ENDP ; std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@XZ PROC ; std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::~pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >, COMDAT
; _this$ = ecx
  00000	83 c1 04	 add	 ecx, 4

; 894  : 		_Tidy();

  00003	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
??1?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@XZ ENDP ; std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::~pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::deallocate, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 871  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 	::operator delete(_Ptr, _Bytes);

  00003	6a 20		 push	 32			; 00000020H
  00005	52		 push	 edx
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
; 874  : 		}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?key_comp@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AU?$less@PBD@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?key_comp@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AU?$less@PBD@2@XZ PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::key_comp, COMDAT
; _this$dead$ = ecx

; 1289 : 		{	// return object for comparing keys

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1290 : 		return (this->_Getcomp());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1291 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?key_comp@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBE?AU?$less@PBD@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::key_comp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::~vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; _this$ = ecx

; 894  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
??1?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::~vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@PBD@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@PBD@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1000 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1001 : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABU?$less@PBD@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
_this$GSCopy$1$ = -8					; size = 4
?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	8b d9		 mov	 ebx, ecx
  00009	56		 push	 esi
  0000a	89 5d f8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ebx

; 1911 : 		this->_Orphan_all();
; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

  0000d	8b 33		 mov	 esi, DWORD PTR [ebx]
  0000f	85 f6		 test	 esi, esi
  00011	0f 84 7e 00 00
	00		 je	 $LN2@Tidy

; 1914 : 			{	// destroy and deallocate old array
; 1915 : 			_Destroy(this->_Myfirst(), this->_Mylast());

  00017	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 1134 : 	for (; _First != _Last; ++_First)

  0001a	3b f0		 cmp	 esi, eax
  0001c	74 25		 je	 SHORT $LN40@Tidy
  0001e	8b d8		 mov	 ebx, eax
  00020	57		 push	 edi
$LL41@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1168 : 		_Tidy();

  00021	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00024	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00029	6a 18		 push	 24			; 00000018H
  0002b	ff 76 04	 push	 DWORD PTR [esi+4]
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 1134 : 	for (; _First != _Last; ++_First)

  00033	83 c6 0c	 add	 esi, 12			; 0000000cH

; 207  : 	::operator delete(_Ptr, _Bytes);

  00036	83 c4 08	 add	 esp, 8

; 1134 : 	for (; _First != _Last; ++_First)

  00039	3b f3		 cmp	 esi, ebx
  0003b	75 e4		 jne	 SHORT $LL41@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0003d	8b 5d f8	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00040	5f		 pop	 edi
  00041	8b 33		 mov	 esi, DWORD PTR [ebx]
$LN40@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00043	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00046	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004b	2b ce		 sub	 ecx, esi
  0004d	f7 e9		 imul	 ecx
  0004f	d1 fa		 sar	 edx, 1
  00051	8b c2		 mov	 eax, edx
  00053	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00056	03 c2		 add	 eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00058	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0005b	c1 e0 02	 shl	 eax, 2

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0005e	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00063	72 12		 jb	 SHORT $LN156@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00065	8b 4e fc	 mov	 ecx, DWORD PTR [esi-4]
  00068	83 c0 23	 add	 eax, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006b	2b f1		 sub	 esi, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006d	83 c6 fc	 add	 esi, -4			; fffffffcH
  00070	83 fe 1f	 cmp	 esi, 31			; 0000001fH
  00073	77 26		 ja	 SHORT $LN153@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00075	8b f1		 mov	 esi, ecx
$LN156@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00077	50		 push	 eax
  00078	56		 push	 esi
  00079	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  0007e	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00084	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  00087	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 1920 : 			this->_Myend() = pointer();

  0008e	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
$LN2@Tidy:

; 1922 : 		}

  00095	5e		 pop	 esi
  00096	5b		 pop	 ebx
  00097	8b e5		 mov	 esp, ebp
  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN153@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN181@Tidy:
  000a1	cc		 int	 3
?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 596  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 597  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Mylast, COMDAT
; _this$ = ecx

; 586  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 587  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myfirst, COMDAT
; _this$ = ecx

; 576  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 577  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAPAUImportInfo@SegmentHeader@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAV?$allocator@UImportInfo@SegmentHeader@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAV?$allocator@UImportInfo@SegmentHeader@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 545  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 546  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAV?$allocator@UImportInfo@SegmentHeader@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 535  : 		_Get_data()._Orphan_all();
; 536  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@PBD@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@PBD@2@XZ PROC ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@PBD@2@XZ ENDP ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXPAUImportInfo@SegmentHeader@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXPAUImportInfo@SegmentHeader@@0@Z PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1848 : 		{	// destroy [_First, _Last) using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 1134 : 	for (; _First != _Last; ++_First)

  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 20		 je	 SHORT $LN11@Destroy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1848 : 		{	// destroy [_First, _Last) using allocator

  0000f	83 c6 04	 add	 esi, 4
$LL12@Destroy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1168 : 		_Tidy();

  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00019	6a 18		 push	 24			; 00000018H
  0001b	ff 36		 push	 DWORD PTR [esi]
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 1134 : 	for (; _First != _Last; ++_First)

  00022	83 c6 0c	 add	 esi, 12			; 0000000cH

; 207  : 	::operator delete(_Ptr, _Bytes);

  00025	83 c4 08	 add	 esp, 8

; 1134 : 	for (; _First != _Last; ++_First)

  00028	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0002b	3b c7		 cmp	 eax, edi
  0002d	75 e3		 jne	 SHORT $LL12@Destroy
$LN11@Destroy:
  0002f	5f		 pop	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1850 : 		}

  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 08 00	 ret	 8
?_Destroy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXPAUImportInfo@SegmentHeader@@0@Z ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::capacity, COMDAT
; _this$ = ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	d1 fa		 sar	 edx, 1
  0000e	8b c2		 mov	 eax, edx
  00010	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00013	03 c2		 add	 eax, edx

; 1716 : 		}

  00015	c3		 ret	 0
?capacity@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@UImportInfo@SegmentHeader@@@std@@QAEXQAUImportInfo@SegmentHeader@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@UImportInfo@SegmentHeader@@@std@@QAEXQAUImportInfo@SegmentHeader@@I@Z PROC ; std::allocator<SegmentHeader::ImportInfo>::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0000c	c1 e2 02	 shl	 edx, 2

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00015	72 14		 jb	 SHORT $LN15@deallocate

; 115  : 	_Bytes += _Non_user_size;

  00017	56		 push	 esi

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00018	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0001b	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b ce		 sub	 ecx, esi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 11		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00028	8b ce		 mov	 ecx, esi
  0002a	5e		 pop	 esi
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8

; 993  : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003f	cc		 int	 3
?deallocate@?$allocator@UImportInfo@SegmentHeader@@@std@@QAEXQAUImportInfo@SegmentHeader@@I@Z ENDP ; std::allocator<SegmentHeader::ImportInfo>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAEAAV?$allocator@UImportInfo@SegmentHeader@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAEAAV?$allocator@UImportInfo@SegmentHeader@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAEAAV?$allocator@UImportInfo@SegmentHeader@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myend, COMDAT
; _this$ = ecx

; 601  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 602  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABQAUImportInfo@SegmentHeader@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Get_data, COMDAT
; _this$ = ecx

; 555  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 556  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Parg$dead$ = 8					; size = 4
__Al$dead$ = 12						; size = 4
??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,void>, COMDAT
; _this$ = ecx

; 801  : 		{	// construct from comparator, allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 468  : 		: _Myhead(),

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 802  : 		_Construct();
; 803  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> ><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Movefl$ = 12						; size = 1
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>, COMDAT
; _this$ = ecx

; 1897 : 		{	// copy or move entire tree from _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1898 : 		auto& _My_data = this->_Get_data();
; 1899 : 		_My_data._Root() = _Copy_nodes(_Right._Get_data()._Root(), _My_data._Myhead, _Movefl);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	ff 75 0c	 push	 DWORD PTR __Movefl$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	ff 37		 push	 DWORD PTR [edi]
  00011	ff 70 04	 push	 DWORD PTR [eax+4]
  00014	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>
  00019	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1900 : 		_My_data._Mysize = _Right.size();

  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 493  : 		return (_Myhead->_Parent);

  00021	8b 37		 mov	 esi, DWORD PTR [edi]

; 1900 : 		_My_data._Mysize = _Right.size();

  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1901 : 		if (!_My_data._Root()->_Isnil)

  00026	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00029	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0002d	75 38		 jne	 SHORT $LN2@Copy

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00031	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00035	75 0c		 jne	 SHORT $LN35@Copy
$LL34@Copy:
  00037	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00039	8b d1		 mov	 edx, ecx
  0003b	8b c8		 mov	 ecx, eax
  0003d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00041	74 f4		 je	 SHORT $LL34@Copy
$LN35@Copy:

; 1902 : 			{	// nonempty tree, look for new smallest and largest
; 1903 : 			_My_data._Lmost() = _Mytreeval::_Min(_My_data._Root());

  00043	89 16		 mov	 DWORD PTR [esi], edx

; 493  : 		return (_Myhead->_Parent);

  00045	8b 17		 mov	 edx, DWORD PTR [edi]

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

  00047	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 479  : 		while (!_Pnode->_Right->_Isnil)

  0004a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0004d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00051	75 0b		 jne	 SHORT $LN43@Copy
$LL42@Copy:

; 480  : 			_Pnode = _Pnode->_Right;

  00053	8b c8		 mov	 ecx, eax
  00055	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00058	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005c	74 f5		 je	 SHORT $LL42@Copy
$LN43@Copy:
  0005e	5f		 pop	 edi

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

  0005f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1909 : 			_My_data._Rmost() = _My_data._Myhead;
; 1910 : 			}
; 1911 : 		}

  00062	5e		 pop	 esi
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN2@Copy:

; 1905 : 			}
; 1906 : 		else
; 1907 : 			{	// empty tree, just tidy head pointers
; 1908 : 			_My_data._Lmost() = _My_data._Myhead;

  00067	89 36		 mov	 DWORD PTR [esi], esi

; 503  : 		return (_Myhead->_Right);

  00069	8b 07		 mov	 eax, DWORD PTR [edi]
  0006b	5f		 pop	 edi

; 1909 : 			_My_data._Rmost() = _My_data._Myhead;
; 1910 : 			}
; 1911 : 		}

  0006c	5e		 pop	 esi
  0006d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@K@std@@@std@@YA$$QAV?$allocator@K@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$allocator@K@std@@@std@@YA$$QAV?$allocator@K@0@AAV10@@Z PROC ; std::forward<std::allocator<unsigned long> >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$allocator@K@std@@@std@@YA$$QAV?$allocator@K@0@AAV10@@Z ENDP ; std::forward<std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@K@std@@$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0V?$allocator@K@std@@$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@K@1@@Z PROC ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1><std::allocator<unsigned long> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00016	c2 08 00	 ret	 8
??$?0V?$allocator@K@std@@$$V@?$_Compressed_pair@V?$allocator@K@std@@V?$_Vector_val@U?$_Simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@K@1@@Z ENDP ; std::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1>::_Compressed_pair<std::allocator<unsigned long>,std::_Vector_val<std::_Simple_types<unsigned long> >,1><std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT
$T4 = -1						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z PROC ; std::_Uninitialized_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000a	8b f1		 mov	 esi, ecx

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);
; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 214  : 	_Seek_wrapped(_Dest,

  0000c	51		 push	 ecx
  0000d	8d 4d ff	 lea	 ecx, DWORD PTR $T4[ebp]
  00010	8b da		 mov	 ebx, edx
  00012	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ; std::_Ptr_copy_cat<unsigned long,unsigned long>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00017	2b de		 sub	 ebx, esi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00024	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 219  : 	return (_Dest);

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 220  : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninitialized_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKQAK0PAKAAV?$allocator@K@0@@Z ENDP ; std::_Uninitialized_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@@Z
_TEXT	SEGMENT
??$destroy@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::destroy<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> *>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::destroy<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABU?$less@PBD@std@@@std@@YAABU?$less@PBD@0@ABU10@@Z
_TEXT	SEGMENT
??$forward@ABU?$less@PBD@std@@@std@@YAABU?$less@PBD@0@ABU10@@Z PROC ; std::forward<std::less<char const *> const &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@ABU?$less@PBD@std@@@std@@YAABU?$less@PBD@0@ABU10@@Z ENDP ; std::forward<std::less<char const *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z
_TEXT	SEGMENT
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@ABV?$allocator@D@std@@@std@@YAABV?$allocator@D@0@ABV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1784 : 		_Mysize(0),

  00000	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00007	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstring

; 1785 : 		_Myres(0)

  00009	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00010	c2 08 00	 ret	 8
??$?0ABV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
??$move@AAD@std@@YA$$QADAAD@Z PROC			; std::move<char &>, COMDAT
; __Arg$ = ecx

; 1589 : 	return (static_cast<remove_reference_t<_Ty>&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1590 : 	}

  00002	c3		 ret	 0
??$move@AAD@std@@YA$$QADAAD@Z ENDP			; std::move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> * &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAXPAUImportInfo@SegmentHeader@@0AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAXPAUImportInfo@SegmentHeader@@0AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1154 : 	{	// destroy [_First, _Last), choose optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b fa		 mov	 edi, edx

; 1134 : 	for (; _First != _Last; ++_First)

  00006	3b cf		 cmp	 ecx, edi
  00008	74 24		 je	 SHORT $LN5@Destroy_ra

; 1154 : 	{	// destroy [_First, _Last), choose optimization

  0000a	56		 push	 esi
  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0000e	66 90		 npad	 2
$LL6@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1168 : 		_Tidy();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00017	6a 18		 push	 24			; 00000018H
  00019	ff 36		 push	 DWORD PTR [esi]
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 1134 : 	for (; _First != _Last; ++_First)

  00020	83 c6 0c	 add	 esi, 12			; 0000000cH

; 207  : 	::operator delete(_Ptr, _Bytes);

  00023	83 c4 08	 add	 esp, 8

; 1134 : 	for (; _First != _Last; ++_First)

  00026	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00029	3b c7		 cmp	 eax, edi
  0002b	75 e3		 jne	 SHORT $LL6@Destroy_ra
  0002d	5e		 pop	 esi
$LN5@Destroy_ra:
  0002e	5f		 pop	 edi

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Destroy_range@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAXPAUImportInfo@SegmentHeader@@0AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SegmentHeader::ImportInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >, COMDAT
; _this$ = ecx

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 471  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Get_data, COMDAT
; _this$ = ecx

; 1020 : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 1021 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::size, COMDAT
; _this$ = ecx

; 1270 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1271 : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QBEABV?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABU?$less@PBD@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PBD@1@$$QAU21@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
_<_Val2_0>$dead$ = 16					; size = 4
_<_Val2_1>$dead$ = 20					; size = 4
??$?0ABU?$less@PBD@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PBD@1@$$QAU21@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1><std::less<char const *> const &,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 469  : 		_Mysize(0)

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  0000f	c2 10 00	 ret	 16			; 00000010H
??$?0ABU?$less@PBD@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PBD@1@$$QAU21@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1><std::less<char const *> const &,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Rootnode$ = 8						; size = 4
__Newroot$ = 12						; size = 4
__Wherenode$ = 12					; size = 4
__Movefl$ = 16						; size = 1
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>, COMDAT
; _this$ = ecx

; 1937 : 		{	// copy entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 1938 : 		_Nodeptr _Newroot = this->_Get_data()._Myhead;	// point at nil node
; 1939 : 
; 1940 : 		if (!_Rootnode->_Isnil)

  00030	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00039	75 4e		 jne	 SHORT $LN8@Copy_nodes

; 1941 : 			{	// copy or move a node, then any subtrees
; 1942 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1943 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode->_Myval, _Movefl, _Is_set);

  0003b	83 c0 10	 add	 eax, 16			; 00000010H

; 1917 : 		return (this->_Buynode(_Val));

  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buynode<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>

; 1944 : 			_Pnode->_Parent = _Wherenode;
; 1945 : 			_Pnode->_Color = _Rootnode->_Color;

  00044	8b 4d 08	 mov	 ecx, DWORD PTR __Rootnode$[ebp]
  00047	8b d8		 mov	 ebx, eax
  00049	8b 45 0c	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0004c	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0004f	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]
  00052	88 43 0c	 mov	 BYTE PTR [ebx+12], al

; 1946 : 			if (_Newroot->_Isnil)

  00055	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0

; 1947 : 				_Newroot = _Pnode;	// memorize new root
; 1948 : 
; 1949 : 			_TRY_BEGIN

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1950 : 			_Pnode->_Left = _Copy_nodes(_Rootnode->_Left, _Pnode, _Movefl);

  00060	ff 75 10	 push	 DWORD PTR __Movefl$[ebp]
  00063	0f 45 fb	 cmovne	 edi, ebx
  00066	53		 push	 ebx
  00067	ff 31		 push	 DWORD PTR [ecx]
  00069	8b ce		 mov	 ecx, esi
  0006b	89 7d 0c	 mov	 DWORD PTR __Newroot$[ebp], edi
  0006e	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>

; 1951 : 			_Pnode->_Right = _Copy_nodes(_Rootnode->_Right, _Pnode, _Movefl);

  00073	ff 75 10	 push	 DWORD PTR __Movefl$[ebp]
  00076	89 03		 mov	 DWORD PTR [ebx], eax
  00078	8b ce		 mov	 ecx, esi
  0007a	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0007d	53		 push	 ebx
  0007e	ff 70 08	 push	 DWORD PTR [eax+8]
  00081	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>
  00086	89 43 08	 mov	 DWORD PTR [ebx+8], eax
$LN8@Copy_nodes:

; 1955 : 			_CATCH_END
; 1956 : 			}
; 1957 : 
; 1958 : 		return (_Newroot);	// return newly constructed tree

  00089	8b c7		 mov	 eax, edi

; 1959 : 		}

  0008b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00095	59		 pop	 ecx
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$0:

; 1952 : 			_CATCH_ALL
; 1953 : 			_Erase(_Newroot);	// subtree copy failed, bail out

  0009f	ff 75 0c	 push	 DWORD PTR __Newroot$[ebp]
  000a2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Erase

; 1954 : 			_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN19@Copy_nodes:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_tag>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$_Ptr_copy_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z PROC ; std::_Ptr_copy_cat<unsigned long,unsigned long>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 1070 : 	return {};

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00003	8b c1		 mov	 eax, ecx

; 1071 : 	}

  00005	c3		 ret	 0
??$_Ptr_copy_cat@KK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAK0@Z ENDP ; std::_Ptr_copy_cat<unsigned long,unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@KKV?$allocator@K@std@@@std@@YAPAKQAK00AAV?$allocator@K@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_copy_al_unchecked@KKV?$allocator@K@std@@@std@@YAPAKQAK00AAV?$allocator@K@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<unsigned long,unsigned long,std::allocator<unsigned long> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 203  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@KKV?$allocator@K@std@@@std@@YAPAKQAK00AAV?$allocator@K@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<unsigned long,unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAXPAUImportInfo@SegmentHeader@@0AAV?$allocator@UImportInfo@SegmentHeader@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range1@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAXPAUImportInfo@SegmentHeader@@0AAV?$allocator@UImportInfo@SegmentHeader@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1133 : 	{	// destroy [_First, _Last), no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi
  00004	8b fa		 mov	 edi, edx

; 1134 : 	for (; _First != _Last; ++_First)

  00006	3b cf		 cmp	 ecx, edi
  00008	74 24		 je	 SHORT $LN3@Destroy_ra

; 1133 : 	{	// destroy [_First, _Last), no special optimization

  0000a	56		 push	 esi
  0000b	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  0000e	66 90		 npad	 2
$LL4@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1168 : 		_Tidy();

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00017	6a 18		 push	 24			; 00000018H
  00019	ff 36		 push	 DWORD PTR [esi]
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 1134 : 	for (; _First != _Last; ++_First)

  00020	83 c6 0c	 add	 esi, 12			; 0000000cH

; 207  : 	::operator delete(_Ptr, _Bytes);

  00023	83 c4 08	 add	 esp, 8

; 1134 : 	for (; _First != _Last; ++_First)

  00026	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00029	3b c7		 cmp	 eax, edi
  0002b	75 e3		 jne	 SHORT $LL4@Destroy_ra
  0002d	5e		 pop	 esi
$LN3@Destroy_ra:
  0002e	5f		 pop	 edi

; 1135 : 		{
; 1136 : 		allocator_traits<_Alloc>::destroy(_Al, _Unfancy(_First));
; 1137 : 		}
; 1138 : 	}

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
??$_Destroy_range1@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAXPAUImportInfo@SegmentHeader@@0AAV?$allocator@UImportInfo@SegmentHeader@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<SegmentHeader::ImportInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_One_then_variadic_args_t>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@U_One_then_variadic_args_t@std@@@std@@YA$$QAU_One_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_One_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 469  : 		_Mysize(0)

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  0000f	c2 08 00	 ret	 8
??$?0V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1><std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Copy_or_move@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Copy_or_move@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_or_move<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,std::integral_constant<bool,0> >, COMDAT
; _this$ = ecx

; 1916 : 		{	// copy to new node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1917 : 		return (this->_Buynode(_Val));

  00003	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00006	e8 00 00 00 00	 call	 ??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buynode<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>

; 1918 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 0c 00	 ret	 12			; 0000000cH
??$_Copy_or_move@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@IAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Copy_or_move<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,std::integral_constant<bool,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$_Unfancy@UImportInfo@SegmentHeader@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@@Z
_TEXT	SEGMENT
??$_Unfancy@UImportInfo@SegmentHeader@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@@Z PROC ; std::_Unfancy<SegmentHeader::ImportInfo>, COMDAT
; __Ptr$ = ecx

; 346  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 347  : 	}

  00002	c3		 ret	 0
??$_Unfancy@UImportInfo@SegmentHeader@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@@Z ENDP ; std::_Unfancy<SegmentHeader::ImportInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@UImportInfo@SegmentHeader@@@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAXAAV?$allocator@UImportInfo@SegmentHeader@@@1@QAUImportInfo@SegmentHeader@@@Z
_TEXT	SEGMENT
??$destroy@UImportInfo@SegmentHeader@@@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAXAAV?$allocator@UImportInfo@SegmentHeader@@@1@QAUImportInfo@SegmentHeader@@@Z PROC ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::destroy<SegmentHeader::ImportInfo>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 886  : 		{	// destroy object at _Ptr

  00000	56		 push	 esi
  00001	8d 72 04	 lea	 esi, DWORD PTR [edx+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1168 : 		_Tidy();

  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0000b	6a 18		 push	 24			; 00000018H
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
  00017	5e		 pop	 esi

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00018	c3		 ret	 0
??$destroy@UImportInfo@SegmentHeader@@@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAXAAV?$allocator@UImportInfo@SegmentHeader@@@1@QAUImportInfo@SegmentHeader@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::destroy<SegmentHeader::ImportInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??_GImportInfo@SegmentHeader@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$dead$ = 8					; size = 4
??_GImportInfo@SegmentHeader@@QAEPAXI@Z PROC		; SegmentHeader::ImportInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1168 : 		_Tidy();

  00003	56		 push	 esi
  00004	57		 push	 edi
  00005	8b f9		 mov	 edi, ecx
  00007	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0000a	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0000f	6a 18		 push	 24			; 00000018H
  00011	ff 77 04	 push	 DWORD PTR [edi+4]
  00014	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00019	83 c4 08	 add	 esp, 8
  0001c	8b c7		 mov	 eax, edi
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_GImportInfo@SegmentHeader@@QAEPAXI@Z ENDP		; SegmentHeader::ImportInfo::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??1ImportInfo@SegmentHeader@@QAE@XZ
_TEXT	SEGMENT
??1ImportInfo@SegmentHeader@@QAE@XZ PROC		; SegmentHeader::ImportInfo::~ImportInfo, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1168 : 		_Tidy();

  00000	56		 push	 esi
  00001	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00004	8b ce		 mov	 ecx, esi
  00006	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0000b	6a 18		 push	 24			; 00000018H
  0000d	ff 36		 push	 DWORD PTR [esi]
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??1ImportInfo@SegmentHeader@@QAE@XZ ENDP		; SegmentHeader::ImportInfo::~ImportInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??1?$multimap@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$multimap@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@@std@@QAE@XZ PROC ; std::multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::~multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1168 : 		_Tidy();

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00008	6a 18		 push	 24			; 00000018H
  0000a	ff 36		 push	 DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00011	83 c4 08	 add	 esp, 8
  00014	5e		 pop	 esi
  00015	c3		 ret	 0
??1?$multimap@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@@std@@QAE@XZ ENDP ; std::multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::~multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::~_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >, COMDAT
; _this$ = ecx

; 1167 : 		{	// destroy tree

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1168 : 		_Tidy();

  00003	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00008	6a 18		 push	 24			; 00000018H
  0000a	ff 36		 push	 DWORD PTR [esi]
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00011	83 c4 08	 add	 esp, 8
  00014	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1169 : 		}

  00015	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::~_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??1?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::~_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	ff 31		 push	 DWORD PTR [ecx]
  00004	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00009	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 814  : 		}

  0000c	c3		 ret	 0
??1?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::~_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ
_TEXT	SEGMENT
__Head$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy, COMDAT
; _this$ = ecx

; 2112 : 		{	// free all storage

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx

; 42   : 		: _Ptr(_Pnode)

  00028	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0002a	89 4d f0	 mov	 DWORD PTR __Head$1$[ebp], ecx

; 1408 : 		{	// erase all

  0002d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00034	8b c1		 mov	 eax, ecx

; 1415 : 		_Erase(_My_data._Root());

  00036	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00039	8b f3		 mov	 esi, ebx
  0003b	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  0003f	75 24		 jne	 SHORT $LN102@Tidy
$LL103@Tidy:

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

  00041	ff 76 08	 push	 DWORD PTR [esi+8]
  00044	8b cf		 mov	 ecx, edi
  00046	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Erase

; 2023 : 			_Pnode = _Pnode->_Left;

  0004b	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004d	6a 18		 push	 24			; 00000018H
  0004f	53		 push	 ebx
  00050	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00055	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00058	8b de		 mov	 ebx, esi
  0005a	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0005e	74 e1		 je	 SHORT $LL103@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00060	8b 07		 mov	 eax, DWORD PTR [edi]
  00062	8b 4d f0	 mov	 ecx, DWORD PTR __Head$1$[ebp]
$LN102@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1416 : 		_My_data._Root() = _Head;

  00065	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 498  : 		return (_Myhead->_Left);

  00068	8b 07		 mov	 eax, DWORD PTR [edi]

; 1417 : 		_My_data._Lmost() = _Head;

  0006a	89 08		 mov	 DWORD PTR [eax], ecx

; 1418 : 		_My_data._Rmost() = _Head;

  0006c	8b 07		 mov	 eax, DWORD PTR [edi]
  0006e	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1419 : 		_My_data._Mysize = 0;

  00071	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 2113 : 		erase(begin(), end());
; 2114 : 		}

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Get_data, COMDAT
; _this$ = ecx

; 1015 : 		return (_Mypair._Get_second()._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 1016 : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Freeheadnode, COMDAT
; _this$dead$ = ecx

; 946  : 		{	// free head node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00006	6a 18		 push	 24			; 00000018H
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 948  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Freeheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z
_TEXT	SEGMENT
__Head$1$ = -24						; size = 4
___$ReturnUdt$GSCopy$1$ = -20				; size = 4
_this$GSCopy$1$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::erase, COMDAT
; _this$ = ecx

; 1385 : 		{	// erase [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	8b c1		 mov	 eax, ecx
  0002a	89 45 f0	 mov	 DWORD PTR _this$GSCopy$1$[ebp], eax

; 498  : 		return (_Myhead->_Left);

  0002d	8b 18		 mov	 ebx, DWORD PTR [eax]

; 42   : 		: _Ptr(_Pnode)

  0002f	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]

; 1385 : 		{	// erase [_First, _Last)

  00032	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]

; 1386 : 		if (_First == begin() && _Last == end())

  00035	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  00038	89 4d ec	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], ecx

; 498  : 		return (_Myhead->_Left);

  0003b	89 5d e8	 mov	 DWORD PTR __Head$1$[ebp], ebx

; 42   : 		: _Ptr(_Pnode)

  0003e	3b 03		 cmp	 eax, DWORD PTR [ebx]

; 1386 : 		if (_First == begin() && _Last == end())

  00040	75 75		 jne	 SHORT $LN248@erase

; 42   : 		: _Ptr(_Pnode)

  00042	3b d3		 cmp	 edx, ebx

; 1386 : 		if (_First == begin() && _Last == end())

  00044	75 71		 jne	 SHORT $LN248@erase

; 1408 : 		{	// erase all

  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0004d	8b c3		 mov	 eax, ebx

; 1415 : 		_Erase(_My_data._Root());

  0004f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00052	8b f7		 mov	 esi, edi
  00054	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00058	75 2a		 jne	 SHORT $LN62@erase
  0005a	8b 5d f0	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0005d	0f 1f 00	 npad	 3
$LL63@erase:

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

  00060	ff 76 08	 push	 DWORD PTR [esi+8]
  00063	8b cb		 mov	 ecx, ebx
  00065	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Erase

; 2023 : 			_Pnode = _Pnode->_Left;

  0006a	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0006c	6a 18		 push	 24			; 00000018H
  0006e	57		 push	 edi
  0006f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00074	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00077	8b fe		 mov	 edi, esi
  00079	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0007d	74 e1		 je	 SHORT $LL63@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0007f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00081	8b 5d e8	 mov	 ebx, DWORD PTR __Head$1$[ebp]
$LN62@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1416 : 		_My_data._Root() = _Head;

  00084	89 58 04	 mov	 DWORD PTR [eax+4], ebx

; 498  : 		return (_Myhead->_Left);

  00087	8b 45 f0	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1417 : 		_My_data._Lmost() = _Head;

  0008c	89 19		 mov	 DWORD PTR [ecx], ebx

; 1418 : 		_My_data._Rmost() = _Head;

  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	89 59 08	 mov	 DWORD PTR [ecx+8], ebx

; 1419 : 		_My_data._Mysize = 0;

  00093	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 498  : 		return (_Myhead->_Left);

  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]

; 42   : 		: _Ptr(_Pnode)

  0009c	8b 45 ec	 mov	 eax, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0009f	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000a1	89 08		 mov	 DWORD PTR [eax], ecx

; 1396 : 			}
; 1397 : 		}

  000a3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ad	59		 pop	 ecx
  000ae	5f		 pop	 edi
  000af	5e		 pop	 esi
  000b0	5b		 pop	 ebx
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 0c 00	 ret	 12			; 0000000cH
$LN248@erase:

; 278  : 		return (this->_Ptr == _Right._Ptr);

  000b7	3b c2		 cmp	 eax, edx

; 1387 : 			{	// erase all
; 1388 : 			clear();
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// partial erase, one at a time
; 1393 : 			while (_First != _Last)

  000b9	0f 84 ad 00 00
	00		 je	 $LN3@erase
  000bf	8b 5d f0	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LL2@erase:

; 59   : 		if (_Ptr->_Right->_Isnil)

  000c2	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  000c5	8d 78 08	 lea	 edi, DWORD PTR [eax+8]

; 246  : 		_Tree_const_iterator _Tmp = *this;

  000c8	8b c8		 mov	 ecx, eax

; 59   : 		if (_Ptr->_Right->_Isnil)

  000ca	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  000ce	74 28		 je	 SHORT $LN149@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  000d0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000d3	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000d7	75 1a		 jne	 SHORT $LN148@erase
  000d9	0f 1f 80 00 00
	00 00		 npad	 7
$LL147@erase:
  000e0	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  000e3	75 0e		 jne	 SHORT $LN148@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  000e5	8b c2		 mov	 eax, edx
  000e7	89 45 0c	 mov	 DWORD PTR __First$[ebp], eax
  000ea	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  000ed	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000f1	74 ed		 je	 SHORT $LL147@erase
$LN148@erase:

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())

  000f3	89 55 0c	 mov	 DWORD PTR __First$[ebp], edx

; 68   : 			}
; 69   : 		else

  000f6	eb 17		 jmp	 SHORT $LN150@erase
$LN149@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000f8	8b 16		 mov	 edx, DWORD PTR [esi]
  000fa	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  000fe	75 0c		 jne	 SHORT $LN154@erase
$LL153@erase:
  00100	8b 02		 mov	 eax, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  00102	8b f2		 mov	 esi, edx
  00104	8b d0		 mov	 edx, eax
  00106	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0010a	74 f4		 je	 SHORT $LL153@erase
$LN154@erase:

; 71   : 			_Ptr = _Mytree::_Min(_Ptr->_Right);	// ==> smallest of right subtree

  0010c	89 75 0c	 mov	 DWORD PTR __First$[ebp], esi
$LN150@erase:

; 59   : 		if (_Ptr->_Right->_Isnil)

  0010f	8b 17		 mov	 edx, DWORD PTR [edi]

; 1369 : 		const_iterator _Successor = _Where;

  00111	8b c1		 mov	 eax, ecx

; 59   : 		if (_Ptr->_Right->_Isnil)

  00113	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00117	74 1b		 je	 SHORT $LN171@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00119	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0011c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00120	75 28		 jne	 SHORT $LN176@erase
$LL169@erase:
  00122	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00125	75 23		 jne	 SHORT $LN176@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00127	8b c2		 mov	 eax, edx
  00129	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0012c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00130	74 f0		 je	 SHORT $LL169@erase

; 68   : 			}
; 69   : 		else

  00132	eb 16		 jmp	 SHORT $LN176@erase
$LN171@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00134	8b 12		 mov	 edx, DWORD PTR [edx]
  00136	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0013a	75 0e		 jne	 SHORT $LN176@erase
  0013c	0f 1f 40 00	 npad	 4
$LL175@erase:
  00140	8b 02		 mov	 eax, DWORD PTR [edx]
  00142	8b d0		 mov	 edx, eax
  00144	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00148	74 f6		 je	 SHORT $LL175@erase
$LN176@erase:

; 1371 : 		_Nodeptr _Erasednode = _My_data._Extract(_Where);	// node to erase

  0014a	51		 push	 ecx
  0014b	8b cb		 mov	 ecx, ebx
  0014d	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Extract
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00152	6a 18		 push	 24			; 00000018H
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 278  : 		return (this->_Ptr == _Right._Ptr);

  0015a	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0015d	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 278  : 		return (this->_Ptr == _Right._Ptr);

  00160	3b 45 10	 cmp	 eax, DWORD PTR __Last$[ebp]

; 1387 : 			{	// erase all
; 1388 : 			clear();
; 1389 : 			return (begin());
; 1390 : 			}
; 1391 : 		else
; 1392 : 			{	// partial erase, one at a time
; 1393 : 			while (_First != _Last)

  00163	0f 85 59 ff ff
	ff		 jne	 $LL2@erase
  00169	8b 4d ec	 mov	 ecx, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
$LN3@erase:

; 42   : 		: _Ptr(_Pnode)

  0016c	89 01		 mov	 DWORD PTR [ecx], eax

; 1394 : 				erase(_First++);
; 1395 : 			return (iterator(_First._Ptr, _STD addressof(this->_Get_data())));

  0016e	8b c1		 mov	 eax, ecx

; 1396 : 			}
; 1397 : 		}

  00170	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00173	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0017a	59		 pop	 ecx
  0017b	5f		 pop	 edi
  0017c	5e		 pop	 esi
  0017d	5b		 pop	 ebx
  0017e	8b e5		 mov	 esp, ebp
  00180	5d		 pop	 ebp
  00181	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@0@Z ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::erase
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::end, COMDAT
; _this$ = ecx

; 1197 : 		{	// return iterator for end of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	89 08		 mov	 DWORD PTR [eax], ecx

; 1198 : 		auto& _My_data = this->_Get_data();
; 1199 : 		return (iterator(_My_data._Myhead, _STD addressof(_My_data)));
; 1200 : 		}

  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::begin, COMDAT
; _this$ = ecx

; 1185 : 		{	// return iterator for beginning of mutable sequence

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 498  : 		return (_Myhead->_Left);

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]

; 42   : 		: _Ptr(_Pnode)

  00005	8b 08		 mov	 ecx, DWORD PTR [eax]
  00007	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1186 : 		auto& _My_data = this->_Get_data();
; 1187 : 		return (iterator(_My_data._Lmost(), _STD addressof(_My_data)));
; 1188 : 		}

  0000c	5d		 pop	 ebp
  0000d	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@XZ PROC ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QAEAAV?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@XZ ENDP ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 302  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 303  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAEAAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator!=, COMDAT
; _this$ = ecx

; 282  : 		{	// test for iterator inequality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 283  : 		return (!(*this == _Right));

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 95 c0	 setne	 al

; 284  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator==, COMDAT
; _this$ = ecx

; 273  : 		{	// test for iterator equality

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 274  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 275  : 		_STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");
; 276  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 277  : 
; 278  : 		return (this->_Ptr == _Right._Ptr);

  00003	8b 45 08	 mov	 eax, DWORD PTR __Right$[ebp]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0000a	0f 94 c0	 sete	 al

; 279  : 		}

  0000d	5d		 pop	 ebp
  0000e	c2 04 00	 ret	 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$dead$ = 12					; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE?AV01@H@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator++, COMDAT
; _this$ = ecx

; 245  : 		{	// postincrement

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 246  : 		_Tree_const_iterator _Tmp = *this;

  00007	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 07		 mov	 DWORD PTR [edi], eax

; 59   : 		if (_Ptr->_Right->_Isnil)

  0000e	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00011	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00015	74 25		 je	 SHORT $LN10@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0001e	75 30		 jne	 SHORT $LN15@operator
$LL8@operator:
  00020	3b 42 08	 cmp	 eax, DWORD PTR [edx+8]
  00023	75 2b		 jne	 SHORT $LN15@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00025	89 16		 mov	 DWORD PTR [esi], edx
  00027	8b c2		 mov	 eax, edx
  00029	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0002c	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00030	74 ee		 je	 SHORT $LL8@operator

; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}

  00032	8b c7		 mov	 eax, edi
  00034	89 16		 mov	 DWORD PTR [esi], edx
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
$LN10@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0003c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00042	75 0c		 jne	 SHORT $LN15@operator
$LL14@operator:
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00046	8b d1		 mov	 edx, ecx
  00048	8b c8		 mov	 ecx, eax
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f4		 je	 SHORT $LL14@operator
$LN15@operator:

; 247  : 		++*this;
; 248  : 		return (_Tmp);
; 249  : 		}

  00050	8b c7		 mov	 eax, edi
  00052	89 16		 mov	 DWORD PTR [esi], edx
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE?AV01@H@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 328  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Getal, COMDAT
; _this$ = ecx

; 1005 : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1006 : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Head$1$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?clear@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::clear, COMDAT
; _this$ = ecx

; 1408 : 		{	// erase all

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?clear@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	53		 push	 ebx
  00013	56		 push	 esi
  00014	57		 push	 edi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f9		 mov	 edi, ecx

; 1409 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1410 : 		this->_Orphan_ptr(nullptr);
; 1411 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1412 : 
; 1413 : 		auto& _My_data = this->_Get_data();
; 1414 : 		auto _Head = _My_data._Myhead;

  00028	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0002a	8b c1		 mov	 eax, ecx

; 1409 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1410 : 		this->_Orphan_ptr(nullptr);
; 1411 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1412 : 
; 1413 : 		auto& _My_data = this->_Get_data();
; 1414 : 		auto _Head = _My_data._Myhead;

  0002c	89 4d f0	 mov	 DWORD PTR __Head$1$[ebp], ecx

; 1415 : 		_Erase(_My_data._Root());

  0002f	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00032	8b f3		 mov	 esi, ebx
  00034	80 7b 0d 00	 cmp	 BYTE PTR [ebx+13], 0
  00038	75 2a		 jne	 SHORT $LN13@clear
  0003a	66 0f 1f 44 00
	00		 npad	 6
$LL14@clear:

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

  00040	ff 76 08	 push	 DWORD PTR [esi+8]
  00043	8b cf		 mov	 ecx, edi
  00045	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Erase

; 2023 : 			_Pnode = _Pnode->_Left;

  0004a	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0004c	6a 18		 push	 24			; 00000018H
  0004e	53		 push	 ebx
  0004f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00054	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  00057	8b de		 mov	 ebx, esi
  00059	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0005d	74 e1		 je	 SHORT $LL14@clear
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0005f	8b 07		 mov	 eax, DWORD PTR [edi]
  00061	8b 4d f0	 mov	 ecx, DWORD PTR __Head$1$[ebp]
$LN13@clear:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1416 : 		_My_data._Root() = _Head;

  00064	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 498  : 		return (_Myhead->_Left);

  00067	8b 07		 mov	 eax, DWORD PTR [edi]

; 1417 : 		_My_data._Lmost() = _Head;

  00069	89 08		 mov	 DWORD PTR [eax], ecx

; 1418 : 		_My_data._Rmost() = _Head;

  0006b	8b 07		 mov	 eax, DWORD PTR [edi]
  0006d	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 1419 : 		_My_data._Mysize = 0;

  00070	c7 47 04 00 00
	00 00		 mov	 DWORD PTR [edi+4], 0

; 1420 : 		}

  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b e5		 mov	 esp, ebp
  00087	5d		 pop	 ebp
  00088	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?clear@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?clear@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?clear@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::clear
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::erase, COMDAT
; _this$ = ecx

; 1362 : 		{	// erase element at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 1363 : 		auto& _My_data = this->_Get_data();
; 1364 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1365 : 		_STL_VERIFY(_Where._Getcont() == _STD addressof(_My_data)
; 1366 : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 1367 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1368 : 
; 1369 : 		const_iterator _Successor = _Where;

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Where$[ebp]
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  0000e	8b c1		 mov	 eax, ecx

; 59   : 		if (_Ptr->_Right->_Isnil)

  00010	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00013	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00017	74 1b		 je	 SHORT $LN16@erase

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  00019	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0001c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00020	75 2a		 jne	 SHORT $LN21@erase
$LL14@erase:
  00022	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00025	75 25		 jne	 SHORT $LN21@erase

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  00027	8b c6		 mov	 eax, esi
  00029	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  0002c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00030	74 f0		 je	 SHORT $LL14@erase

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

  00032	eb 18		 jmp	 SHORT $LN21@erase
$LN16@erase:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00034	8b 16		 mov	 edx, DWORD PTR [esi]
  00036	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0003a	75 10		 jne	 SHORT $LN21@erase
  0003c	0f 1f 40 00	 npad	 4
$LL20@erase:
  00040	8b 02		 mov	 eax, DWORD PTR [edx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f2		 mov	 esi, edx
  00044	8b d0		 mov	 edx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL20@erase
$LN21@erase:

; 1370 : 		++_Successor;	// save successor iterator for return
; 1371 : 		_Nodeptr _Erasednode = _My_data._Extract(_Where);	// node to erase

  0004c	51		 push	 ecx
  0004d	8b cb		 mov	 ecx, ebx
  0004f	e8 00 00 00 00	 call	 ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Extract
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00054	6a 18		 push	 24			; 00000018H
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0005c	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 42   : 		: _Ptr(_Pnode)

  0005f	89 37		 mov	 DWORD PTR [edi], esi

; 1372 : 
; 1373 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1374 : 		_Orphan_ptr(_Erasednode);
; 1375 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1376 : 
; 1377 : 		_Alnode& _Al = this->_Getal();
; 1378 : 		_Alnode_traits::destroy(_Al, _STD addressof(_Erasednode->_Myval));	// delete erased node
; 1379 : 		_Node::_Freenode0(_Al, _Erasednode);
; 1380 : 
; 1381 : 		return (iterator(_Successor._Ptr, _STD addressof(_My_data)));	// return successor iterator

  00061	8b c7		 mov	 eax, edi
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx

; 1382 : 		}

  00066	5d		 pop	 ebp
  00067	c2 08 00	 ret	 8
?erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAEXI@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c2 04 00	 ret	 4
?__autoclassinit2@?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAEXI@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator++, COMDAT
; _this$ = ecx

; 234  : 		{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00004	8b 16		 mov	 edx, DWORD PTR [esi]
  00006	8b 7a 08	 mov	 edi, DWORD PTR [edx+8]
  00009	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0000d	74 22		 je	 SHORT $LN6@operator

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0000f	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00012	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00016	75 12		 jne	 SHORT $LN21@operator
$LL4@operator:
  00018	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0001b	75 0d		 jne	 SHORT $LN21@operator

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0001d	89 06		 mov	 DWORD PTR [esi], eax
  0001f	8b d0		 mov	 edx, eax
  00021	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00024	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00028	74 ee		 je	 SHORT $LL4@operator
$LN21@operator:

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

  0002a	89 06		 mov	 DWORD PTR [esi], eax

; 242  : 		}

  0002c	8b c6		 mov	 eax, esi
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	c3		 ret	 0
$LN6@operator:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00031	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00033	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00037	75 13		 jne	 SHORT $LN11@operator
  00039	0f 1f 80 00 00
	00 00		 npad	 7
$LL10@operator:
  00040	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00042	8b f9		 mov	 edi, ecx
  00044	8b c8		 mov	 ecx, eax
  00046	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004a	74 f4		 je	 SHORT $LL10@operator
$LN11@operator:

; 235  :  #if _ITERATOR_DEBUG_LEVEL != 0
; 236  : 		_STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");
; 237  : 		_STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");
; 238  :  #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 239  : 
; 240  : 		++static_cast<_Mybase&>(*this);
; 241  : 		return (*this);

  0004c	89 3e		 mov	 DWORD PTR [esi], edi

; 242  : 		}

  0004e	8b c6		 mov	 eax, esi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi
  00052	c3		 ret	 0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
__Plist$dead$ = 12					; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >, COMDAT
; _this$ = ecx

; 214  : 		{	// construct with node pointer _Pnode

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 42   : 		: _Ptr(_Pnode)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 215  : 		}

  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 08 00	 ret	 8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
__Erasednode$1$ = -8					; size = 4
_this$GSCopy$1$ = -4					; size = 4
__Where$ = 8						; size = 4
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Extract, COMDAT
; _this$ = ecx

; 562  : 		{	// extract node at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 563  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 564  : 		_STL_VERIFY(_Where._Getcont() == this
; 565  : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 566  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 567  : 
; 568  : 		_Nodeptr _Erasednode = _Where._Ptr;	// node to erase

  00006	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00009	8b d0		 mov	 edx, eax
  0000b	53		 push	 ebx

; 59   : 		if (_Ptr->_Right->_Isnil)

  0000c	8d 58 08	 lea	 ebx, DWORD PTR [eax+8]

; 562  : 		{	// extract node at _Where

  0000f	89 4d fc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  00012	56		 push	 esi

; 59   : 		if (_Ptr->_Right->_Isnil)

  00013	8b 33		 mov	 esi, DWORD PTR [ebx]

; 563  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 564  : 		_STL_VERIFY(_Where._Getcont() == this
; 565  : 			&& !_Where._Ptr->_Isnil, "map/set erase iterator outside range");
; 566  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 567  : 
; 568  : 		_Nodeptr _Erasednode = _Where._Ptr;	// node to erase

  00015	89 55 f8	 mov	 DWORD PTR __Erasednode$1$[ebp], edx

; 59   : 		if (_Ptr->_Right->_Isnil)

  00018	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  0001c	74 1e		 je	 SHORT $LN51@Extract

; 60   : 			{	// climb looking for right subtree
; 61   : 			_Nodeptr _Pnode;
; 62   : 			while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right)

  0001e	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00021	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00025	75 2c		 jne	 SHORT $LN165@Extract
$LL49@Extract:
  00027	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  0002a	75 27		 jne	 SHORT $LN165@Extract

; 63   : 				{
; 64   : 				_Ptr = _Pnode;	// ==> parent while right subtree

  0002c	8b c6		 mov	 eax, esi
  0002e	89 45 08	 mov	 DWORD PTR __Where$[ebp], eax
  00031	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00034	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00038	74 ed		 je	 SHORT $LL49@Extract

; 65   : 				}
; 66   : 
; 67   : 			_Ptr = _Pnode;	// ==> parent (head if end())
; 68   : 			}
; 69   : 		else

  0003a	eb 17		 jmp	 SHORT $LN165@Extract
$LN51@Extract:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0003c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00042	75 0c		 jne	 SHORT $LN56@Extract
$LL55@Extract:
  00044	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00046	8b f1		 mov	 esi, ecx
  00048	8b c8		 mov	 ecx, eax
  0004a	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0004e	74 f4		 je	 SHORT $LL55@Extract
$LN56@Extract:
  00050	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN165@Extract:

; 569  : 		++_Where;	// save successor iterator for return
; 570  : 
; 571  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 572  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 573  : 		_Nodeptr _Pnode = _Erasednode;
; 574  : 
; 575  : 		if (_Pnode->_Left->_Isnil)

  00053	89 75 08	 mov	 DWORD PTR __Where$[ebp], esi
  00056	8b 02		 mov	 eax, DWORD PTR [edx]
  00058	57		 push	 edi
  00059	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0005b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005f	75 15		 jne	 SHORT $LN158@Extract

; 576  : 			{
; 577  : 			_Fixnode = _Pnode->_Right;	// stitch up right subtree
; 578  : 			}
; 579  : 		else if (_Pnode->_Right->_Isnil)

  00061	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00065	74 04		 je	 SHORT $LN7@Extract

; 580  : 			{
; 581  : 			_Fixnode = _Pnode->_Left;	// stitch up left subtree

  00067	8b f8		 mov	 edi, eax

; 582  : 			}
; 583  : 		else

  00069	eb 0b		 jmp	 SHORT $LN158@Extract
$LN7@Extract:

; 584  : 			{	// two subtrees, must lift successor node to replace erased
; 585  : 			_Pnode = _Where._Ptr;	// _Pnode is successor node
; 586  : 			_Fixnode = _Pnode->_Right;	// _Fixnode is only subtree

  0006b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 587  : 			}
; 588  : 
; 589  : 		if (_Pnode == _Erasednode)

  0006e	3b f2		 cmp	 esi, edx
  00070	0f 85 8a 00 00
	00		 jne	 $LN9@Extract
$LN158@Extract:

; 590  : 			{	// at most one subtree, relink it
; 591  : 			_Fixnodeparent = _Erasednode->_Parent;
; 592  : 			if (!_Fixnode->_Isnil)

  00076	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  0007a	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  0007d	75 03		 jne	 SHORT $LN11@Extract

; 593  : 				_Fixnode->_Parent = _Fixnodeparent;	// link up

  0007f	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN11@Extract:

; 493  : 		return (_Myhead->_Parent);

  00082	8b 01		 mov	 eax, DWORD PTR [ecx]

; 594  : 
; 595  : 			if (_Root() == _Erasednode)

  00084	8b 75 f8	 mov	 esi, DWORD PTR __Erasednode$1$[ebp]
  00087	39 70 04	 cmp	 DWORD PTR [eax+4], esi
  0008a	75 05		 jne	 SHORT $LN12@Extract

; 596  : 				{
; 597  : 				_Root() = _Fixnode;	// link down from root

  0008c	89 78 04	 mov	 DWORD PTR [eax+4], edi
  0008f	eb 0b		 jmp	 SHORT $LN15@Extract
$LN12@Extract:

; 598  : 				}
; 599  : 			else if (_Fixnodeparent->_Left == _Erasednode)

  00091	39 32		 cmp	 DWORD PTR [edx], esi
  00093	75 04		 jne	 SHORT $LN14@Extract

; 600  : 				{
; 601  : 				_Fixnodeparent->_Left = _Fixnode;	// link down to left

  00095	89 3a		 mov	 DWORD PTR [edx], edi

; 602  : 				}
; 603  : 			else

  00097	eb 03		 jmp	 SHORT $LN15@Extract
$LN14@Extract:

; 604  : 				{
; 605  : 				_Fixnodeparent->_Right = _Fixnode;	// link down to right

  00099	89 7a 08	 mov	 DWORD PTR [edx+8], edi
$LN15@Extract:

; 498  : 		return (_Myhead->_Left);

  0009c	8b 19		 mov	 ebx, DWORD PTR [ecx]

; 606  : 				}
; 607  : 
; 608  : 			if (_Lmost() == _Erasednode)

  0009e	39 33		 cmp	 DWORD PTR [ebx], esi
  000a0	75 25		 jne	 SHORT $LN16@Extract

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  000a2	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000a6	74 04		 je	 SHORT $LN42@Extract
  000a8	8b f2		 mov	 esi, edx
  000aa	eb 19		 jmp	 SHORT $LN43@Extract
$LN42@Extract:

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000ac	8b 0f		 mov	 ecx, DWORD PTR [edi]

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  000ae	8b f7		 mov	 esi, edi

; 486  : 		while (!_Pnode->_Left->_Isnil)

  000b0	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  000b4	75 0c		 jne	 SHORT $LN66@Extract
$LL65@Extract:
  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  000b8	8b f1		 mov	 esi, ecx
  000ba	8b c8		 mov	 ecx, eax
  000bc	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000c0	74 f4		 je	 SHORT $LL65@Extract
$LN66@Extract:
  000c2	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN43@Extract:

; 609  : 				{
; 610  : 				_Lmost() = _Fixnode->_Isnil

  000c5	89 33		 mov	 DWORD PTR [ebx], esi
$LN16@Extract:

; 503  : 		return (_Myhead->_Right);

  000c7	8b 31		 mov	 esi, DWORD PTR [ecx]

; 611  : 					? _Fixnodeparent	// smallest is parent of erased node
; 612  : 					: _Min(_Fixnode);	// smallest in relinked subtree
; 613  : 				}
; 614  : 
; 615  : 			if (_Rmost() == _Erasednode)

  000c9	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
  000cc	39 5e 08	 cmp	 DWORD PTR [esi+8], ebx
  000cf	0f 85 84 00 00
	00		 jne	 $LN83@Extract

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  000d5	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  000d9	74 07		 je	 SHORT $LN44@Extract
  000db	8b ca		 mov	 ecx, edx
  000dd	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 618  : 					? _Fixnodeparent	// largest is parent of erased node
; 619  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 620  : 				}
; 621  : 			}
; 622  : 		else

  000e0	eb 74		 jmp	 SHORT $LN169@Extract
$LN44@Extract:

; 479  : 		while (!_Pnode->_Right->_Isnil)

  000e2	8b 47 08	 mov	 eax, DWORD PTR [edi+8]

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  000e5	8b cf		 mov	 ecx, edi

; 479  : 		while (!_Pnode->_Right->_Isnil)

  000e7	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000eb	75 0e		 jne	 SHORT $LN74@Extract
  000ed	0f 1f 00	 npad	 3
$LL73@Extract:

; 480  : 			_Pnode = _Pnode->_Right;

  000f0	8b c8		 mov	 ecx, eax
  000f2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000f5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000f9	74 f5		 je	 SHORT $LL73@Extract
$LN74@Extract:

; 616  : 				{
; 617  : 				_Rmost() = _Fixnode->_Isnil

  000fb	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 618  : 					? _Fixnodeparent	// largest is parent of erased node
; 619  : 					: _Max(_Fixnode);	// largest in relinked subtree
; 620  : 				}
; 621  : 			}
; 622  : 		else

  000fe	eb 56		 jmp	 SHORT $LN169@Extract
$LN9@Extract:

; 623  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 624  : 			_Erasednode->_Left->_Parent = _Pnode;	// link left up

  00100	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 625  : 			_Pnode->_Left = _Erasednode->_Left;	// link successor down

  00103	8b 02		 mov	 eax, DWORD PTR [edx]
  00105	89 06		 mov	 DWORD PTR [esi], eax

; 626  : 
; 627  : 			if (_Pnode == _Erasednode->_Right)

  00107	3b 33		 cmp	 esi, DWORD PTR [ebx]
  00109	75 04		 jne	 SHORT $LN18@Extract

; 628  : 				{
; 629  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  0010b	8b d6		 mov	 edx, esi

; 630  : 				}
; 631  : 			else

  0010d	eb 18		 jmp	 SHORT $LN19@Extract
$LN18@Extract:

; 632  : 				{	// successor further down, link in place of erased
; 633  : 				_Fixnodeparent = _Pnode->_Parent;	// parent is successor's
; 634  : 				if (!_Fixnode->_Isnil)

  0010f	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00113	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00116	75 03		 jne	 SHORT $LN20@Extract

; 635  : 					{
; 636  : 					_Fixnode->_Parent = _Fixnodeparent;	// link fix up

  00118	89 57 04	 mov	 DWORD PTR [edi+4], edx
$LN20@Extract:

; 637  : 					}
; 638  : 
; 639  : 				_Fixnodeparent->_Left = _Fixnode;	// link fix down

  0011b	89 3a		 mov	 DWORD PTR [edx], edi

; 640  : 				_Pnode->_Right = _Erasednode->_Right;	// link next down

  0011d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0011f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 641  : 				_Erasednode->_Right->_Parent = _Pnode;	// right up

  00122	8b 03		 mov	 eax, DWORD PTR [ebx]
  00124	89 70 04	 mov	 DWORD PTR [eax+4], esi
$LN19@Extract:

; 493  : 		return (_Myhead->_Parent);

  00127	8b 01		 mov	 eax, DWORD PTR [ecx]

; 642  : 				}
; 643  : 
; 644  : 			if (_Root() == _Erasednode)

  00129	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
  0012c	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0012f	75 05		 jne	 SHORT $LN21@Extract

; 645  : 				{
; 646  : 				_Root() = _Pnode;	// link down from root

  00131	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00134	eb 0e		 jmp	 SHORT $LN24@Extract
$LN21@Extract:

; 647  : 				}
; 648  : 			else if (_Erasednode->_Parent->_Left == _Erasednode)

  00136	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00139	39 18		 cmp	 DWORD PTR [eax], ebx
  0013b	75 04		 jne	 SHORT $LN23@Extract

; 649  : 				{
; 650  : 				_Erasednode->_Parent->_Left = _Pnode;	// link down to left

  0013d	89 30		 mov	 DWORD PTR [eax], esi

; 651  : 				}
; 652  : 			else

  0013f	eb 03		 jmp	 SHORT $LN24@Extract
$LN23@Extract:

; 653  : 				{
; 654  : 				_Erasednode->_Parent->_Right = _Pnode;	// link down to right

  00141	89 70 08	 mov	 DWORD PTR [eax+8], esi
$LN24@Extract:

; 655  : 				}
; 656  : 
; 657  : 			_Pnode->_Parent = _Erasednode->_Parent;	// link successor up

  00144	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00147	89 46 04	 mov	 DWORD PTR [esi+4], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\utility

; 68   : 	_Left = _STD move(_Right);

  0014a	8a 43 0c	 mov	 al, BYTE PTR [ebx+12]
  0014d	8a 4e 0c	 mov	 cl, BYTE PTR [esi+12]
  00150	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 69   : 	_Right = _STD move(_Tmp);

  00153	88 4b 0c	 mov	 BYTE PTR [ebx+12], cl
$LN169@Extract:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 661  : 		if (_Erasednode->_Color == this->_Black)

  00156	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
$LN83@Extract:
  00159	80 7b 0c 01	 cmp	 BYTE PTR [ebx+12], 1
  0015d	0f 85 68 01 00
	00		 jne	 $LN25@Extract

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()
; 664  : 				&& _Fixnode->_Color == this->_Black;

  00163	8b 01		 mov	 eax, DWORD PTR [ecx]
  00165	3b 78 04	 cmp	 edi, DWORD PTR [eax+4]
  00168	0f 84 59 01 00
	00		 je	 $LN3@Extract
  0016e	66 90		 npad	 2
$LL4@Extract:
  00170	80 7f 0c 01	 cmp	 BYTE PTR [edi+12], 1
  00174	8b da		 mov	 ebx, edx
  00176	0f 85 48 01 00
	00		 jne	 $LN168@Extract

; 666  : 				if (_Fixnode == _Fixnodeparent->_Left)

  0017c	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0017e	3b f9		 cmp	 edi, ecx
  00180	0f 85 bb 00 00
	00		 jne	 $LN26@Extract

; 667  : 					{	// fixup left subtree
; 668  : 					_Pnode = _Fixnodeparent->_Right;

  00186	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 669  : 					if (_Pnode->_Color == this->_Red)

  00189	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  0018d	75 46		 jne	 SHORT $LN159@Extract

; 670  : 						{	// rotate red up from right subtree
; 671  : 						_Pnode->_Color = this->_Black;

  0018f	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  00193	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 672  : 						_Fixnodeparent->_Color = this->_Red;

  00196	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0019a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0019c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  0019f	8b 01		 mov	 eax, DWORD PTR [ecx]
  001a1	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  001a5	75 03		 jne	 SHORT $LN93@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  001a7	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN93@Extract:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  001aa	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001ad	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  001b0	8b 45 fc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  001b3	8b 00		 mov	 eax, DWORD PTR [eax]
  001b5	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  001b8	75 05		 jne	 SHORT $LN94@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  001ba	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  001bd	eb 0e		 jmp	 SHORT $LN97@Extract
$LN94@Extract:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  001bf	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c2	3b 10		 cmp	 edx, DWORD PTR [eax]
  001c4	75 04		 jne	 SHORT $LN96@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  001c6	89 08		 mov	 DWORD PTR [eax], ecx

; 525  : 			}
; 526  : 		else

  001c8	eb 03		 jmp	 SHORT $LN97@Extract
$LN96@Extract:

; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  001ca	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN97@Extract:

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  001cd	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  001cf	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 673  : 						_Lrotate(_Fixnodeparent);
; 674  : 						_Pnode = _Fixnodeparent->_Right;

  001d2	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
$LN159@Extract:

; 675  : 						}
; 676  : 
; 677  : 					if (_Pnode->_Isnil)

  001d5	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  001d9	0f 85 d2 00 00
	00		 jne	 $LN2@Extract

; 678  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 679  : 					else if (_Pnode->_Left->_Color == this->_Black
; 680  : 						&& _Pnode->_Right->_Color == this->_Black)

  001df	8b 31		 mov	 esi, DWORD PTR [ecx]
  001e1	80 7e 0c 01	 cmp	 BYTE PTR [esi+12], 1
  001e5	75 0d		 jne	 SHORT $LN161@Extract
  001e7	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001ea	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001ee	0f 84 b9 00 00
	00		 je	 $LN170@Extract
$LN161@Extract:

; 681  : 						{	// redden right subtree with black children
; 682  : 						_Pnode->_Color = this->_Red;
; 683  : 						_Fixnode = _Fixnodeparent;
; 684  : 						}
; 685  : 					else
; 686  : 						{	// must rearrange right subtree
; 687  : 						if (_Pnode->_Right->_Color == this->_Black)

  001f4	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001f7	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  001fb	0f 85 06 01 00
	00		 jne	 $LN166@Extract

; 688  : 							{	// rotate red up from left sub-subtree
; 689  : 							_Pnode->_Left->_Color = this->_Black;

  00201	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  00205	8b 31		 mov	 esi, DWORD PTR [ecx]

; 690  : 							_Pnode->_Color = this->_Red;

  00207	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  0020b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0020e	89 01		 mov	 DWORD PTR [ecx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  00210	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00213	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00217	75 03		 jne	 SHORT $LN100@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  00219	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN100@Extract:

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  0021c	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  0021f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00222	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00225	8b 03		 mov	 eax, DWORD PTR [ebx]
  00227	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0022a	0f 85 b4 00 00
	00		 jne	 $LN101@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00230	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00233	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00236	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 691  : 							_Rrotate(_Pnode);
; 692  : 							_Pnode = _Fixnodeparent->_Right;

  00239	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0023c	e9 c9 00 00 00	 jmp	 $LN33@Extract
$LN26@Extract:

; 700  : 						}
; 701  : 					}
; 702  : 				else
; 703  : 					{	// fixup right subtree
; 704  : 					_Pnode = _Fixnodeparent->_Left;
; 705  : 					if (_Pnode->_Color == this->_Red)

  00241	80 79 0c 00	 cmp	 BYTE PTR [ecx+12], 0
  00245	75 47		 jne	 SHORT $LN160@Extract

; 706  : 						{	// rotate red up from left subtree
; 707  : 						_Pnode->_Color = this->_Black;

  00247	c6 41 0c 01	 mov	 BYTE PTR [ecx+12], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  0024b	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 708  : 						_Fixnodeparent->_Color = this->_Red;

  0024d	c6 42 0c 00	 mov	 BYTE PTR [edx+12], 0

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  00251	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00254	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  00256	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00259	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0025d	75 03		 jne	 SHORT $LN114@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  0025f	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN114@Extract:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  00262	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00265	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00268	8b 45 fc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  0026b	8b 00		 mov	 eax, DWORD PTR [eax]
  0026d	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00270	75 05		 jne	 SHORT $LN115@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00272	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00275	eb 0f		 jmp	 SHORT $LN118@Extract
$LN115@Extract:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00277	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0027a	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0027d	75 05		 jne	 SHORT $LN117@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0027f	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 551  : 			}
; 552  : 		else

  00282	eb 02		 jmp	 SHORT $LN118@Extract
$LN117@Extract:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  00284	89 08		 mov	 DWORD PTR [eax], ecx
$LN118@Extract:

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00286	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00289	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 709  : 						_Rrotate(_Fixnodeparent);
; 710  : 						_Pnode = _Fixnodeparent->_Left;

  0028c	8b 0a		 mov	 ecx, DWORD PTR [edx]
$LN160@Extract:

; 711  : 						}
; 712  : 
; 713  : 					if (_Pnode->_Isnil)

  0028e	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00292	75 1d		 jne	 SHORT $LN2@Extract

; 714  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 715  : 					else if (_Pnode->_Right->_Color == this->_Black
; 716  : 						&& _Pnode->_Left->_Color == this->_Black)

  00294	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00297	80 7e 0c 01	 cmp	 BYTE PTR [esi+12], 1
  0029b	0f 85 d0 00 00
	00		 jne	 $LN162@Extract
  002a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  002a3	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  002a7	0f 85 c4 00 00
	00		 jne	 $LN162@Extract
$LN170@Extract:

; 665  : 				_Fixnodeparent = _Fixnode->_Parent)

  002ad	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0
$LN2@Extract:

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root()
; 664  : 				&& _Fixnode->_Color == this->_Black;

  002b1	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  002b4	8b fb		 mov	 edi, ebx

; 665  : 				_Fixnodeparent = _Fixnode->_Parent)

  002b6	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  002b9	8b 01		 mov	 eax, DWORD PTR [ecx]
  002bb	3b 58 04	 cmp	 ebx, DWORD PTR [eax+4]
  002be	0f 85 ac fe ff
	ff		 jne	 $LL4@Extract
$LN168@Extract:

; 734  : 						_Rrotate(_Fixnodeparent);
; 735  : 						break;	// tree now recolored/rebalanced
; 736  : 						}
; 737  : 					}
; 738  : 
; 739  : 			_Fixnode->_Color = this->_Black;	// stopping node is black

  002c4	8b 5d f8	 mov	 ebx, DWORD PTR __Erasednode$1$[ebp]
$LN3@Extract:
  002c7	c6 47 0c 01	 mov	 BYTE PTR [edi+12], 1
$LN25@Extract:

; 740  : 			}
; 741  : 
; 742  : 		if (0 < _Mysize)

  002cb	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  002ce	5f		 pop	 edi
  002cf	85 c9		 test	 ecx, ecx
  002d1	74 07		 je	 SHORT $LN164@Extract

; 743  : 			--_Mysize;

  002d3	8b 45 fc	 mov	 eax, DWORD PTR _this$GSCopy$1$[ebp]
  002d6	49		 dec	 ecx
  002d7	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN164@Extract:

; 744  : 
; 745  : 		return (_Erasednode);
; 746  : 		}

  002da	5e		 pop	 esi
  002db	8b c3		 mov	 eax, ebx
  002dd	5b		 pop	 ebx
  002de	8b e5		 mov	 esp, ebp
  002e0	5d		 pop	 ebp
  002e1	c2 04 00	 ret	 4
$LN101@Extract:

; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  002e4	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002e7	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  002ea	75 0e		 jne	 SHORT $LN103@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  002ec	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  002ef	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  002f2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 691  : 							_Rrotate(_Pnode);
; 692  : 							_Pnode = _Fixnodeparent->_Right;

  002f5	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  002f8	eb 10		 jmp	 SHORT $LN33@Extract
$LN103@Extract:

; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  002fa	89 30		 mov	 DWORD PTR [eax], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  002fc	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 558  : 		_Wherenode->_Parent = _Pnode;

  002ff	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 691  : 							_Rrotate(_Pnode);
; 692  : 							_Pnode = _Fixnodeparent->_Right;

  00302	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00305	eb 03		 jmp	 SHORT $LN33@Extract
$LN166@Extract:

; 681  : 						{	// redden right subtree with black children
; 682  : 						_Pnode->_Color = this->_Red;
; 683  : 						_Fixnode = _Fixnodeparent;
; 684  : 						}
; 685  : 					else
; 686  : 						{	// must rearrange right subtree
; 687  : 						if (_Pnode->_Right->_Color == this->_Black)

  00307	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN33@Extract:

; 693  : 							}
; 694  : 
; 695  : 						_Pnode->_Color = _Fixnodeparent->_Color;

  0030a	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  0030d	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 696  : 						_Fixnodeparent->_Color = this->_Black;

  00310	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 697  : 						_Pnode->_Right->_Color = this->_Black;

  00314	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00317	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  0031b	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0031e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00320	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  00323	8b 01		 mov	 eax, DWORD PTR [ecx]
  00325	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00329	75 03		 jne	 SHORT $LN107@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  0032b	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN107@Extract:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0032e	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00331	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00334	8b 03		 mov	 eax, DWORD PTR [ebx]
  00336	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00339	75 10		 jne	 SHORT $LN108@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  0033b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  0033e	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  00340	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 698  : 						_Lrotate(_Fixnodeparent);
; 699  : 						break;	// tree now recolored/rebalanced

  00343	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00346	e9 79 ff ff ff	 jmp	 $LN168@Extract
$LN108@Extract:

; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  0034b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0034e	3b 10		 cmp	 edx, DWORD PTR [eax]
  00350	75 0f		 jne	 SHORT $LN110@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  00352	89 08		 mov	 DWORD PTR [eax], ecx

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  00354	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  00356	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 698  : 						_Lrotate(_Fixnodeparent);
; 699  : 						break;	// tree now recolored/rebalanced

  00359	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0035c	e9 63 ff ff ff	 jmp	 $LN168@Extract
$LN110@Extract:

; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  00361	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  00364	89 11		 mov	 DWORD PTR [ecx], edx

; 532  : 		_Wherenode->_Parent = _Pnode;

  00366	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 698  : 						_Lrotate(_Fixnodeparent);
; 699  : 						break;	// tree now recolored/rebalanced

  00369	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0036c	e9 53 ff ff ff	 jmp	 $LN168@Extract
$LN162@Extract:

; 717  : 						{	// redden left subtree with black children
; 718  : 						_Pnode->_Color = this->_Red;
; 719  : 						_Fixnode = _Fixnodeparent;
; 720  : 						}
; 721  : 					else
; 722  : 						{	// must rearrange left subtree
; 723  : 						if (_Pnode->_Left->_Color == this->_Black)

  00371	8b 01		 mov	 eax, DWORD PTR [ecx]
  00373	80 78 0c 01	 cmp	 BYTE PTR [eax+12], 1
  00377	75 55		 jne	 SHORT $LN167@Extract

; 724  : 							{	// rotate red up from right sub-subtree
; 725  : 							_Pnode->_Right->_Color = this->_Black;

  00379	c6 46 0c 01	 mov	 BYTE PTR [esi+12], 1

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  0037d	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 726  : 							_Pnode->_Color = this->_Red;

  00380	c6 41 0c 00	 mov	 BYTE PTR [ecx+12], 0

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  00384	8b 06		 mov	 eax, DWORD PTR [esi]
  00386	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  00389	8b 06		 mov	 eax, DWORD PTR [esi]
  0038b	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0038f	75 03		 jne	 SHORT $LN121@Extract

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  00391	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN121@Extract:

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00394	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
  00397	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0039a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0039d	8b 03		 mov	 eax, DWORD PTR [ebx]
  0039f	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  003a2	75 0c		 jne	 SHORT $LN122@Extract

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  003a4	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  003a7	89 0e		 mov	 DWORD PTR [esi], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  003a9	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 727  : 							_Lrotate(_Pnode);
; 728  : 							_Pnode = _Fixnodeparent->_Left;

  003ac	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003ae	eb 21		 jmp	 SHORT $LN39@Extract
$LN122@Extract:

; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  003b0	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  003b3	3b 08		 cmp	 ecx, DWORD PTR [eax]
  003b5	75 0b		 jne	 SHORT $LN124@Extract

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  003b7	89 30		 mov	 DWORD PTR [eax], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  003b9	89 0e		 mov	 DWORD PTR [esi], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  003bb	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 727  : 							_Lrotate(_Pnode);
; 728  : 							_Pnode = _Fixnodeparent->_Left;

  003be	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003c0	eb 0f		 jmp	 SHORT $LN39@Extract
$LN124@Extract:

; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  003c2	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;

  003c5	89 0e		 mov	 DWORD PTR [esi], ecx

; 532  : 		_Wherenode->_Parent = _Pnode;

  003c7	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 727  : 							_Lrotate(_Pnode);
; 728  : 							_Pnode = _Fixnodeparent->_Left;

  003ca	8b 0a		 mov	 ecx, DWORD PTR [edx]
  003cc	eb 03		 jmp	 SHORT $LN39@Extract
$LN167@Extract:

; 717  : 						{	// redden left subtree with black children
; 718  : 						_Pnode->_Color = this->_Red;
; 719  : 						_Fixnode = _Fixnodeparent;
; 720  : 						}
; 721  : 					else
; 722  : 						{	// must rearrange left subtree
; 723  : 						if (_Pnode->_Left->_Color == this->_Black)

  003ce	8b 5d fc	 mov	 ebx, DWORD PTR _this$GSCopy$1$[ebp]
$LN39@Extract:

; 729  : 							}
; 730  : 
; 731  : 						_Pnode->_Color = _Fixnodeparent->_Color;

  003d1	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  003d4	88 41 0c	 mov	 BYTE PTR [ecx+12], al

; 732  : 						_Fixnodeparent->_Color = this->_Black;

  003d7	c6 42 0c 01	 mov	 BYTE PTR [edx+12], 1

; 733  : 						_Pnode->_Left->_Color = this->_Black;

  003db	8b 01		 mov	 eax, DWORD PTR [ecx]
  003dd	c6 40 0c 01	 mov	 BYTE PTR [eax+12], 1

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  003e1	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  003e3	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  003e6	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  003e8	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  003eb	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  003ef	75 03		 jne	 SHORT $LN128@Extract

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  003f1	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN128@Extract:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  003f4	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  003f7	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  003fa	8b 03		 mov	 eax, DWORD PTR [ebx]
  003fc	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  003ff	75 11		 jne	 SHORT $LN129@Extract

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00401	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  00404	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00407	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0040a	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  0040d	e9 b2 fe ff ff	 jmp	 $LN168@Extract
$LN129@Extract:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00412	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00415	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00418	75 11		 jne	 SHORT $LN131@Extract

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0041a	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  0041d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00420	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00423	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00426	e9 99 fe ff ff	 jmp	 $LN168@Extract
$LN131@Extract:

; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  0042b	89 08		 mov	 DWORD PTR [eax], ecx

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;

  0042d	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 558  : 		_Wherenode->_Parent = _Pnode;

  00430	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00433	8b 4d fc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
  00436	e9 89 fe ff ff	 jmp	 $LN168@Extract
?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Extract
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Rmost, COMDAT
; _this$ = ecx

; 503  : 		return (_Myhead->_Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 08	 add	 eax, 8

; 504  : 		}

  00005	c3		 ret	 0
?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Rmost
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Root, COMDAT
; _this$ = ecx

; 493  : 		return (_Myhead->_Parent);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 04	 add	 eax, 4

; 494  : 		}

  00005	c3		 ret	 0
?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QBEAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Root
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Erase, COMDAT
; _this$ = ecx

; 2019 : 		{	// free entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b 7d 08	 mov	 edi, DWORD PTR __Rootnode$[ebp]
  00009	8b d9		 mov	 ebx, ecx

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0000b	8b f7		 mov	 esi, edi
  0000d	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0
  00011	75 1f		 jne	 SHORT $LN3@Erase
$LL4@Erase:

; 2021 : 			{	// free subtrees, then node
; 2022 : 			_Erase(_Pnode->_Right);

  00013	ff 76 08	 push	 DWORD PTR [esi+8]
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Erase

; 2023 : 			_Pnode = _Pnode->_Left;

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0001f	6a 18		 push	 24			; 00000018H
  00021	57		 push	 edi
  00022	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00027	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 2020 : 		for (_Nodeptr _Pnode = _Rootnode; !_Pnode->_Isnil; _Rootnode = _Pnode)

  0002a	8b fe		 mov	 edi, esi
  0002c	80 7e 0d 00	 cmp	 BYTE PTR [esi+13], 0
  00030	74 e1		 je	 SHORT $LL4@Erase
$LN3@Erase:
  00032	5f		 pop	 edi

; 2024 : 			_Alnode& _Al = this->_Getal();
; 2025 : 			_Alnode_traits::destroy(_Al, _STD addressof(_Rootnode->_Myval));
; 2026 : 			_Node::_Freenode0(_Al, _Rootnode);
; 2027 : 			}
; 2028 : 		}

  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	5d		 pop	 ebp
  00036	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Rrotate, COMDAT
; _this$ = ecx

; 536  : 		{	// promote left node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 537  : 		_Nodeptr _Pnode = _Wherenode->_Left;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]

; 538  : 		_Wherenode->_Left = _Pnode->_Right;

  00009	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000c	89 02		 mov	 DWORD PTR [edx], eax

; 539  : 
; 540  : 		if (!_Pnode->_Right->_Isnil)

  0000e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Rrotate

; 541  : 			_Pnode->_Right->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Rrotate:

; 542  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 543  : 
; 544  : 		if (_Wherenode == _Myhead->_Parent)

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0e		 jne	 SHORT $LN3@Rrotate

; 545  : 			{
; 546  : 			_Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  0002a	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0002d	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00030	5e		 pop	 esi
  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
$LN3@Rrotate:

; 547  : 			}
; 548  : 		else if (_Wherenode == _Wherenode->_Parent->_Right)

  00035	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00038	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  0003b	75 0e		 jne	 SHORT $LN5@Rrotate

; 549  : 			{
; 550  : 			_Wherenode->_Parent->_Right = _Pnode;

  0003d	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  00040	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00043	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00046	5e		 pop	 esi
  00047	5d		 pop	 ebp
  00048	c2 04 00	 ret	 4
$LN5@Rrotate:

; 551  : 			}
; 552  : 		else
; 553  : 			{
; 554  : 			_Wherenode->_Parent->_Left = _Pnode;

  0004b	89 30		 mov	 DWORD PTR [eax], esi

; 555  : 			}
; 556  : 
; 557  : 		_Pnode->_Right = _Wherenode;
; 558  : 		_Wherenode->_Parent = _Pnode;
; 559  : 		}

  0004d	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00050	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00053	5e		 pop	 esi
  00054	5d		 pop	 ebp
  00055	c2 04 00	 ret	 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Lrotate, COMDAT
; _this$ = ecx

; 507  : 		{	// promote right node to root of subtree

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 508  : 		_Nodeptr _Pnode = _Wherenode->_Right;

  00003	8b 55 08	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00006	56		 push	 esi
  00007	8b 72 08	 mov	 esi, DWORD PTR [edx+8]

; 509  : 		_Wherenode->_Right = _Pnode->_Left;

  0000a	8b 06		 mov	 eax, DWORD PTR [esi]
  0000c	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 510  : 
; 511  : 		if (!_Pnode->_Left->_Isnil)

  0000f	8b 06		 mov	 eax, DWORD PTR [esi]
  00011	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00015	75 03		 jne	 SHORT $LN2@Lrotate

; 512  : 			{
; 513  : 			_Pnode->_Left->_Parent = _Wherenode;

  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN2@Lrotate:

; 514  : 			}
; 515  : 
; 516  : 		_Pnode->_Parent = _Wherenode->_Parent;

  0001a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0001d	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 517  : 
; 518  : 		if (_Wherenode == _Myhead->_Parent)

  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	3b 50 04	 cmp	 edx, DWORD PTR [eax+4]
  00025	75 0d		 jne	 SHORT $LN3@Lrotate

; 519  : 			{
; 520  : 			_Myhead->_Parent = _Pnode;

  00027	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0002a	89 16		 mov	 DWORD PTR [esi], edx
  0002c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0002f	5e		 pop	 esi
  00030	5d		 pop	 ebp
  00031	c2 04 00	 ret	 4
$LN3@Lrotate:

; 521  : 			}
; 522  : 		else if (_Wherenode == _Wherenode->_Parent->_Left)

  00034	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00037	3b 10		 cmp	 edx, DWORD PTR [eax]
  00039	75 0c		 jne	 SHORT $LN5@Lrotate

; 523  : 			{
; 524  : 			_Wherenode->_Parent->_Left = _Pnode;

  0003b	89 30		 mov	 DWORD PTR [eax], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0003d	89 16		 mov	 DWORD PTR [esi], edx
  0003f	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN5@Lrotate:

; 525  : 			}
; 526  : 		else
; 527  : 			{
; 528  : 			_Wherenode->_Parent->_Right = _Pnode;

  00047	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 529  : 			}
; 530  : 
; 531  : 		_Pnode->_Left = _Wherenode;
; 532  : 		_Wherenode->_Parent = _Pnode;
; 533  : 		}

  0004a	89 16		 mov	 DWORD PTR [esi], edx
  0004c	89 72 04	 mov	 DWORD PTR [edx+4], esi
  0004f	5e		 pop	 esi
  00050	5d		 pop	 ebp
  00051	c2 04 00	 ret	 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Max, COMDAT
; __Pnode$ = ecx

; 479  : 		while (!_Pnode->_Right->_Isnil)

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00007	75 12		 jne	 SHORT $LN9@Max
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL2@Max:

; 480  : 			_Pnode = _Pnode->_Right;

  00010	8b c8		 mov	 ecx, eax
  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00015	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00019	74 f5		 je	 SHORT $LL2@Max
$LN9@Max:

; 481  : 		return (_Pnode);
; 482  : 		}

  0001b	8b c1		 mov	 eax, ecx
  0001d	c3		 ret	 0
?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z PROC ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >, COMDAT
; _this$ = ecx

; 436  : 		constexpr _Unused_parameter(_Ty&&) noexcept {}

  00000	8b c1		 mov	 eax, ecx
  00002	c2 04 00	 ret	 4
??$?0U?$integral_constant@_N$00@std@@@_Unused_parameter@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Unused_parameter::_Unused_parameter<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_<_Val_0>$ = 8						; size = 4
??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buynode<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>, COMDAT
; _this$ = ecx

; 976  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 977  : 		_Nodeptr _Pnode = _Buynode0();

  0002b	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buynode0
  00030	8b f0		 mov	 esi, eax

; 980  : 		_Pnode->_Isnil = false;
; 981  : 
; 982  : 		_TRY_BEGIN

  00032	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

  00039	8b 45 08	 mov	 eax, DWORD PTR _<_Val_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 977  : 		_Nodeptr _Pnode = _Buynode0();

  0003c	89 75 ec	 mov	 DWORD PTR __Pnode$[ebp], esi

; 978  : 
; 979  : 		_Pnode->_Color = _Red;

  0003f	66 c7 46 0c 00
	00		 mov	 WORD PTR [esi+12], 0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	83 c0 04	 add	 eax, 4
  0004a	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  0004d	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 990  : 		return (_Pnode);

  00056	8b c6		 mov	 eax, esi

; 991  : 		}

  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
__catch$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z$0:

; 983  : 		_Alnode_traits::construct(_Getal(),
; 984  : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 985  : 		_CATCH_ALL
; 986  : 		_Freenode0(_Pnode);

  0006c	ff 75 ec	 push	 DWORD PTR __Pnode$[ebp]
  0006f	e8 00 00 00 00	 call	 ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Freenode0

; 987  : 		_RERAISE;

  00074	6a 00		 push	 0
  00076	6a 00		 push	 0
  00078	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN28@Buynode:
  0007d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Buynode@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@1@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buynode<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >, COMDAT
; __Al$dead$ = ecx
; __Ptr$ = edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00000	6a 18		 push	 24			; 00000018H
  00002	52		 push	 edx
  00003	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00008	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 415  : 			}

  0000b	c3		 ret	 0
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@YAPAU?$pair@$$CBW4ImportType@SegmentHeader@@K@0@AAU10@@Z
_TEXT	SEGMENT
??$addressof@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@YAPAU?$pair@$$CBW4ImportType@SegmentHeader@@K@0@AAU10@@Z PROC ; std::addressof<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@YAPAU?$pair@$$CBW4ImportType@SegmentHeader@@K@0@AAU10@@Z ENDP ; std::addressof<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z
_TEXT	SEGMENT
??$destroy@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::destroy<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::destroy<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Freenode0, COMDAT
; _this$dead$ = ecx

; 970  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00006	6a 20		 push	 32			; 00000020H
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 972  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buynode0, COMDAT
; _this$ = ecx

; 951  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00001	6a 20		 push	 32			; 00000020H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 951  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000a	8b 16		 mov	 edx, DWORD PTR [esi]

; 52   : 		return (::operator new(_Bytes));

  0000c	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00018	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 966  : 		return (_Pnode);

  0001b	5e		 pop	 esi

; 967  : 		}

  0001c	c3		 ret	 0
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::deallocate, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 871  : 		{	// deallocate _Count elements at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 207  : 	::operator delete(_Ptr, _Bytes);

  00003	6a 18		 push	 24			; 00000018H
  00005	52		 push	 edx
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8

; 872  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 873  : 		_Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);
; 874  : 		}

  0000e	5d		 pop	 ebp
  0000f	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@YAAAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@YAAAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@0@AAU10@@Z PROC ; std::forward<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@YAAAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@AAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@AAU31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@AAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@AAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::construct<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	89 02		 mov	 DWORD PTR [edx], eax
  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000d	50		 push	 eax
  0000e	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  00011	e8 00 00 00 00	 call	 ??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

  00016	5d		 pop	 ebp
  00017	c3		 ret	 0
??$construct@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@AAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@1@QAU?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@1@AAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> > >::construct<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xstddef
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$addressof@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> *>, COMDAT
; __Val$ = ecx

; 330  : 	return (__builtin_addressof(_Val));

  00000	8b c1		 mov	 eax, ecx

; 331  : 	}

  00002	c3		 ret	 0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$destroy@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@@Z
_TEXT	SEGMENT
??$destroy@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::destroy<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> *>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$dead$ = edx

; 887  : 		_Ptr->~_Uty();
; 888  : 		}

  00000	c3		 ret	 0
??$destroy@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::destroy<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
;	COMDAT ??0?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@ABU01@@Z PROC ; std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >, COMDAT
; _this$ = ecx

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000d	8b 02		 mov	 eax, DWORD PTR [edx]
  0000f	89 06		 mov	 DWORD PTR [esi], eax
  00011	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00014	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 ??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??0?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@ABU01@@Z ENDP ; std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$GSCopy$ = -40					; size = 4
$T68 = -36						; size = 4
__Backout$69 = -32					; size = 12
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Right$ = 8						; size = 4
??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	8b d9		 mov	 ebx, ecx
  00030	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00033	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH

; 389  : 		: _Myfirst(),

  00038	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 390  : 		_Mylast(),

  0003e	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 391  : 		_Myend()

  00045	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0004c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0004f	2b 0e		 sub	 ecx, DWORD PTR [esi]
  00051	f7 e9		 imul	 ecx

; 735  : 		if (_Buy(_Right.size()))

  00053	8b cb		 mov	 ecx, ebx
  00055	89 5d d8	 mov	 DWORD PTR _this$GSCopy$[ebp], ebx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00058	d1 fa		 sar	 edx, 1
  0005a	8b c2		 mov	 eax, edx
  0005c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0005f	03 c2		 add	 eax, edx

; 735  : 		if (_Buy(_Right.size()))

  00061	50		 push	 eax
  00062	e8 00 00 00 00	 call	 ?_Buy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAE_NI@Z ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Buy
  00067	84 c0		 test	 al, al
  00069	74 53		 je	 SHORT $LN5@vector

; 736  : 			{	// nonzero, fill it
; 737  : 			_TRY_BEGIN

  0006b	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00072	0f 57 c0	 xorps	 xmm0, xmm0

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

  00075	8b 3b		 mov	 edi, DWORD PTR [ebx]
  00077	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0007a	8b 36		 mov	 esi, DWORD PTR [esi]
  0007c	66 0f d6 45 e0	 movq	 QWORD PTR __Backout$69[ebp], xmm0
  00081	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Backout$69[ebp+8], 0
  00088	89 45 dc	 mov	 DWORD PTR $T68[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 147  : 		: _First(_Dest),

  0008b	89 7d e0	 mov	 DWORD PTR __Backout$69[ebp], edi

; 148  : 		_Last(_Dest),

  0008e	89 7d e4	 mov	 DWORD PTR __Backout$69[ebp+4], edi

; 149  : 		_Al(_Al_)

  00091	89 5d e8	 mov	 DWORD PTR __Backout$69[ebp+8], ebx

; 187  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

  00094	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
$LL80@vector:

; 188  : 	for (; _First != _Last; ++_First)

  00098	3b f0		 cmp	 esi, eax
  0009a	74 1f		 je	 SHORT $LN79@vector
  0009c	8b 06		 mov	 eax, DWORD PTR [esi]
  0009e	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  000a1	89 07		 mov	 DWORD PTR [edi], eax
  000a3	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 483  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  000a6	51		 push	 ecx
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 188  : 	for (; _First != _Last; ++_First)

  000ad	8b 45 dc	 mov	 eax, DWORD PTR $T68[ebp]

; 165  : 		++_Last;

  000b0	83 c7 0c	 add	 edi, 12			; 0000000cH
  000b3	89 7d e4	 mov	 DWORD PTR __Backout$69[ebp+4], edi

; 188  : 	for (; _First != _Last; ++_First)

  000b6	83 c6 0c	 add	 esi, 12			; 0000000cH
  000b9	eb dd		 jmp	 SHORT $LL80@vector
$LN79@vector:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

  000bb	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
$LN5@vector:

; 742  : 			_CATCH_END
; 743  : 			}
; 744  : 		}

  000be	8b c3		 mov	 eax, ebx
  000c0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000ca	59		 pop	 ecx
  000cb	5f		 pop	 edi
  000cc	5e		 pop	 esi
  000cd	5b		 pop	 ebx
  000ce	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d1	33 cd		 xor	 ecx, ebp
  000d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d8	8b e5		 mov	 esp, ebp
  000da	5d		 pop	 ebp
  000db	c2 04 00	 ret	 4
__catch$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z$0:

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();

  000de	8b 4d d8	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  000e1	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Tidy

; 741  : 			_RERAISE;

  000e6	6a 00		 push	 0
  000e8	6a 00		 push	 0
  000ea	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN218@vector:
  000ef	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z$2:
  00000	8d 4d e0	 lea	 ecx, DWORD PTR __Backout$69[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::~_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
__ehhandler$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a d4	 mov	 ecx, DWORD PTR [edx-44]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SA?AV?$allocator@UImportInfo@SegmentHeader@@@2@ABV32@@Z
_TEXT	SEGMENT
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SA?AV?$allocator@UImportInfo@SegmentHeader@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::select_on_container_copy_construction, COMDAT
; ___$ReturnUdt$ = ecx
; __Al$dead$ = edx

; 897  : 		return (_Al);

  00000	8b c1		 mov	 eax, ecx

; 898  : 		}

  00002	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SA?AV?$allocator@UImportInfo@SegmentHeader@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABV?$allocator@UImportInfo@SegmentHeader@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABV?$allocator@UImportInfo@SegmentHeader@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Getal, COMDAT
; _this$ = ecx

; 550  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 551  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QBEABV?$allocator@UImportInfo@SegmentHeader@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAE_NI@Z PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1873 : 		this->_Myfirst() = pointer();
; 1874 : 		this->_Mylast() = pointer();
; 1875 : 		this->_Myend() = pointer();
; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

  00003	8b 45 08	 mov	 eax, DWORD PTR __Newcapacity$[ebp]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  0000f	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00016	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001d	85 c0		 test	 eax, eax
  0001f	75 07		 jne	 SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

  00021	32 c0		 xor	 al, al
  00023	5e		 pop	 esi

; 1892 : 		}

  00024	5d		 pop	 ebp
  00025	c2 04 00	 ret	 4
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

  00028	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  0002d	0f 87 83 00 00
	00		 ja	 $LN99@Buy
  00033	57		 push	 edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00034	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  00037	c1 e7 02	 shl	 edi, 2

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  0003a	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  00040	72 3d		 jb	 SHORT $LN45@Buy

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00042	8d 47 23	 lea	 eax, DWORD PTR [edi+35]

; 94   : 	if (_Block_size <= _Bytes)

  00045	83 c9 ff	 or	 ecx, -1
  00048	3b c7		 cmp	 eax, edi
  0004a	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00053	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00055	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00058	85 c9		 test	 ecx, ecx
  0005a	74 1d		 je	 SHORT $LN54@Buy

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0005c	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0005f	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00062	89 48 fc	 mov	 DWORD PTR [eax-4], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00065	89 06		 mov	 DWORD PTR [esi], eax

; 1888 : 		this->_Mylast() = this->_Myfirst();

  00067	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	03 c7		 add	 eax, edi
  0006e	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  00071	b0 01		 mov	 al, 1
  00073	5f		 pop	 edi
  00074	5e		 pop	 esi

; 1892 : 		}

  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
$LN54@Buy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN45@Buy:

; 188  : 	if (_Bytes != 0)

  0007f	85 ff		 test	 edi, edi
  00081	74 1d		 je	 SHORT $LN46@Buy

; 52   : 		return (::operator new(_Bytes));

  00083	57		 push	 edi
  00084	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00089	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  0008b	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1888 : 		this->_Mylast() = this->_Myfirst();

  0008e	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
  00093	03 c7		 add	 eax, edi
  00095	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  00098	b0 01		 mov	 al, 1
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi

; 1892 : 		}

  0009c	5d		 pop	 ebp
  0009d	c2 04 00	 ret	 4
$LN46@Buy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 193  : 	return (nullptr);

  000a0	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  000a2	89 06		 mov	 DWORD PTR [esi], eax

; 1888 : 		this->_Mylast() = this->_Myfirst();

  000a4	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  000a7	8b 06		 mov	 eax, DWORD PTR [esi]
  000a9	03 c7		 add	 eax, edi
  000ab	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  000ae	b0 01		 mov	 al, 1
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi

; 1892 : 		}

  000b2	5d		 pop	 ebp
  000b3	c2 04 00	 ret	 4
$LN99@Buy:

; 1883 : 			{
; 1884 : 			_Xlength();

  000b6	e8 00 00 00 00	 call	 ?_Xlength@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@CAXXZ ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Xlength
$LN97@Buy:
  000bb	cc		 int	 3
?_Buy@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAE_NI@Z ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Buy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::size, COMDAT
; _this$ = ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00008	2b 11		 sub	 edx, DWORD PTR [ecx]
  0000a	f7 ea		 imul	 edx
  0000c	d1 fa		 sar	 edx, 1
  0000e	8b c2		 mov	 eax, edx
  00010	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00013	03 c2		 add	 eax, edx

; 1705 : 		}

  00015	c3		 ret	 0
?size@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QBEABV?$allocator@UImportInfo@SegmentHeader@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QBEABV?$allocator@UImportInfo@SegmentHeader@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QBEABV?$allocator@UImportInfo@SegmentHeader@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::max_size, COMDAT
; _this$dead$ = ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QBEIXZ ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@UImportInfo@SegmentHeader@@@std@@QAEPAUImportInfo@SegmentHeader@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UImportInfo@SegmentHeader@@@std@@QAEPAUImportInfo@SegmentHeader@@I@Z PROC ; std::allocator<SegmentHeader::ImportInfo>::allocate, COMDAT
; _this$dead$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00009	c1 e1 02	 shl	 ecx, 2

; 26   : 	if (_Max_possible < _Count)

  0000c	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00011	76 05		 jbe	 SHORT $LN4@allocate

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00013	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00016	eb 08		 jmp	 SHORT $LN27@allocate
$LN4@allocate:
  00018	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001e	72 2d		 jb	 SHORT $LN7@allocate
$LN27@allocate:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00020	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00023	83 ca ff	 or	 edx, -1
  00026	3b c1		 cmp	 eax, ecx
  00028	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00031	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00033	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00036	85 c9		 test	 ecx, ecx
  00038	74 0d		 je	 SHORT $LN16@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0003a	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003d	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00040	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
$LN16@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@allocate:

; 188  : 	if (_Bytes != 0)

  0004d	85 c9		 test	 ecx, ecx
  0004f	74 0d		 je	 SHORT $LN8@allocate

; 52   : 		return (::operator new(_Bytes));

  00051	51		 push	 ecx
  00052	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00057	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0005a	5d		 pop	 ebp
  0005b	c2 04 00	 ret	 4
$LN8@allocate:

; 193  : 	return (nullptr);

  0005e	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00060	5d		 pop	 ebp
  00061	c2 04 00	 ret	 4
$LN28@allocate:
?allocate@?$allocator@UImportInfo@SegmentHeader@@@std@@QAEPAUImportInfo@SegmentHeader@@I@Z ENDP ; std::allocator<SegmentHeader::ImportInfo>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAIABV?$allocator@UImportInfo@SegmentHeader@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAIABV?$allocator@UImportInfo@SegmentHeader@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 893  : 		}

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAIABV?$allocator@UImportInfo@SegmentHeader@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@UImportInfo@SegmentHeader@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$?0V?$allocator@UImportInfo@SegmentHeader@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > ><std::allocator<SegmentHeader::ImportInfo>,void>, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 431  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 431  : 		}

  00016	c2 04 00	 ret	 4
??$?0V?$allocator@UImportInfo@SegmentHeader@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@QAE@$$QAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >::_Vector_alloc<std::_Vec_base_types<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > ><std::allocator<SegmentHeader::ImportInfo>,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z
_TEXT	SEGMENT
__Backout$38 = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z PROC ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Ucopy<SegmentHeader::ImportInfo *>, COMDAT
; _this$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 147  : 		: _First(_Dest),

  0002b	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0002e	0f 57 c0	 xorps	 xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

  00031	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00034	66 0f d6 45 e4	 movq	 QWORD PTR __Backout$38[ebp], xmm0
  00039	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Backout$38[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 147  : 		: _First(_Dest),

  00040	89 7d e4	 mov	 DWORD PTR __Backout$38[ebp], edi

; 148  : 		_Last(_Dest),

  00043	89 7d e8	 mov	 DWORD PTR __Backout$38[ebp+4], edi

; 149  : 		_Al(_Al_)

  00046	89 4d ec	 mov	 DWORD PTR __Backout$38[ebp+8], ecx

; 188  : 	for (; _First != _Last; ++_First)

  00049	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0004c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00053	3b f3		 cmp	 esi, ebx
  00055	74 1e		 je	 SHORT $LN155@Ucopy
$LL24@Ucopy:
  00057	8b 06		 mov	 eax, DWORD PTR [esi]
  00059	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 483  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  0005b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0005e	51		 push	 ecx
  0005f	50		 push	 eax
  00060	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00063	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  00068	83 c7 0c	 add	 edi, 12			; 0000000cH

; 188  : 	for (; _First != _Last; ++_First)

  0006b	83 c6 0c	 add	 esi, 12			; 0000000cH

; 165  : 		++_Last;

  0006e	89 7d e8	 mov	 DWORD PTR __Backout$38[ebp+4], edi

; 188  : 	for (; _First != _Last; ++_First)

  00071	3b f3		 cmp	 esi, ebx
  00073	75 e2		 jne	 SHORT $LL24@Ucopy
$LN155@Ucopy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1824 : 		}

  00075	8b c7		 mov	 eax, edi
  00077	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00081	59		 pop	 ecx
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00088	33 cd		 xor	 ecx, ebp
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$38[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::~_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
__ehhandler$??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Ucopy@PAUImportInfo@SegmentHeader@@@?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@AAEPAUImportInfo@SegmentHeader@@PAU23@00@Z ENDP ; std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >::_Ucopy<SegmentHeader::ImportInfo *>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0M@@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$0M@@std@@YAII@Z PROC			; std::_Get_size_of_n<12>, COMDAT
; __Count$ = ecx

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;

  00000	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]

; 26   : 	if (_Max_possible < _Count)

  00003	83 ca ff	 or	 edx, -1
  00006	c1 e0 02	 shl	 eax, 2
  00009	81 f9 55 55 55
	15		 cmp	 ecx, 357913941		; 15555555H
  0000f	0f 47 c2	 cmova	 eax, edx

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

  00012	c3		 ret	 0
??$_Get_size_of_n@$0M@@std@@YAII@Z ENDP			; std::_Get_size_of_n<12>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YA$$QAV?$allocator@UImportInfo@SegmentHeader@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YA$$QAV?$allocator@UImportInfo@SegmentHeader@@@0@AAV10@@Z PROC ; std::forward<std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YA$$QAV?$allocator@UImportInfo@SegmentHeader@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<SegmentHeader::ImportInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@UImportInfo@SegmentHeader@@@std@@$$V@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0V?$allocator@UImportInfo@SegmentHeader@@@std@@$$V@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1><std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00016	c2 08 00	 ret	 8
??$?0V?$allocator@UImportInfo@SegmentHeader@@@std@@$$V@?$_Compressed_pair@V?$allocator@UImportInfo@SegmentHeader@@@std@@V?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1>::_Compressed_pair<std::allocator<SegmentHeader::ImportInfo>,std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >,1><std::allocator<SegmentHeader::ImportInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z
_TEXT	SEGMENT
__Backout$35 = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Dest$ = 8						; size = 4
__Al$ = 12						; size = 4
??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z PROC ; std::_Uninitialized_copy<SegmentHeader::ImportInfo *,SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b da		 mov	 ebx, edx
  0002d	8b f1		 mov	 esi, ecx

; 147  : 		: _First(_Dest),

  0002f	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0

; 149  : 		_Al(_Al_)

  00035	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  00038	66 0f d6 45 e4	 movq	 QWORD PTR __Backout$35[ebp], xmm0
  0003d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Backout$35[ebp+8], 0

; 147  : 		: _First(_Dest),

  00044	89 7d e4	 mov	 DWORD PTR __Backout$35[ebp], edi

; 148  : 		_Last(_Dest),

  00047	89 7d e8	 mov	 DWORD PTR __Backout$35[ebp+4], edi

; 149  : 		_Al(_Al_)

  0004a	89 45 ec	 mov	 DWORD PTR __Backout$35[ebp+8], eax

; 187  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 188  : 	for (; _First != _Last; ++_First)

  00054	3b f3		 cmp	 esi, ebx
  00056	74 1e		 je	 SHORT $LN148@Uninitiali
$LL18@Uninitiali:
  00058	8b 06		 mov	 eax, DWORD PTR [esi]
  0005a	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 483  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  0005c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0005f	51		 push	 ecx
  00060	50		 push	 eax
  00061	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00064	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  00069	83 c7 0c	 add	 edi, 12			; 0000000cH

; 188  : 	for (; _First != _Last; ++_First)

  0006c	83 c6 0c	 add	 esi, 12			; 0000000cH

; 165  : 		++_Last;

  0006f	89 7d e8	 mov	 DWORD PTR __Backout$35[ebp+4], edi

; 188  : 	for (; _First != _Last; ++_First)

  00072	3b f3		 cmp	 esi, ebx
  00074	75 e2		 jne	 SHORT $LL18@Uninitiali
$LN148@Uninitiali:

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);
; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 214  : 	_Seek_wrapped(_Dest,
; 215  : 		_Uninitialized_copy_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 216  : 			_Ptr_copy_cat(_UFirst, _UDest),
; 217  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(*_UFirst)>()));
; 218  : 
; 219  : 	return (_Dest);
; 220  : 	}

  00076	8b c7		 mov	 eax, edi
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00089	33 cd		 xor	 ecx, ebp
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$35[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::~_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
__ehhandler$??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@0PAU12@AAV?$allocator@UImportInfo@SegmentHeader@@@0@@Z ENDP ; std::_Uninitialized_copy<SegmentHeader::ImportInfo *,SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAUImportInfo@SegmentHeader@@PAU12@@std@@YAHABQAUImportInfo@SegmentHeader@@0@Z
_TEXT	SEGMENT
??$_Idl_distance@PAUImportInfo@SegmentHeader@@PAU12@@std@@YAHABQAUImportInfo@SegmentHeader@@0@Z PROC ; std::_Idl_distance<SegmentHeader::ImportInfo *,SegmentHeader::ImportInfo *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 12		 mov	 edx, DWORD PTR [edx]
  00002	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00007	2b 11		 sub	 edx, DWORD PTR [ecx]
  00009	f7 ea		 imul	 edx
  0000b	d1 fa		 sar	 edx, 1
  0000d	8b c2		 mov	 eax, edx
  0000f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00012	03 c2		 add	 eax, edx

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00014	c3		 ret	 0
??$_Idl_distance@PAUImportInfo@SegmentHeader@@PAU12@@std@@YAHABQAUImportInfo@SegmentHeader@@0@Z ENDP ; std::_Idl_distance<SegmentHeader::ImportInfo *,SegmentHeader::ImportInfo *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 393  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >::_Vector_val<std::_Simple_types<SegmentHeader::ImportInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@UImportInfo@SegmentHeader@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@UImportInfo@SegmentHeader@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@@Z PROC ; std::_Get_unwrapped<SegmentHeader::ImportInfo>, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@UImportInfo@SegmentHeader@@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@@Z ENDP ; std::_Get_unwrapped<SegmentHeader::ImportInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@UImportInfo@SegmentHeader@@H$0A@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@H@Z
_TEXT	SEGMENT
??$_Get_unwrapped_n@UImportInfo@SegmentHeader@@H$0A@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@H@Z PROC ; std::_Get_unwrapped_n<SegmentHeader::ImportInfo,int,0>, COMDAT
; __Src$ = ecx
; ___formal$dead$ = edx

; 809  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 810  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped_n@UImportInfo@SegmentHeader@@H$0A@@std@@YAPAUImportInfo@SegmentHeader@@QAU12@H@Z ENDP ; std::_Get_unwrapped_n<SegmentHeader::ImportInfo,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@UImportInfo@SegmentHeader@@U12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUImportInfo@SegmentHeader@@0@Z
_TEXT	SEGMENT
??$_Ptr_copy_cat@UImportInfo@SegmentHeader@@U12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUImportInfo@SegmentHeader@@0@Z PROC ; std::_Ptr_copy_cat<SegmentHeader::ImportInfo,SegmentHeader::ImportInfo>, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 1070 : 	return {};

  00000	32 c0		 xor	 al, al

; 1071 : 	}

  00002	c3		 ret	 0
??$_Ptr_copy_cat@UImportInfo@SegmentHeader@@U12@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUImportInfo@SegmentHeader@@0@Z ENDP ; std::_Ptr_copy_cat<SegmentHeader::ImportInfo,SegmentHeader::ImportInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
_TEXT	SEGMENT
__Backout$ = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Dest$ = 8						; size = 4
__Al$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<SegmentHeader::ImportInfo *,SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 186  : 	{	// copy [_First, _Last) to raw _Dest, using _Al, no special optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 10	 sub	 esp, 16			; 00000010H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b da		 mov	 ebx, edx
  0002d	8b f1		 mov	 esi, ecx

; 147  : 		: _First(_Dest),

  0002f	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0

; 149  : 		_Al(_Al_)

  00035	8b 45 0c	 mov	 eax, DWORD PTR __Al$[ebp]
  00038	66 0f d6 45 e4	 movq	 QWORD PTR __Backout$[ebp], xmm0
  0003d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __Backout$[ebp+8], 0

; 147  : 		: _First(_Dest),

  00044	89 7d e4	 mov	 DWORD PTR __Backout$[ebp], edi

; 148  : 		_Last(_Dest),

  00047	89 7d e8	 mov	 DWORD PTR __Backout$[ebp+4], edi

; 149  : 		_Al(_Al_)

  0004a	89 45 ec	 mov	 DWORD PTR __Backout$[ebp+8], eax

; 187  : 	_Uninitialized_backout_al<_FwdIt, _Alloc> _Backout{_Dest, _Al};

  0004d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 188  : 	for (; _First != _Last; ++_First)

  00054	3b f3		 cmp	 esi, ebx
  00056	74 1e		 je	 SHORT $LN131@Uninitiali
$LL4@Uninitiali:
  00058	8b 06		 mov	 eax, DWORD PTR [esi]
  0005a	89 07		 mov	 DWORD PTR [edi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 483  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  0005c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0005f	51		 push	 ecx
  00060	50		 push	 eax
  00061	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  00064	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  00069	83 c7 0c	 add	 edi, 12			; 0000000cH

; 188  : 	for (; _First != _Last; ++_First)

  0006c	83 c6 0c	 add	 esi, 12			; 0000000cH

; 165  : 		++_Last;

  0006f	89 7d e8	 mov	 DWORD PTR __Backout$[ebp+4], edi

; 188  : 	for (; _First != _Last; ++_First)

  00072	3b f3		 cmp	 esi, ebx
  00074	75 e2		 jne	 SHORT $LL4@Uninitiali
$LN131@Uninitiali:

; 189  : 		{
; 190  : 		_Backout._Emplace_back(*_First);
; 191  : 		}
; 192  : 
; 193  : 	return (_Backout._Release());
; 194  : 	}

  00076	8b c7		 mov	 eax, edi
  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00089	33 cd		 xor	 ecx, ebp
  0008b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Backout$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::~_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
__ehhandler$??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e0	 mov	 ecx, DWORD PTR [edx-32]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy_al_unchecked@PAUImportInfo@SegmentHeader@@PAU12@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@YAPAUImportInfo@SegmentHeader@@PAU12@QAU12@1AAV?$allocator@UImportInfo@SegmentHeader@@@0@U_General_ptr_iterator_tag@0@U_Unused_parameter@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<SegmentHeader::ImportInfo *,SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@UImportInfo@SegmentHeader@@@std@@YAXAAPAUImportInfo@SegmentHeader@@QAU12@@Z
_TEXT	SEGMENT
??$_Seek_wrapped@UImportInfo@SegmentHeader@@@std@@YAXAAPAUImportInfo@SegmentHeader@@QAU12@@Z PROC ; std::_Seek_wrapped<SegmentHeader::ImportInfo>, COMDAT
; __It$ = ecx
; __UIt$ = edx

; 872  : 	_It = _UIt;

  00000	89 11		 mov	 DWORD PTR [ecx], edx

; 873  : 	}

  00002	c3		 ret	 0
??$_Seek_wrapped@UImportInfo@SegmentHeader@@@std@@YAXAAPAUImportInfo@SegmentHeader@@QAU12@@Z ENDP ; std::_Seek_wrapped<SegmentHeader::ImportInfo>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEXI@Z PROC ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	0f 57 c0	 xorps	 xmm0, xmm0
  00003	66 0f d6 01	 movq	 QWORD PTR [ecx], xmm0
  00007	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  0000e	c2 04 00	 ret	 4
?__autoclassinit2@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEXI@Z ENDP ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEPAUImportInfo@SegmentHeader@@XZ
_TEXT	SEGMENT
?_Release@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEPAUImportInfo@SegmentHeader@@XZ PROC ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::_Release, COMDAT
; _this$ = ecx

; 170  : 		_First = _Last;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	89 01		 mov	 DWORD PTR [ecx], eax

; 171  : 		return (_Last);
; 172  : 		}

  00005	c3		 ret	 0
?_Release@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEPAUImportInfo@SegmentHeader@@XZ ENDP ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::_Release
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::~_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; _this$ = ecx

; 157  : 		{	// destroy all elements guarded by this instance

  00000	53		 push	 ebx

; 158  : 		_Destroy_range(_First, _Last, _Al);

  00001	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  00004	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<

  00005	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1134 : 	for (; _First != _Last; ++_First)

  00007	3b f3		 cmp	 esi, ebx
  00009	74 22		 je	 SHORT $LN7@Uninitiali
  0000b	57		 push	 edi
  0000c	0f 1f 40 00	 npad	 4
$LL8@Uninitiali:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 1168 : 		_Tidy();

  00010	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00013	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00018	6a 18		 push	 24			; 00000018H
  0001a	ff 76 04	 push	 DWORD PTR [esi+4]
  0001d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete

; 1134 : 	for (; _First != _Last; ++_First)

  00022	83 c6 0c	 add	 esi, 12			; 0000000cH

; 207  : 	::operator delete(_Ptr, _Bytes);

  00025	83 c4 08	 add	 esp, 8

; 1134 : 	for (; _First != _Last; ++_First)

  00028	3b f3		 cmp	 esi, ebx
  0002a	75 e4		 jne	 SHORT $LL8@Uninitiali
  0002c	5f		 pop	 edi
$LN7@Uninitiali:
  0002d	5e		 pop	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 159  : 		}

  0002e	5b		 pop	 ebx
  0002f	c3		 ret	 0
??1?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::~_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@PAUImportInfo@SegmentHeader@@AAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@PAUImportInfo@SegmentHeader@@AAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z PROC ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >, COMDAT
; _this$ = ecx

; 150  : 		{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 147  : 		: _First(_Dest),

  00003	8b 45 08	 mov	 eax, DWORD PTR __Dest$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax

; 148  : 		_Last(_Dest),

  00008	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 149  : 		_Al(_Al_)

  0000b	8b 45 0c	 mov	 eax, DWORD PTR __Al_$[ebp]
  0000e	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 151  : 		}

  00011	8b c1		 mov	 eax, ecx
  00013	5d		 pop	 ebp
  00014	c2 08 00	 ret	 8
??0?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAE@PAUImportInfo@SegmentHeader@@AAV?$allocator@UImportInfo@SegmentHeader@@@1@@Z ENDP ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Emplace_back@AAUImportInfo@SegmentHeader@@@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEXAAUImportInfo@SegmentHeader@@@Z
_TEXT	SEGMENT
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAUImportInfo@SegmentHeader@@@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEXAAUImportInfo@SegmentHeader@@@Z PROC ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::_Emplace_back<SegmentHeader::ImportInfo &>, COMDAT
; _this$ = ecx

; 163  : 		{	// construct a new element at *_Last and increment

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h

; 187  :         return _Where;

  00003	8b 55 08	 mov	 edx, DWORD PTR _<_Vals_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 163  : 		{	// construct a new element at *_Last and increment

  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 02		 mov	 eax, DWORD PTR [edx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vcruntime_new.h

; 187  :         return _Where;

  0000b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 483  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  0000e	51		 push	 ecx
  0000f	89 01		 mov	 DWORD PTR [ecx], eax
  00011	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00014	50		 push	 eax
  00015	83 c1 04	 add	 ecx, 4
  00018	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 165  : 		++_Last;

  0001d	83 46 04 0c	 add	 DWORD PTR [esi+4], 12	; 0000000cH
  00021	5e		 pop	 esi

; 166  : 		}

  00022	5d		 pop	 ebp
  00023	c2 04 00	 ret	 4
??$_Emplace_back@AAUImportInfo@SegmentHeader@@@?$_Uninitialized_backout_al@PAUImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@QAEXAAUImportInfo@SegmentHeader@@@Z ENDP ; std::_Uninitialized_backout_al<SegmentHeader::ImportInfo *,std::allocator<SegmentHeader::ImportInfo> >::_Emplace_back<SegmentHeader::ImportInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAUImportInfo@SegmentHeader@@@std@@YAAAUImportInfo@SegmentHeader@@AAU12@@Z
_TEXT	SEGMENT
??$forward@AAUImportInfo@SegmentHeader@@@std@@YAAAUImportInfo@SegmentHeader@@AAU12@@Z PROC ; std::forward<SegmentHeader::ImportInfo &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAUImportInfo@SegmentHeader@@@std@@YAAAUImportInfo@SegmentHeader@@AAU12@@Z ENDP ; std::forward<SegmentHeader::ImportInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@UImportInfo@SegmentHeader@@AAU12@@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAXAAV?$allocator@UImportInfo@SegmentHeader@@@1@QAUImportInfo@SegmentHeader@@AAU34@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@UImportInfo@SegmentHeader@@AAU12@@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAXAAV?$allocator@UImportInfo@SegmentHeader@@@1@QAUImportInfo@SegmentHeader@@AAU34@@Z PROC ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::construct<SegmentHeader::ImportInfo,SegmentHeader::ImportInfo &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 483  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  00006	51		 push	 ecx
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	89 02		 mov	 DWORD PTR [edx], eax
  0000b	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000e	50		 push	 eax
  0000f	8d 4a 04	 lea	 ecx, DWORD PTR [edx+4]
  00012	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 882  : 		}

  00017	5d		 pop	 ebp
  00018	c3		 ret	 0
??$construct@UImportInfo@SegmentHeader@@AAU12@@?$_Default_allocator_traits@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@SAXAAV?$allocator@UImportInfo@SegmentHeader@@@1@QAUImportInfo@SegmentHeader@@AAU34@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SegmentHeader::ImportInfo> >::construct<SegmentHeader::ImportInfo,SegmentHeader::ImportInfo &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??0ImportInfo@SegmentHeader@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0ImportInfo@SegmentHeader@@QAE@ABU01@@Z PROC		; SegmentHeader::ImportInfo::ImportInfo, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 483  : 		: _Mybase(_Right, _Alnode_traits::select_on_container_copy_construction(_Right._Getal()))

  00004	8b 55 08	 mov	 edx, DWORD PTR ___that$[ebp]
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	51		 push	 ecx
  0000b	8b 02		 mov	 eax, DWORD PTR [edx]
  0000d	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  00010	89 06		 mov	 DWORD PTR [esi], eax
  00012	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00015	8d 42 04	 lea	 eax, DWORD PTR [edx+4]
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0ImportInfo@SegmentHeader@@QAE@ABU01@@Z ENDP		; SegmentHeader::ImportInfo::ImportInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??0?$multimap@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$multimap@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@@std@@QAE@ABV01@@Z PROC ; std::multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >, COMDAT
; _this$ = ecx

; 484  : 		{	// construct map by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	51		 push	 ecx
  00006	ff 75 08	 push	 DWORD PTR __Right$[ebp]
  00009	8b f1		 mov	 esi, ecx
  0000b	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
  0000e	e8 00 00 00 00	 call	 ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >

; 485  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	8b e5		 mov	 esp, ebp
  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
??0?$multimap@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@@std@@QAE@ABV01@@Z ENDP ; std::multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::multimap<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@ABV32@@Z
_TEXT	SEGMENT
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::select_on_container_copy_construction, COMDAT
; ___$ReturnUdt$ = ecx
; __Al$dead$ = edx

; 897  : 		return (_Al);

  00000	8b c1		 mov	 eax, ecx

; 898  : 		}

  00002	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SA?AV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Getal, COMDAT
; _this$ = ecx

; 1010 : 		return (_Mypair._Get_second()._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1011 : 		}

  00002	c3		 ret	 0
?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T23 = 8						; size = 1
__Right$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx

; 1097 : 		{	// construct tree by copying _Right, allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 468  : 		: _Myhead(),

  00030	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00036	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  0003d	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buyheadnode
  00042	89 06		 mov	 DWORD PTR [esi], eax

; 809  : 		}
; 810  : 
; 811  : 	~_Tree_comp_alloc() noexcept
; 812  : 		{	// destroy head node
; 813  : 		_Freeheadnode(_Get_data()._Myhead);
; 814  : 		}
; 815  : 
; 816  : 	void _Alloc_proxy()
; 817  : 		{	// do nothing
; 818  : 		}
; 819  : 
; 820  : 	void _Free_proxy()
; 821  : 		{	// do nothing
; 822  : 		}
; 823  : 
; 824  :  #else /* _ITERATOR_DEBUG_LEVEL == 0 */
; 825  : 	void _Construct()
; 826  : 		{	// construct head node, proxy
; 827  : 		auto& _My_data = _Get_data();
; 828  : 		_My_data._Myhead = _Buyheadnode();
; 829  : 		_TRY_BEGIN
; 830  : 		_Alloc_proxy();
; 831  : 		_CATCH_ALL
; 832  : 		_Freeheadnode(_My_data._Myhead);
; 833  : 		_RERAISE;
; 834  : 		_CATCH_END
; 835  : 		}
; 836  : 
; 837  : 	~_Tree_comp_alloc() noexcept
; 838  : 		{	// destroy head node, proxy
; 839  : 		_Freeheadnode(_Get_data()._Myhead);
; 840  : 		_Free_proxy();
; 841  : 		}
; 842  : 
; 843  : 	void _Alloc_proxy()
; 844  : 		{	// construct proxy
; 845  : 		_Alproxy _Proxy_allocator(_Getal());
; 846  : 		_Myproxy() = _Unfancy(_Proxy_allocator.allocate(1));
; 847  : 		_Alproxy_traits::construct(_Proxy_allocator, _Myproxy(), _Container_proxy());
; 848  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());
; 849  : 		}
; 850  : 
; 851  : 	void _Free_proxy()
; 852  : 		{	// destroy proxy
; 853  : 		_Alproxy _Proxy_allocator(_Getal());
; 854  : 		_Orphan_all();
; 855  : 		_Alproxy_traits::destroy(_Proxy_allocator, _Myproxy());
; 856  : 		_Deallocate_plain(_Proxy_allocator, _Myproxy());
; 857  : 		_Myproxy() = nullptr;
; 858  : 		}
; 859  : 
; 860  : 	_Iterator_base12 **_Getpfirst() const
; 861  : 		{	// get address of iterator chain
; 862  : 		return (_Get_data()._Getpfirst());
; 863  : 		}
; 864  : 
; 865  : 	_Container_proxy * & _Myproxy() noexcept
; 866  : 		{	// return reference to _Myproxy
; 867  : 		return (_Get_data()._Myproxy);
; 868  : 		}
; 869  : 
; 870  : 	_Container_proxy * const & _Myproxy() const noexcept
; 871  : 		{	// return const reference to _Myproxy
; 872  : 		return (_Get_data()._Myproxy);
; 873  : 		}
; 874  :  #endif /* _ITERATOR_DEBUG_LEVEL == 0 */
; 875  : 
; 876  : 	void _Copy_alloc(const _Alnode& _Al)
; 877  : 		{	// replace old allocator
; 878  : 		const bool _Reload = _Alnode_traits::propagate_on_container_copy_assignment::value
; 879  : 			&& _Getal() != _Al;
; 880  : 
; 881  : 		if (_Reload)
; 882  : 			{
; 883  : 			_Free_proxy();
; 884  : 			_Freeheadnode(_Get_data()._Myhead);
; 885  : 			}
; 886  : 
; 887  : 		_Pocca(_Getal(), _Al);
; 888  : 
; 889  : 		if (_Reload)
; 890  : 			{
; 891  : 			_Get_data()._Myhead = _Buyheadnode();
; 892  : 			_Alloc_proxy();
; 893  : 			}
; 894  : 		}
; 895  : 
; 896  : 	void _Move_alloc(_Alnode& _Al)
; 897  : 		{	// replace old allocator
; 898  : 		const bool _Reload = _Alnode_traits::propagate_on_container_move_assignment::value
; 899  : 			&& _Getal() != _Al;
; 900  : 
; 901  : 		if (_Reload)
; 902  : 			{
; 903  : 			_Free_proxy();
; 904  : 			_Freeheadnode(_Get_data()._Myhead);
; 905  : 			}
; 906  : 
; 907  : 		_Pocma(_Getal(), _Al);
; 908  : 
; 909  : 		if (_Reload)
; 910  : 			{
; 911  : 			_Get_data()._Myhead = _Buyheadnode();
; 912  : 			_Alloc_proxy();
; 913  : 			}
; 914  : 		}
; 915  : 
; 916  : 	void _Orphan_all()
; 917  : 		{	// orphan all iterators
; 918  : 		_Get_data()._Orphan_all();
; 919  : 		}
; 920  : 
; 921  : 	void _Swap_all(_Tree_comp_alloc& _Right)
; 922  : 		{	// swap all iterators
; 923  : 		_Get_data()._Swap_all(_Right._Get_data());
; 924  : 		}
; 925  : 
; 926  : 	_Nodeptr _Buyheadnode()
; 927  : 		{	// get head node using current allocator
; 928  : 		_Alnode& _Al = _Getal();
; 929  : 		_Nodeptr _Pnode = _Al.allocate(1);
; 930  : 
; 931  : 		_TRY_BEGIN
; 932  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Left), _Pnode);
; 933  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _Pnode);
; 934  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _Pnode);
; 935  : 		_CATCH_ALL
; 936  : 		_Al.deallocate(_Pnode, 1);
; 937  : 		_RERAISE;
; 938  : 		_CATCH_END
; 939  : 
; 940  : 		_Pnode->_Color = _Black;
; 941  : 		_Pnode->_Isnil = true;
; 942  : 		return (_Pnode);
; 943  : 		}
; 944  : 
; 945  : 	void _Freeheadnode(_Nodeptr _Pnode)
; 946  : 		{	// free head node using current allocator
; 947  : 		_Node::_Freenode0(_Getal(), _Pnode);
; 948  : 		}
; 949  : 
; 950  : 	_Nodeptr _Buynode0()
; 951  : 		{	// allocate a non-value node
; 952  : 		_Alnode& _Al = _Getal();
; 953  : 		_Nodeptr _Pnode = _Al.allocate(1);
; 954  : 
; 955  : 		auto& _My_data = _Get_data();
; 956  : 
; 957  : 		_TRY_BEGIN
; 958  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Left), _My_data._Myhead);
; 959  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Parent), _My_data._Myhead);
; 960  : 		_Alnode_traits::construct(_Al, _STD addressof(_Pnode->_Right), _My_data._Myhead);
; 961  : 		_CATCH_ALL
; 962  : 		_Al.deallocate(_Pnode, 1);
; 963  : 		_RERAISE;
; 964  : 		_CATCH_END
; 965  : 
; 966  : 		return (_Pnode);
; 967  : 		}
; 968  : 
; 969  : 	void _Freenode0(_Nodeptr _Pnode)
; 970  : 		{	// free non-value node using current allocator
; 971  : 		_Node::_Freenode0(_Getal(), _Pnode);
; 972  : 		}
; 973  : 
; 974  : 	template<class... _Valty>
; 975  : 		_Nodeptr _Buynode(_Valty&&... _Val)
; 976  : 		{	// allocate a node with defaults and set links and value
; 977  : 		_Nodeptr _Pnode = _Buynode0();
; 978  : 
; 979  : 		_Pnode->_Color = _Red;
; 980  : 		_Pnode->_Isnil = false;
; 981  : 
; 982  : 		_TRY_BEGIN
; 983  : 		_Alnode_traits::construct(_Getal(),
; 984  : 			_STD addressof(_Pnode->_Myval), _STD forward<_Valty>(_Val)...);
; 985  : 		_CATCH_ALL
; 986  : 		_Freenode0(_Pnode);
; 987  : 		_RERAISE;
; 988  : 		_CATCH_END
; 989  : 
; 990  : 		return (_Pnode);
; 991  : 		}
; 992  : 
; 993  : 	key_compare& _Getcomp() noexcept
; 994  : 		{	// return reference to ordering predicate
; 995  : 		return (_Mypair._Get_first());
; 996  : 		}
; 997  : 
; 998  : 	const key_compare& _Getcomp() const noexcept
; 999  : 		{	// return const reference to ordering predicate
; 1000 : 		return (_Mypair._Get_first());
; 1001 : 		}
; 1002 : 
; 1003 : 	_Alnode& _Getal() noexcept
; 1004 : 		{	// return reference to allocator
; 1005 : 		return (_Mypair._Get_second()._Get_first());
; 1006 : 		}
; 1007 : 
; 1008 : 	const _Alnode& _Getal() const noexcept
; 1009 : 		{	// return const reference to allocator
; 1010 : 		return (_Mypair._Get_second()._Get_first());
; 1011 : 		}
; 1012 : 
; 1013 : 	_Tree_val<_Val_types>& _Get_data() noexcept
; 1014 : 		{	// return reference to _Tree_val
; 1015 : 		return (_Mypair._Get_second()._Get_second());
; 1016 : 		}
; 1017 : 
; 1018 : 	const _Tree_val<_Val_types>& _Get_data() const noexcept
; 1019 : 		{	// return const reference to _Tree_val
; 1020 : 		return (_Mypair._Get_second()._Get_second());
; 1021 : 		}
; 1022 : 
; 1023 : private:
; 1024 : 	_Compressed_pair<key_compare,
; 1025 : 		_Compressed_pair<_Alnode, _Tree_val<_Val_types>>> _Mypair;
; 1026 : 	};
; 1027 : 
; 1028 : 		// CLASS TEMPLATE _Tree
; 1029 : template<class _Traits>
; 1030 : 	class _Tree
; 1031 : 		: public _Tree_comp_alloc<_Traits>
; 1032 : 	{	// ordered red-black tree for map/multimap/set/multiset
; 1033 : public:
; 1034 : 	using _Mybase = _Tree_comp_alloc<_Traits>;
; 1035 : 
; 1036 : 	using key_type = typename _Traits::key_type;
; 1037 : 	using value_compare = typename _Traits::value_compare;
; 1038 : 	enum
; 1039 : 		{	// get multi parameter
; 1040 : 		_Multi = _Traits::_Multi};
; 1041 : 
; 1042 : 	using _Node = typename _Mybase::_Node;
; 1043 : 	using _Nodeptr = typename _Mybase::_Nodeptr;
; 1044 : 	using _Alnode = typename _Mybase::_Alnode;
; 1045 : 	using _Alnode_traits = typename _Mybase::_Alnode_traits;
; 1046 : 
; 1047 : 	using key_compare = typename _Mybase::key_compare;
; 1048 : 	using allocator_type = typename _Mybase::allocator_type;
; 1049 : 
; 1050 : 	using value_type = typename _Mybase::value_type;
; 1051 : 	using size_type = typename _Mybase::size_type;
; 1052 : 	using difference_type = typename _Mybase::difference_type;
; 1053 : 	using pointer = typename _Mybase::pointer;
; 1054 : 	using const_pointer = typename _Mybase::const_pointer;
; 1055 : 	using reference = value_type&;
; 1056 : 	using const_reference = const value_type&;
; 1057 : 
; 1058 : 	using iterator = conditional_t<is_same_v<key_type, value_type>,
; 1059 : 		typename _Mybase::const_iterator,
; 1060 : 		typename _Mybase::iterator>;
; 1061 : 	using const_iterator = typename _Mybase::const_iterator;
; 1062 : 	using _Unchecked_iterator = conditional_t<is_same_v<key_type, value_type>,
; 1063 : 		typename _Mybase::_Unchecked_const_iterator,
; 1064 : 		typename _Mybase::_Unchecked_iterator>;
; 1065 : 	using _Unchecked_const_iterator = typename _Mybase::_Unchecked_const_iterator;
; 1066 : 
; 1067 : 	using reverse_iterator = _STD reverse_iterator<iterator>;
; 1068 : 	using const_reverse_iterator = _STD reverse_iterator<const_iterator>;
; 1069 : 
; 1070 : 	using _Pairib = pair<iterator, bool>;
; 1071 : 	using _Pairii = pair<iterator, iterator>;
; 1072 : 	using _Paircc = pair<const_iterator, const_iterator>;
; 1073 : 
; 1074 : 	using _Mytreeval = _Tree_val<typename _Mybase::_Val_types>;
; 1075 : 
; 1076 : 	struct _Copy_tag
; 1077 : 		{	// signals copying
; 1078 : 		};
; 1079 : 	struct _Move_tag
; 1080 : 		{	// signals moving
; 1081 : 		};
; 1082 : 
; 1083 : 	_Tree(const key_compare& _Parg)
; 1084 : 		: _Mybase(_Parg)
; 1085 : 		{	// construct empty tree from comparator
; 1086 : 		}
; 1087 : 
; 1088 : 	_Tree(const key_compare& _Parg,
; 1089 : 		const allocator_type& _Al)
; 1090 : 		: _Mybase(_Parg, _Al)
; 1091 : 		{	// construct empty tree from comparator, allocator
; 1092 : 		}
; 1093 : 
; 1094 : 	template<class _Any_alloc>
; 1095 : 		_Tree(const _Tree& _Right, _Any_alloc&& _Al)
; 1096 : 		: _Mybase(_Right.key_comp(), _STD forward<_Any_alloc>(_Al))

  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1098 : 		_TRY_BEGIN

  0004b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 1899 : 		_My_data._Root() = _Copy_nodes(_Right._Get_data()._Root(), _My_data._Myhead, _Movefl);

  0004f	8b 7d 08	 mov	 edi, DWORD PTR __Right$[ebp]
  00052	ff 75 08	 push	 DWORD PTR $T23[ebp]
  00055	50		 push	 eax
  00056	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00058	ff 71 04	 push	 DWORD PTR [ecx+4]
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>
  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1900 : 		_My_data._Mysize = _Right.size();

  00067	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 493  : 		return (_Myhead->_Parent);

  0006a	8b 3e		 mov	 edi, DWORD PTR [esi]

; 1900 : 		_My_data._Mysize = _Right.size();

  0006c	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1901 : 		if (!_My_data._Root()->_Isnil)

  0006f	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00072	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  00076	75 38		 jne	 SHORT $LN44@ImportType

; 486  : 		while (!_Pnode->_Left->_Isnil)

  00078	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0007a	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  0007e	75 0c		 jne	 SHORT $LN77@ImportType
$LL76@ImportType:
  00080	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00082	8b d1		 mov	 edx, ecx
  00084	8b c8		 mov	 ecx, eax
  00086	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0008a	74 f4		 je	 SHORT $LL76@ImportType
$LN77@ImportType:

; 1903 : 			_My_data._Lmost() = _Mytreeval::_Min(_My_data._Root());

  0008c	89 17		 mov	 DWORD PTR [edi], edx

; 493  : 		return (_Myhead->_Parent);

  0008e	8b 16		 mov	 edx, DWORD PTR [esi]

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

  00090	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 479  : 		while (!_Pnode->_Right->_Isnil)

  00093	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00096	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0009a	75 0f		 jne	 SHORT $LN85@ImportType
  0009c	0f 1f 40 00	 npad	 4
$LL84@ImportType:

; 480  : 			_Pnode = _Pnode->_Right;

  000a0	8b c8		 mov	 ecx, eax
  000a2	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  000a5	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  000a9	74 f5		 je	 SHORT $LL84@ImportType
$LN85@ImportType:

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

  000ab	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1905 : 			}
; 1906 : 		else

  000ae	eb 07		 jmp	 SHORT $LN45@ImportType
$LN44@ImportType:

; 1907 : 			{	// empty tree, just tidy head pointers
; 1908 : 			_My_data._Lmost() = _My_data._Myhead;

  000b0	89 3f		 mov	 DWORD PTR [edi], edi

; 503  : 		return (_Myhead->_Right);

  000b2	8b 06		 mov	 eax, DWORD PTR [esi]

; 1909 : 			_My_data._Rmost() = _My_data._Myhead;

  000b4	89 40 08	 mov	 DWORD PTR [eax+8], eax
$LN45@ImportType:

; 1103 : 		_CATCH_END
; 1104 : 		}

  000b7	8b c6		 mov	 eax, esi
  000b9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c3	59		 pop	 ecx
  000c4	5f		 pop	 edi
  000c5	5e		 pop	 esi
  000c6	5b		 pop	 ebx
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
__catch$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z$0:

; 1099 : 		_Copy(_Right, _Copy_tag());
; 1100 : 		_CATCH_ALL
; 1101 : 		_Tidy();

  000cd	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d0	e8 00 00 00 00	 call	 ?_Tidy@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tidy

; 1102 : 		_RERAISE;

  000d5	6a 00		 push	 0
  000d7	6a 00		 push	 0
  000d9	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN102@ImportType:
  000de	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::~_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >
__ehhandler$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  00012	33 c8		 xor	 ecx, eax
  00014	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00019	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z
  0001e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABV01@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?key_comp@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AU?$less@W4ImportType@SegmentHeader@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?key_comp@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AU?$less@W4ImportType@SegmentHeader@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::key_comp, COMDAT
; _this$dead$ = ecx

; 1289 : 		{	// return object for comparing keys

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1290 : 		return (this->_Getcomp());

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1291 : 		}

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?key_comp@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBE?AU?$less@W4ImportType@SegmentHeader@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::key_comp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABU?$less@W4ImportType@SegmentHeader@@@2@XZ
_TEXT	SEGMENT
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABU?$less@W4ImportType@SegmentHeader@@@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Getcomp, COMDAT
; _this$ = ecx

; 1000 : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 1001 : 		}

  00002	c3		 ret	 0
?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEABU?$less@W4ImportType@SegmentHeader@@@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@W4ImportType@SegmentHeader@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@W4ImportType@SegmentHeader@@@2@XZ PROC ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@W4ImportType@SegmentHeader@@@2@XZ ENDP ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@0@AAV10@@Z PROC ; std::forward<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@YA$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABU?$less@W4ImportType@SegmentHeader@@@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Parg$dead$ = 8					; size = 4
__Al$dead$ = 12						; size = 4
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABU?$less@W4ImportType@SegmentHeader@@@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,void>, COMDAT
; _this$ = ecx

; 801  : 		{	// construct from comparator, allocator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 468  : 		: _Myhead(),

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 802  : 		_Construct();
; 803  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 08 00	 ret	 8
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@X@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAE@ABU?$less@W4ImportType@SegmentHeader@@@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> ><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Movefl$ = 12						; size = 1
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>, COMDAT
; _this$ = ecx

; 1897 : 		{	// copy or move entire tree from _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 1898 : 		auto& _My_data = this->_Get_data();
; 1899 : 		_My_data._Root() = _Copy_nodes(_Right._Get_data()._Root(), _My_data._Myhead, _Movefl);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]
  00007	57		 push	 edi
  00008	ff 75 0c	 push	 DWORD PTR __Movefl$[ebp]
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	ff 37		 push	 DWORD PTR [edi]
  00011	ff 70 04	 push	 DWORD PTR [eax+4]
  00014	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>
  00019	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 1900 : 		_My_data._Mysize = _Right.size();

  0001e	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 493  : 		return (_Myhead->_Parent);

  00021	8b 37		 mov	 esi, DWORD PTR [edi]

; 1900 : 		_My_data._Mysize = _Right.size();

  00023	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 1901 : 		if (!_My_data._Root()->_Isnil)

  00026	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00029	80 7a 0d 00	 cmp	 BYTE PTR [edx+13], 0
  0002d	75 38		 jne	 SHORT $LN2@Copy

; 486  : 		while (!_Pnode->_Left->_Isnil)

  0002f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00031	80 79 0d 00	 cmp	 BYTE PTR [ecx+13], 0
  00035	75 0c		 jne	 SHORT $LN35@Copy
$LL34@Copy:
  00037	8b 01		 mov	 eax, DWORD PTR [ecx]

; 487  : 			_Pnode = _Pnode->_Left;

  00039	8b d1		 mov	 edx, ecx
  0003b	8b c8		 mov	 ecx, eax
  0003d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00041	74 f4		 je	 SHORT $LL34@Copy
$LN35@Copy:

; 1902 : 			{	// nonempty tree, look for new smallest and largest
; 1903 : 			_My_data._Lmost() = _Mytreeval::_Min(_My_data._Root());

  00043	89 16		 mov	 DWORD PTR [esi], edx

; 493  : 		return (_Myhead->_Parent);

  00045	8b 17		 mov	 edx, DWORD PTR [edi]

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

  00047	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]

; 479  : 		while (!_Pnode->_Right->_Isnil)

  0004a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0004d	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00051	75 0b		 jne	 SHORT $LN43@Copy
$LL42@Copy:

; 480  : 			_Pnode = _Pnode->_Right;

  00053	8b c8		 mov	 ecx, eax
  00055	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00058	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  0005c	74 f5		 je	 SHORT $LL42@Copy
$LN43@Copy:
  0005e	5f		 pop	 edi

; 1904 : 			_My_data._Rmost() = _Mytreeval::_Max(_My_data._Root());

  0005f	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 1909 : 			_My_data._Rmost() = _My_data._Myhead;
; 1910 : 			}
; 1911 : 		}

  00062	5e		 pop	 esi
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN2@Copy:

; 1905 : 			}
; 1906 : 		else
; 1907 : 			{	// empty tree, just tidy head pointers
; 1908 : 			_My_data._Lmost() = _My_data._Myhead;

  00067	89 36		 mov	 DWORD PTR [esi], esi

; 503  : 		return (_Myhead->_Right);

  00069	8b 07		 mov	 eax, DWORD PTR [edi]
  0006b	5f		 pop	 edi

; 1909 : 			_My_data._Rmost() = _My_data._Myhead;
; 1910 : 			}
; 1911 : 		}

  0006c	5e		 pop	 esi
  0006d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00070	5d		 pop	 ebp
  00071	c2 08 00	 ret	 8
??$_Copy@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXABV01@U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Construct, COMDAT
; _this$ = ecx

; 807  : 		{	// construct head node

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00003	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buyheadnode
  00008	89 06		 mov	 DWORD PTR [esi], eax
  0000a	5e		 pop	 esi

; 809  : 		}

  0000b	c3		 ret	 0
?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXXZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Construct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::size, COMDAT
; _this$ = ecx

; 1270 : 		return (this->_Get_data()._Mysize);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1271 : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buyheadnode, COMDAT
; _this$dead$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000a	89 00		 mov	 DWORD PTR [eax], eax
  0000c	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0000f	89 40 08	 mov	 DWORD PTR [eax+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 940  : 		_Pnode->_Color = _Black;

  00012	66 c7 40 0c 01
	01		 mov	 WORD PTR [eax+12], 257	; 00000101H

; 941  : 		_Pnode->_Isnil = true;
; 942  : 		return (_Pnode);
; 943  : 		}

  00018	c3		 ret	 0
?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buyheadnode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Count$dead$ = 8					; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >::allocate, COMDAT
; _this$dead$ = ecx

; 52   : 		return (::operator new(_Bytes));

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0000a	c2 04 00	 ret	 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8d 14 40	 lea	 edx, DWORD PTR [eax+eax*2]
  0000c	c1 e2 03	 shl	 edx, 3

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0000f	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00015	72 14		 jb	 SHORT $LN15@deallocate

; 115  : 	_Bytes += _Non_user_size;

  00017	56		 push	 esi

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00018	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0001b	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b ce		 sub	 ecx, esi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 11		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00028	8b ce		 mov	 ecx, esi
  0002a	5e		 pop	 esi
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	51		 push	 ecx
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00032	83 c4 08	 add	 esp, 8

; 993  : 		}

  00035	5d		 pop	 ebp
  00036	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  0003f	cc		 int	 3
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABU?$less@W4ImportType@SegmentHeader@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@W4ImportType@SegmentHeader@@@1@$$QAU21@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
_<_Val2_0>$dead$ = 16					; size = 4
_<_Val2_1>$dead$ = 20					; size = 4
??$?0ABU?$less@W4ImportType@SegmentHeader@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@W4ImportType@SegmentHeader@@@1@$$QAU21@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z PROC ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1><std::less<enum SegmentHeader::ImportType> const &,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 469  : 		_Mysize(0)

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  0000f	c2 10 00	 ret	 16			; 00000010H
??$?0ABU?$less@W4ImportType@SegmentHeader@@@std@@U_One_then_variadic_args_t@1@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@?$_Compressed_pair@U?$less@W4ImportType@SegmentHeader@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@W4ImportType@SegmentHeader@@@1@$$QAU21@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ENDP ; std::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1>::_Compressed_pair<std::less<enum SegmentHeader::ImportType>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>,1><std::less<enum SegmentHeader::ImportType> const &,std::_One_then_variadic_args_t,std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Rootnode$ = 8						; size = 4
__Newroot$ = 12						; size = 4
__Wherenode$ = 12					; size = 4
__Movefl$ = 16						; size = 1
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>, COMDAT
; _this$ = ecx

; 1937 : 		{	// copy entire subtree, recursively

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 1938 : 		_Nodeptr _Newroot = this->_Get_data()._Myhead;	// point at nil node
; 1939 : 
; 1940 : 		if (!_Rootnode->_Isnil)

  00030	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  00033	8b 3e		 mov	 edi, DWORD PTR [esi]
  00035	80 78 0d 00	 cmp	 BYTE PTR [eax+13], 0
  00039	75 4e		 jne	 SHORT $LN8@Copy_nodes

; 1941 : 			{	// copy or move a node, then any subtrees
; 1942 : 			typename is_same<key_type, value_type>::type _Is_set;
; 1943 : 			_Nodeptr _Pnode = _Copy_or_move(_Rootnode->_Myval, _Movefl, _Is_set);

  0003b	83 c0 10	 add	 eax, 16			; 00000010H

; 1917 : 		return (this->_Buynode(_Val));

  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ??$_Buynode@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buynode<std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>

; 1944 : 			_Pnode->_Parent = _Wherenode;
; 1945 : 			_Pnode->_Color = _Rootnode->_Color;

  00044	8b 4d 08	 mov	 ecx, DWORD PTR __Rootnode$[ebp]
  00047	8b d8		 mov	 ebx, eax
  00049	8b 45 0c	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  0004c	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  0004f	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]
  00052	88 43 0c	 mov	 BYTE PTR [ebx+12], al

; 1946 : 			if (_Newroot->_Isnil)

  00055	80 7f 0d 00	 cmp	 BYTE PTR [edi+13], 0

; 1947 : 				_Newroot = _Pnode;	// memorize new root
; 1948 : 
; 1949 : 			_TRY_BEGIN

  00059	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1950 : 			_Pnode->_Left = _Copy_nodes(_Rootnode->_Left, _Pnode, _Movefl);

  00060	ff 75 10	 push	 DWORD PTR __Movefl$[ebp]
  00063	0f 45 fb	 cmovne	 edi, ebx
  00066	53		 push	 ebx
  00067	ff 31		 push	 DWORD PTR [ecx]
  00069	8b ce		 mov	 ecx, esi
  0006b	89 7d 0c	 mov	 DWORD PTR __Newroot$[ebp], edi
  0006e	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>

; 1951 : 			_Pnode->_Right = _Copy_nodes(_Rootnode->_Right, _Pnode, _Movefl);

  00073	ff 75 10	 push	 DWORD PTR __Movefl$[ebp]
  00076	89 03		 mov	 DWORD PTR [ebx], eax
  00078	8b ce		 mov	 ecx, esi
  0007a	8b 45 08	 mov	 eax, DWORD PTR __Rootnode$[ebp]
  0007d	53		 push	 ebx
  0007e	ff 70 08	 push	 DWORD PTR [eax+8]
  00081	e8 00 00 00 00	 call	 ??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>
  00086	89 43 08	 mov	 DWORD PTR [ebx+8], eax
$LN8@Copy_nodes:

; 1955 : 			_CATCH_END
; 1956 : 			}
; 1957 : 
; 1958 : 		return (_Newroot);	// return newly constructed tree

  00089	8b c7		 mov	 eax, edi

; 1959 : 		}

  0008b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0008e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00095	59		 pop	 ecx
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5b		 pop	 ebx
  00099	8b e5		 mov	 esp, ebp
  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
__catch$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z$0:

; 1952 : 			_CATCH_ALL
; 1953 : 			_Erase(_Newroot);	// subtree copy failed, bail out

  0009f	ff 75 0c	 push	 DWORD PTR __Newroot$[ebp]
  000a2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Erase

; 1954 : 			_RERAISE;

  000aa	6a 00		 push	 0
  000ac	6a 00		 push	 0
  000ae	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN19@Copy_nodes:
  000b3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 4a e8	 mov	 ecx, DWORD PTR [edx-24]
  0000a	33 c8		 xor	 ecx, eax
  0000c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00011	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Copy_nodes@U_Copy_tag@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@PAU21@0U_Copy_tag@01@@Z ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_nodes<std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_tag>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAPAU31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAPAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::construct<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> *,std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> * &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 00		 mov	 eax, DWORD PTR [eax]
  00008	89 02		 mov	 DWORD PTR [edx], eax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
??$construct@PAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@AAPAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAPAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::construct<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> *,std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$0BI@@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$0BI@@std@@YAII@Z PROC		; std::_Get_size_of_n<24>, COMDAT
; __Count$ = ecx

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;

  00000	8d 04 49	 lea	 eax, DWORD PTR [ecx+ecx*2]

; 26   : 	if (_Max_possible < _Count)

  00003	83 ca ff	 or	 edx, -1
  00006	c1 e0 03	 shl	 eax, 3
  00009	81 f9 aa aa aa
	0a		 cmp	 ecx, 178956970		; 0aaaaaaaH
  0000f	0f 47 c2	 cmova	 eax, edx

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

  00012	c3		 ret	 0
??$_Get_size_of_n@$0BI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<24>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABU?$less@W4ImportType@SegmentHeader@@@std@@@std@@YAABU?$less@W4ImportType@SegmentHeader@@@0@ABU10@@Z
_TEXT	SEGMENT
??$forward@ABU?$less@W4ImportType@SegmentHeader@@@std@@@std@@YAABU?$less@W4ImportType@SegmentHeader@@@0@ABU10@@Z PROC ; std::forward<std::less<enum SegmentHeader::ImportType> const &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@ABU?$less@W4ImportType@SegmentHeader@@@std@@@std@@YAABU?$less@W4ImportType@SegmentHeader@@@0@ABU10@@Z ENDP ; std::forward<std::less<enum SegmentHeader::ImportType> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 469  : 		_Mysize(0)

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  0000f	c2 08 00	 ret	 8
??$?0V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >,1><std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Copy_or_move@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
___formal$ = 12						; size = 1
___formal$ = 16						; size = 1
??$_Copy_or_move@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_or_move<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,std::integral_constant<bool,0> >, COMDAT
; _this$ = ecx

; 1916 : 		{	// copy to new node

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1917 : 		return (this->_Buynode(_Val));

  00003	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00006	e8 00 00 00 00	 call	 ??$_Buynode@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buynode<std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>

; 1918 : 		}

  0000b	5d		 pop	 ebp
  0000c	c2 0c 00	 ret	 12			; 0000000cH
??$_Copy_or_move@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@U?$integral_constant@_N$0A@@2@@?$_Tree@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@IAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@U_Copy_tag@01@U?$integral_constant@_N$0A@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Copy_or_move<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,std::integral_constant<bool,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> * &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >, COMDAT
; _this$ = ecx

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 471  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c3		 ret	 0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >::_Tree_val<std::_Tree_simple_types<std::pair<enum SegmentHeader::ImportType const ,unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??$_Buynode@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Buynode@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buynode<std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>, COMDAT
; _this$ = ecx

; 976  : 		{	// allocate a node with defaults and set links and value

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 977  : 		_Nodeptr _Pnode = _Buynode0();

  00003	e8 00 00 00 00	 call	 ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buynode0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00008	8b 55 08	 mov	 edx, DWORD PTR _<_Val_0>$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 979  : 		_Pnode->_Color = _Red;

  0000b	66 c7 40 0c 00
	00		 mov	 WORD PTR [eax+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00011	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00013	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00016	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00019	89 48 14	 mov	 DWORD PTR [eax+20], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 991  : 		}

  0001c	5d		 pop	 ebp
  0001d	c2 04 00	 ret	 4
??$_Buynode@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@1@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buynode<std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Freenode0, COMDAT
; _this$dead$ = ecx

; 970  : 		{	// free non-value node using current allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR __Pnode$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00006	6a 18		 push	 24			; 00000018H
  00008	50		 push	 eax
  00009	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000e	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 972  : 		}

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Freenode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ
_TEXT	SEGMENT
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buynode0, COMDAT
; _this$ = ecx

; 951  : 		{	// allocate a non-value node

  00000	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00001	6a 18		 push	 24			; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 951  : 		{	// allocate a non-value node

  00003	8b f1		 mov	 esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000a	8b 16		 mov	 edx, DWORD PTR [esi]

; 52   : 		return (::operator new(_Bytes));

  0000c	83 c4 04	 add	 esp, 4

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  0000f	89 10		 mov	 DWORD PTR [eax], edx
  00011	8b 16		 mov	 edx, DWORD PTR [esi]
  00013	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00016	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00018	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 966  : 		return (_Pnode);

  0001b	5e		 pop	 esi

; 967  : 		}

  0001c	c3		 ret	 0
?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@W4ImportType@SegmentHeader@@KU?$less@W4ImportType@SegmentHeader@@@std@@V?$allocator@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@4@$00@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@2@XZ ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<enum SegmentHeader::ImportType,unsigned long,std::less<enum SegmentHeader::ImportType>,std::allocator<std::pair<enum SegmentHeader::ImportType const ,unsigned long> >,1> >::_Buynode0
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@YAAAU?$pair@$$CBW4ImportType@SegmentHeader@@K@0@AAU10@@Z
_TEXT	SEGMENT
??$forward@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@YAAAU?$pair@$$CBW4ImportType@SegmentHeader@@K@0@AAU10@@Z PROC ; std::forward<std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@AAU?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@@std@@YAAAU?$pair@$$CBW4ImportType@SegmentHeader@@K@0@AAU10@@Z ENDP ; std::forward<std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$construct@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@AAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@AAU31@@Z
_TEXT	SEGMENT
_<_Args_0>$ = 8						; size = 4
??$construct@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@AAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@AAU31@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::construct<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>, COMDAT
; ___formal$dead$ = ecx
; __Ptr$ = edx

; 879  : 		{	// construct _Objty(_Types...) at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _<_Args_0>$[ebp]
  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	89 02		 mov	 DWORD PTR [edx], eax
  0000a	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0000d	89 42 04	 mov	 DWORD PTR [edx+4], eax

; 880  : 		::new (const_cast<void *>(static_cast<const volatile void *>(_Ptr)))
; 881  : 			_Objty(_STD forward<_Types>(_Args)...);
; 882  : 		}

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
??$construct@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@AAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBW4ImportType@SegmentHeader@@K@std@@PAX@std@@@1@QAU?$pair@$$CBW4ImportType@SegmentHeader@@K@1@AAU31@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,void *> > >::construct<std::pair<enum SegmentHeader::ImportType const ,unsigned long>,std::pair<enum SegmentHeader::ImportType const ,unsigned long> &>
_TEXT	ENDS
END
