; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27034.0 

	TITLE	c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_03KNCNPCCC@OTC@				; `string'
PUBLIC	??_C@_0BC@BMFENILA@Loading?5up?5OTC?4?4?5@	; `string'
PUBLIC	??_C@_0CB@PONPHMNH@?$HM?5?$FL?$HO?$FN?5Performing?5basic?5checks?4?4@ ; `string'
PUBLIC	??_C@_0DK@OACAPHFB@?$HM?5?$FL?9?$FN?5I?5cannot?5run?5OTC?5on?5the?5c@ ; `string'
PUBLIC	??_C@_0DC@NHDBKKLG@?$HM?5?$FL?$HO?$FN?5Please?5upgrade?5to?57?5or?58?0@ ; `string'
PUBLIC	??_C@_0ED@EOFJBFEH@?$HM?5?$FL?$CL?$FN?5Your?5windows?5version?5meet@ ; `string'
PUBLIC	??_C@_0EH@PFJPAFGG@?$HM?5?$FL?9?$FN?5Could?5not?5find?5the?5msvc?5r@ ; `string'
PUBLIC	??_C@_0IE@MADIDBIL@?$HM?5?$FL?$HO?$FN?5You?5can?5download?5and?5inst@ ; `string'
PUBLIC	??_C@_0DL@KKGOFNJE@?$HM?5?$FL?$CL?$FN?5Found?5the?5required?5msvc?5r@ ; `string'
PUBLIC	??_C@_0BJ@DNOPFKIA@?$HM?5?$FL?$CL?$FN?5All?5checks?5passed?4@ ; `string'
PUBLIC	??_C@_0CH@MHEJMGJD@?$HM?5?$FL?$HO?$FN?5Extracting?5segment?5to?5mem@ ; `string'
PUBLIC	??_C@_0CD@CAFJDLOK@?$HM?5?$FL?$HO?$FN?5Reconstructing?5hot?9points@ ; `string'
PUBLIC	??_C@_0DI@CFAIMOHN@?$HM?5?$FL?$CL?$FN?5Wait?5until?5the?5framework?5@ ; `string'
PUBLIC	??_C@_0DC@MPINGACN@?$HM?5?$FL?$HO?$FN?5Filling?5the?5dependency?5ta@ ; `string'
PUBLIC	??_C@_0BK@JDCGCNGO@?$HM?5?$FL?$HO?$FN?5Updating?5netvars?4?4?4@ ; `string'
PUBLIC	??_C@_0CN@KFFMGAJH@?$HM?5?$FL?$HO?$FN?5Creating?5hook?5for?5interna@ ; `string'
PUBLIC	??_C@_0BM@FALAIJHL@?$HM?5?$FL?$HO?$FN?5Updating?5watermark?4?4?4@ ; `string'
PUBLIC	??_C@_0L@EEMOAPMJ@OTC?5Rehost@			; `string'
PUBLIC	??_C@_08JMMIJEMM@USERNAME@			; `string'
PUBLIC	??_C@_0L@BBKHIBA@yajjihack?5@			; `string'
PUBLIC	??_C@_0BG@DLJKLACG@?$HM?5?$FL?$HO?$FN?5Invoking?5OEP?4?4?4@ ; `string'
PUBLIC	??_C@_0BH@IHGHPLEI@?$HM?5?$FL?$CL?$FN?5OTC?5initialized?4@ ; `string'
PUBLIC	??_C@_0EE@PLAPKDLB@Credits?5to?5https?3?1?1www?4github?4c@ ; `string'
PUBLIC	??_C@_0L@PHFEFMEF@client?4dll@			; `string'
PUBLIC	??_C@_0BD@NKPNDPNB@vguimatsurface?4dll@		; `string'
PUBLIC	??_C@_0BB@IDMFBLEL@shaderapidx9?4dll@		; `string'
PUBLIC	??_C@_0M@EINGCJHB@vstdlib?4dll@			; `string'
PUBLIC	??_C@_0CB@KJIDDANE@55?58B?5EC?583?5E4?5F8?583?5EC?570?56A?55@ ; `string'
PUBLIC	??_C@_0BK@EOKMOEOO@56?56A?501?568?5?$DP?5?$DP?5?$DP?5?$DP?58B?5F1@ ; `string'
PUBLIC	??_C@_0DF@CJDDHIEG@55?58B?5EC?583?5E4?5F8?551?553?556?557?58@ ; `string'
PUBLIC	??_C@_0CK@CMLHGGBK@55?58B?5EC?583?5E4?5F8?583?5EC?564?553?55@ ; `string'
PUBLIC	??_C@_0BL@DOALEGMD@51?556?58B?5F1?585?5F6?574?568?583@ ; `string'
PUBLIC	??_C@_0CB@IJIMFMOE@55?58B?5EC?553?58B?55D?508?556?58B?5F1?58@ ; `string'
PUBLIC	??_C@_0CH@JIFLMJLL@55?58B?5EC?583?5E4?5C0?583?5EC?534?553?55@ ; `string'
PUBLIC	??_C@_0BK@GLHNJMEN@8B?50D?5?$DP?5?$DP?5?$DP?5?$DP?58B?546?508?568@ ; `string'
PUBLIC	??_C@_0BI@HDJCOIJC@55?58B?5EC?556?58B?5F1?551?58D@ ; `string'
PUBLIC	??_C@_0DL@EIBMNNHJ@55?58B?5EC?583?5E4?5F8?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP@ ; `string'
PUBLIC	??_C@_0CD@EIEEDCML@55?58B?5EC?5FF?575?518?5F3?50F?510?545?5?$DP@ ; `string'
PUBLIC	??_C@_0CI@KPMIAJJE@55?58B?5EC?551?556?58B?5F1?580?5BE?5?$DP?5?$DP?5@ ; `string'
PUBLIC	??_C@_0DJ@CEFDOBKF@8B?535?5?$DP?5?$DP?5?$DP?5?$DP?5FF?590?5?$DP?5?$DP?5?$DP?5?$DP?550?5@ ; `string'
PUBLIC	??_C@_0CK@DFKOCHGN@B9?5?$DP?5?$DP?5?$DP?5?$DP?5A1?5?$DP?5?$DP?5?$DP?5?$DP?5FF?510?5A1?5@ ; `string'
PUBLIC	??_C@_0CE@KJGDCOM@0F?544?5C8?533?5C0?55E?539?511?50F?594?5C@ ; `string'
PUBLIC	??_C@_0M@MACNFAAE@B0?501?583?5FE@		; `string'
PUBLIC	??_C@_0BH@PAMFABDB@B9?5?$DP?5?$DP?5?$DP?5?$DP?5FF?550?514?55F@ ; `string'
PUBLIC	??_C@_0CJ@JOAILMAE@81?5C6?5?$DP?5?$DP?5?$DP?5?$DP?58B?54E?50C?58B?556?504@ ; `string'
PUBLIC	??_C@_0CD@FHMDKEH@55?58B?5EC?551?556?58B?535?5?$DP?5?$DP?5?$DP?5?$DP?557@ ; `string'
PUBLIC	??_C@_0CL@EEFECCOM@C7?500?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5?$DP?583?5EC?5@ ; `string'
PUBLIC	??_C@_0CD@CLINDDEG@55?58B?5EC?583?5EC?508?58B?515?5?$DP?5?$DP?5?$DP?5?$DP@ ; `string'
PUBLIC	??_C@_0BG@GPJJHLHE@80?5B9?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?575?56C@ ; `string'
PUBLIC	??_C@_0BP@PMDLCGGD@83?53D?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?557?58B?5F9?575?506@ ; `string'
PUBLIC	??_C@_0BB@MBFPJFAI@A1?5?$DP?5?$DP?5?$DP?5?$DP?574?538@ ; `string'
PUBLIC	??_C@_0CK@MBPLAPBK@55?58B?5EC?553?58B?55D?508?556?557?58B?5F@ ; `string'
PUBLIC	??_C@_0CM@PPIJPEML@55?58B?5EC?556?58B?575?50C?557?58B?5F9?5B@ ; `string'
PUBLIC	??_C@_0CE@PNFFJNMC@B9?5?$DP?5?$DP?5?$DP?5?$DP?5A3?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5@ ; `string'
PUBLIC	??_C@_0BO@BNNHFHPN@55?58B?5EC?583?5EC?50C?553?556?58B?571@ ; `string'
PUBLIC	??_C@_0DH@FGAABEAA@B9?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5?$DP?585?5C0?574?5@ ; `string'
PUBLIC	??_C@_0CH@CEFANBNE@55?58B?5EC?551?553?556?58B?575?508?58B?5D@ ; `string'
PUBLIC	??_C@_0HD@POPCBNPK@0F?584?5?$DP?5?$DP?5?$DP?5?$DP?58B?588?5?$DP?5?$DP?5?$DP?5?$DP?583?5@ ; `string'
PUBLIC	??_C@_0BC@HMEMPFIB@84?5C0?574?517?58B?587@	; `string'
PUBLIC	??_C@_0CG@FFELLHH@84?5C0?574?50A?5F3?50F?510?505?5?$DP?5?$DP?5?$DP?5?$DP@ ; `string'
PUBLIC	??_C@_0BE@DLMGOELC@8B?597?5?$DP?5?$DP?5?$DP?5?$DP?556?58B@ ; `string'
PUBLIC	??_C@_0CB@EHCBCFDJ@55?58B?5EC?583?5E4?5F0?583?5EC?57C?556?5F@ ; `string'
PUBLIC	??_C@_0BL@NILMMPDH@55?58B?5EC?58D?551?508?58B?54D?508@ ; `string'
PUBLIC	??_C@_0DB@NJMJDNKE@55?58B?5EC?556?58B?535?5?$DP?5?$DP?5?$DP?5?$DP?585?5F6@ ; `string'
PUBLIC	??_C@_0CF@GJBCBAFI@8B?501?5FF?5B1?5?$DP?5?$DP?5?$DP?5?$DP?5FF?590?5?$DP?5?$DP?5?$DP@ ; `string'
PUBLIC	??_C@_0BI@BINPCKGE@55?58B?5EC?583?5EC?558?556?557@ ; `string'
PUBLIC	??_C@_0BI@PHFBLDMI@53?556?58B?5F1?557?58B?54E?53C@ ; `string'
PUBLIC	??_C@_0CB@FABLCKIN@55?58B?5EC?556?58B?575?508?557?5FF?575?51@ ; `string'
PUBLIC	??_C@_0DG@PEDGIBOM@55?58B?5EC?583?5E4?5F8?583?5EC?50C?553?55@ ; `string'
PUBLIC	??_C@_0CN@OIDCGODA@55?58B?5EC?583?5E4?5F8?583?5EC?50C?553?58@ ; `string'
PUBLIC	??_C@_0CN@EECAACMO@55?58B?5EC?583?5E4?5F8?583?5EC?51C?553?55@ ; `string'
PUBLIC	??_C@_0BN@IIAHNBAC@F3?50F?510?5A6?5?$DP?5?$DP?5?$DP?5?$DP?5F3?50F?511@ ; `string'
PUBLIC	??_C@_0CJ@IBABLOEE@56?58B?5F1?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?557?58B?501@ ; `string'
PUBLIC	??_C@_0CD@FBPNHNGE@55?58B?5EC?583?5EC?510?5A1?5?$DP?5?$DP?5?$DP?5?$DP?589@ ; `string'
PUBLIC	??_C@_0CP@PEBOMIDC@57?58B?5F9?58B?507?58B?580?5?$DP?5?$DP?5?$DP?5?$DP?5FF@ ; `string'
PUBLIC	??_C@_0DA@OAEFGDOI@55?58B?5EC?583?5E4?5F8?583?5EC?55C?553?58@ ; `string'
PUBLIC	??_C@_0CH@OFLNLCEJ@55?58B?5EC?583?5E4?5F8?583?5EC?530?556?55@ ; `string'
PUBLIC	??_C@_0DF@HBNAIIIO@55?58B?5EC?556?5FF?575?508?58B?5F1?58B?50@ ; `string'
PUBLIC	??_C@_0BC@NOOJPJHB@85?5C0?575?530?538?586@	; `string'
PUBLIC	??_C@_0BD@LIBFMOBN@C7?546?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?543@ ; `string'
PUBLIC	??_C@_0BC@CLEEDAAD@85?5C0?574?52D?583?57D@	; `string'
PUBLIC	??_C@_0P@CGNIIJII@75?504?5B0?501?55F@		; `string'
PUBLIC	??_C@_0BC@LFBMICMP@84?5C0?575?50D?5F6?587@	; `string'
PUBLIC	??_C@_0CG@FHMIJDND@84?5C0?575?538?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?58B?501@ ; `string'
PUBLIC	??_C@_0CE@LKCAGEIP@84?5C0?575?509?55F?55E?55B?58B?5E5?55D?5C@ ; `string'
PUBLIC	??_C@_0CJ@FCOBLFNE@55?58B?5EC?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP?553?556?557@ ; `string'
PUBLIC	??_C@_0BK@GIPFPJPJ@F3?50F?510?54D?5?$DP?584?5C0?574?512@ ; `string'
PUBLIC	??_C@_0BE@NOPHJDIG@FF?5D0?5A1?5?$DP?5?$DP?5?$DP?5?$DP?5B9@ ; `string'
PUBLIC	??_C@_0BH@MDINMCPF@E8?5?$DP?5?$DP?5?$DP?5?$DP?5FF?576?50C?58D@ ; `string'
PUBLIC	??_C@_0CK@NDFMKNFD@80?53D?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?574?516?5A1?5?$DP?5?$DP?5?$DP?5@ ; `string'
PUBLIC	??_C@_0DH@GGEIJINE@8B?535?5?$DP?5?$DP?5?$DP?5?$DP?5FF?510?50F?5B7?5C0?5B9@ ; `string'
PUBLIC	??_C@_0BG@DEDHDCDI@83?5BE?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?57F?567@ ; `string'
PUBLIC	??_C@_0CA@CCMNJOJN@E8?5?$DP?5?$DP?5?$DP?5?$DP?5EB?502?533?5C0?557?58B?5BE@ ; `string'
PUBLIC	??_C@_0CG@HDEAFJAI@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?5D0?585?5D2?575?507?532@ ; `string'
PUBLIC	??_C@_0DC@HPKDGOAA@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?546?504?55F?55E?55B?58B@ ; `string'
PUBLIC	??_C@_0M@OEHPONHC@75?54B?50F?557@		; `string'
PUBLIC	??_C@_0CC@NJGBBMJN@0F?5B7?505?5?$DP?5?$DP?5?$DP?5?$DP?53D?5?$DP?5?$DP?5?$DP?5?$DP?574?5@ ; `string'
PUBLIC	??_C@_0M@OFBMICFD@56?58D?551?53C@		; `string'
PUBLIC	??_C@_0BN@JDGIHKEL@E8?5?$DP?5?$DP?5?$DP?5?$DP?583?57D?5D8?500?57C?50F@ ; `string'
PUBLIC	??_C@_0DH@BDJAJANF@55?58B?5EC?583?5E4?5F8?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP@ ; `string'
PUBLIC	??_C@_0BB@HJKEOCJD@E8?5?$DP?5?$DP?5?$DP?5?$DP?599?52B@ ; `string'
PUBLIC	??_C@_0CF@KKAIIKCM@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?50F?557?5@ ; `string'
PUBLIC	??_C@_0M@GHAFGLNO@8D?54E?574?58B@		; `string'
PUBLIC	??_C@_0CB@HIJCDHC@8B?50D?5?$DP?5?$DP?5?$DP?5?$DP?5F6?587?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?58@ ; `string'
PUBLIC	??_C@_0BN@NCEFIOGI@55?58B?5EC?5F3?50F?510?545?5?$DP?556?56A@ ; `string'
PUBLIC	??_C@_0CE@IFHNNPNM@55?58B?5EC?583?5E4?5F8?58B?545?50C?583?5E@ ; `string'
PUBLIC	??_C@_0BI@EHNMLEME@FF?550?518?589?544?524?514?5EB@ ; `string'
PUBLIC	??_C@_0BE@MLEIBKML@A2?5?$DP?5?$DP?5?$DP?5?$DP?58B?545?5E8@ ; `string'
PUBLIC	??_C@_0CB@LHJAFMPF@55?58B?5EC?583?5E4?5F8?551?553?556?58B?5D@ ; `string'
PUBLIC	??_C@_0BL@HOLHFMKH@55?58B?5EC?583?5EC?548?553?58B?55D@ ; `string'
PUBLIC	?OriginalVirtualCaller@SegmentFramework@@2P6IIPAXH@ZA ; SegmentFramework::OriginalVirtualCaller
PUBLIC	?UnsafeAllocatedPointer@Segment@@2KA		; Segment::UnsafeAllocatedPointer
PUBLIC	?UnsafeLibraryPointer@Segment@@2KA		; Segment::UnsafeLibraryPointer
?OriginalVirtualCaller@SegmentFramework@@2P6IIPAXH@ZA DD 01H DUP (?) ; SegmentFramework::OriginalVirtualCaller
?UnsafeAllocatedPointer@Segment@@2KA DD 01H DUP (?)	; Segment::UnsafeAllocatedPointer
?UnsafeLibraryPointer@Segment@@2KA DD 01H DUP (?)	; Segment::UnsafeLibraryPointer
_BSS	ENDS
;	COMDAT ??_C@_0BL@HOLHFMKH@55?58B?5EC?583?5EC?548?553?58B?55D@
CONST	SEGMENT
??_C@_0BL@HOLHFMKH@55?58B?5EC?583?5EC?548?553?58B?55D@ DB '55 8B EC 83 EC'
	DB	' 48 53 8B 5D', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LHJAFMPF@55?58B?5EC?583?5E4?5F8?551?553?556?58B?5D@
CONST	SEGMENT
??_C@_0CB@LHJAFMPF@55?58B?5EC?583?5E4?5F8?551?553?556?58B?5D@ DB '55 8B E'
	DB	'C 83 E4 F8 51 53 56 8B D9', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MLEIBKML@A2?5?$DP?5?$DP?5?$DP?5?$DP?58B?545?5E8@
CONST	SEGMENT
??_C@_0BE@MLEIBKML@A2?5?$DP?5?$DP?5?$DP?5?$DP?58B?545?5E8@ DB 'A2 ? ? ? ?'
	DB	' 8B 45 E8', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EHNMLEME@FF?550?518?589?544?524?514?5EB@
CONST	SEGMENT
??_C@_0BI@EHNMLEME@FF?550?518?589?544?524?514?5EB@ DB 'FF 50 18 89 44 24 '
	DB	'14 EB', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IFHNNPNM@55?58B?5EC?583?5E4?5F8?58B?545?50C?583?5E@
CONST	SEGMENT
??_C@_0CE@IFHNNPNM@55?58B?5EC?583?5E4?5F8?58B?545?50C?583?5E@ DB '55 8B E'
	DB	'C 83 E4 F8 8B 45 0C 83 EC 10', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NCEFIOGI@55?58B?5EC?5F3?50F?510?545?5?$DP?556?56A@
CONST	SEGMENT
??_C@_0BN@NCEFIOGI@55?58B?5EC?5F3?50F?510?545?5?$DP?556?56A@ DB '55 8B EC'
	DB	' F3 0F 10 45 ? 56 6A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HIJCDHC@8B?50D?5?$DP?5?$DP?5?$DP?5?$DP?5F6?587?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?58@
CONST	SEGMENT
??_C@_0CB@HIJCDHC@8B?50D?5?$DP?5?$DP?5?$DP?5?$DP?5F6?587?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?58@ DB '8'
	DB	'B 0D ? ? ? ? F6 87 ? ? ? ? ? 8B', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GHAFGLNO@8D?54E?574?58B@
CONST	SEGMENT
??_C@_0M@GHAFGLNO@8D?54E?574?58B@ DB '8D 4E 74 8B', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KKAIIKCM@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?50F?557?5@
CONST	SEGMENT
??_C@_0CF@KKAIIKCM@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?50F?557?5@ DB 'E'
	DB	'8 ? ? ? ? 8B 0D ? ? ? ? 0F 57 C9 99', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HJKEOCJD@E8?5?$DP?5?$DP?5?$DP?5?$DP?599?52B@
CONST	SEGMENT
??_C@_0BB@HJKEOCJD@E8?5?$DP?5?$DP?5?$DP?5?$DP?599?52B@ DB 'E8 ? ? ? ? 99 '
	DB	'2B', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@BDJAJANF@55?58B?5EC?583?5E4?5F8?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP@
CONST	SEGMENT
??_C@_0DH@BDJAJANF@55?58B?5EC?583?5E4?5F8?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP@ DB '5'
	DB	'5 8B EC 83 E4 F8 81 EC ? ? ? ? A1 ? ? ? ? 53 56 8B D9', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JDGIHKEL@E8?5?$DP?5?$DP?5?$DP?5?$DP?583?57D?5D8?500?57C?50F@
CONST	SEGMENT
??_C@_0BN@JDGIHKEL@E8?5?$DP?5?$DP?5?$DP?5?$DP?583?57D?5D8?500?57C?50F@ DB 'E'
	DB	'8 ? ? ? ? 83 7D D8 00 7C 0F', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFBMICFD@56?58D?551?53C@
CONST	SEGMENT
??_C@_0M@OFBMICFD@56?58D?551?53C@ DB '56 8D 51 3C', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NJGBBMJN@0F?5B7?505?5?$DP?5?$DP?5?$DP?5?$DP?53D?5?$DP?5?$DP?5?$DP?5?$DP?574?5@
CONST	SEGMENT
??_C@_0CC@NJGBBMJN@0F?5B7?505?5?$DP?5?$DP?5?$DP?5?$DP?53D?5?$DP?5?$DP?5?$DP?5?$DP?574?5@ DB '0'
	DB	'F B7 05 ? ? ? ? 3D ? ? ? ? 74 3F', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OEHPONHC@75?54B?50F?557@
CONST	SEGMENT
??_C@_0M@OEHPONHC@75?54B?50F?557@ DB '75 4B 0F 57', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HPKDGOAA@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?546?504?55F?55E?55B?58B@
CONST	SEGMENT
??_C@_0DC@HPKDGOAA@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?546?504?55F?55E?55B?58B@ DB 'E'
	DB	'8 ? ? ? ? 8B 46 04 5F 5E 5B 8B E5 5D C2 08 00 6A', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HDEAFJAI@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?5D0?585?5D2?575?507?532@
CONST	SEGMENT
??_C@_0CG@HDEAFJAI@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?5D0?585?5D2?575?507?532@ DB 'E'
	DB	'8 ? ? ? ? 8B D0 85 D2 75 07 32 C0 5F', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CCMNJOJN@E8?5?$DP?5?$DP?5?$DP?5?$DP?5EB?502?533?5C0?557?58B?5BE@
CONST	SEGMENT
??_C@_0CA@CCMNJOJN@E8?5?$DP?5?$DP?5?$DP?5?$DP?5EB?502?533?5C0?557?58B?5BE@ DB 'E'
	DB	'8 ? ? ? ? EB 02 33 C0 57 8B BE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DEDHDCDI@83?5BE?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?57F?567@
CONST	SEGMENT
??_C@_0BG@DEDHDCDI@83?5BE?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?57F?567@ DB '83 B'
	DB	'E ? ? ? ? ? 7F 67', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GGEIJINE@8B?535?5?$DP?5?$DP?5?$DP?5?$DP?5FF?510?50F?5B7?5C0?5B9@
CONST	SEGMENT
??_C@_0DH@GGEIJINE@8B?535?5?$DP?5?$DP?5?$DP?5?$DP?5FF?510?50F?5B7?5C0?5B9@ DB '8'
	DB	'B 35 ? ? ? ? FF 10 0F B7 C0 B9 ? ? ? ? 50 FF 56 08 85', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NDFMKNFD@80?53D?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?574?516?5A1?5?$DP?5?$DP?5?$DP?5@
CONST	SEGMENT
??_C@_0CK@NDFMKNFD@80?53D?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?574?516?5A1?5?$DP?5?$DP?5?$DP?5@ DB '8'
	DB	'0 3D ? ? ? ? ? 74 16 A1 ? ? ? ? 48 C7 81', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MDINMCPF@E8?5?$DP?5?$DP?5?$DP?5?$DP?5FF?576?50C?58D@
CONST	SEGMENT
??_C@_0BH@MDINMCPF@E8?5?$DP?5?$DP?5?$DP?5?$DP?5FF?576?50C?58D@ DB 'E8 ? ?'
	DB	' ? ? FF 76 0C 8D', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NOPHJDIG@FF?5D0?5A1?5?$DP?5?$DP?5?$DP?5?$DP?5B9@
CONST	SEGMENT
??_C@_0BE@NOPHJDIG@FF?5D0?5A1?5?$DP?5?$DP?5?$DP?5?$DP?5B9@ DB 'FF D0 A1 ?'
	DB	' ? ? ? B9', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GIPFPJPJ@F3?50F?510?54D?5?$DP?584?5C0?574?512@
CONST	SEGMENT
??_C@_0BK@GIPFPJPJ@F3?50F?510?54D?5?$DP?584?5C0?574?512@ DB 'F3 0F 10 4D '
	DB	'? 84 C0 74 12', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FCOBLFNE@55?58B?5EC?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP?553?556?557@
CONST	SEGMENT
??_C@_0CJ@FCOBLFNE@55?58B?5EC?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP?553?556?557@ DB '5'
	DB	'5 8B EC 81 EC ? ? ? ? 53 56 57 8B D9 E8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LKCAGEIP@84?5C0?575?509?55F?55E?55B?58B?5E5?55D?5C@
CONST	SEGMENT
??_C@_0CE@LKCAGEIP@84?5C0?575?509?55F?55E?55B?58B?5E5?55D?5C@ DB '84 C0 7'
	DB	'5 09 5F 5E 5B 8B E5 5D C2 14', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FHMIJDND@84?5C0?575?538?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?58B?501@
CONST	SEGMENT
??_C@_0CG@FHMIJDND@84?5C0?575?538?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?58B?501@ DB '8'
	DB	'4 C0 75 38 8B 0D ? ? ? ? 8B 01 8B 80', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LFBMICMP@84?5C0?575?50D?5F6?587@
CONST	SEGMENT
??_C@_0BC@LFBMICMP@84?5C0?575?50D?5F6?587@ DB '84 C0 75 0D F6 87', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CGNIIJII@75?504?5B0?501?55F@
CONST	SEGMENT
??_C@_0P@CGNIIJII@75?504?5B0?501?55F@ DB '75 04 B0 01 5F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CLEEDAAD@85?5C0?574?52D?583?57D@
CONST	SEGMENT
??_C@_0BC@CLEEDAAD@85?5C0?574?52D?583?57D@ DB '85 C0 74 2D 83 7D', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LIBFMOBN@C7?546?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?543@
CONST	SEGMENT
??_C@_0BD@LIBFMOBN@C7?546?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?543@ DB 'C7 46 ? '
	DB	'? ? ? ? 43', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NOOJPJHB@85?5C0?575?530?538?586@
CONST	SEGMENT
??_C@_0BC@NOOJPJHB@85?5C0?575?530?538?586@ DB '85 C0 75 30 38 86', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@HBNAIIIO@55?58B?5EC?556?5FF?575?508?58B?5F1?58B?50@
CONST	SEGMENT
??_C@_0DF@HBNAIIIO@55?58B?5EC?556?5FF?575?508?58B?5F1?58B?50@ DB '55 8B E'
	DB	'C 56 FF 75 08 8B F1 8B 06 FF 90 ? ? ? ? 8B 86', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@OFLNLCEJ@55?58B?5EC?583?5E4?5F8?583?5EC?530?556?55@
CONST	SEGMENT
??_C@_0CH@OFLNLCEJ@55?58B?5EC?583?5E4?5F8?583?5EC?530?556?55@ DB '55 8B E'
	DB	'C 83 E4 F8 83 EC 30 56 57 8B 3D', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OAEFGDOI@55?58B?5EC?583?5E4?5F8?583?5EC?55C?553?58@
CONST	SEGMENT
??_C@_0DA@OAEFGDOI@55?58B?5EC?583?5E4?5F8?583?5EC?55C?553?58@ DB '55 8B E'
	DB	'C 83 E4 F8 83 EC 5C 53 8B D9 56 57 83 7B', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PEBOMIDC@57?58B?5F9?58B?507?58B?580?5?$DP?5?$DP?5?$DP?5?$DP?5FF@
CONST	SEGMENT
??_C@_0CP@PEBOMIDC@57?58B?5F9?58B?507?58B?580?5?$DP?5?$DP?5?$DP?5?$DP?5FF@ DB '5'
	DB	'7 8B F9 8B 07 8B 80 ? ? ? ? FF D0 84 C0 75 02', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FBPNHNGE@55?58B?5EC?583?5EC?510?5A1?5?$DP?5?$DP?5?$DP?5?$DP?589@
CONST	SEGMENT
??_C@_0CD@FBPNHNGE@55?58B?5EC?583?5EC?510?5A1?5?$DP?5?$DP?5?$DP?5?$DP?589@ DB '5'
	DB	'5 8B EC 83 EC 10 A1 ? ? ? ? 89 4D', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IBABLOEE@56?58B?5F1?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?557?58B?501@
CONST	SEGMENT
??_C@_0CJ@IBABLOEE@56?58B?5F1?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?557?58B?501@ DB '5'
	DB	'6 8B F1 8B 0D ? ? ? ? 57 8B 01 FF 76 70', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IIAHNBAC@F3?50F?510?5A6?5?$DP?5?$DP?5?$DP?5?$DP?5F3?50F?511@
CONST	SEGMENT
??_C@_0BN@IIAHNBAC@F3?50F?510?5A6?5?$DP?5?$DP?5?$DP?5?$DP?5F3?50F?511@ DB 'F'
	DB	'3 0F 10 A6 ? ? ? ? F3 0F 11', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@EECAACMO@55?58B?5EC?583?5E4?5F8?583?5EC?51C?553?55@
CONST	SEGMENT
??_C@_0CN@EECAACMO@55?58B?5EC?583?5E4?5F8?583?5EC?51C?553?55@ DB '55 8B E'
	DB	'C 83 E4 F8 83 EC 1C 53 56 57 8B F9 F7', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@OIDCGODA@55?58B?5EC?583?5E4?5F8?583?5EC?50C?553?58@
CONST	SEGMENT
??_C@_0CN@OIDCGODA@55?58B?5EC?583?5E4?5F8?583?5EC?50C?553?58@ DB '55 8B E'
	DB	'C 83 E4 F8 83 EC 0C 53 8B 5D 08 8B C3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@PEDGIBOM@55?58B?5EC?583?5E4?5F8?583?5EC?50C?553?55@
CONST	SEGMENT
??_C@_0DG@PEDGIBOM@55?58B?5EC?583?5E4?5F8?583?5EC?50C?553?55@ DB '55 8B E'
	DB	'C 83 E4 F8 83 EC 0C 53 56 57 8B 7D 08 8B F1 F3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FABLCKIN@55?58B?5EC?556?58B?575?508?557?5FF?575?51@
CONST	SEGMENT
??_C@_0CB@FABLCKIN@55?58B?5EC?556?58B?575?508?557?5FF?575?51@ DB '55 8B E'
	DB	'C 56 8B 75 08 57 FF 75 18', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PHFBLDMI@53?556?58B?5F1?557?58B?54E?53C@
CONST	SEGMENT
??_C@_0BI@PHFBLDMI@53?556?58B?5F1?557?58B?54E?53C@ DB '53 56 8B F1 57 8B '
	DB	'4E 3C', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BINPCKGE@55?58B?5EC?583?5EC?558?556?557@
CONST	SEGMENT
??_C@_0BI@BINPCKGE@55?58B?5EC?583?5EC?558?556?557@ DB '55 8B EC 83 EC 58 '
	DB	'56 57', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GJBCBAFI@8B?501?5FF?5B1?5?$DP?5?$DP?5?$DP?5?$DP?5FF?590?5?$DP?5?$DP?5?$DP@
CONST	SEGMENT
??_C@_0CF@GJBCBAFI@8B?501?5FF?5B1?5?$DP?5?$DP?5?$DP?5?$DP?5FF?590?5?$DP?5?$DP?5?$DP@ DB '8'
	DB	'B 01 FF B1 ? ? ? ? FF 90 ? ? ? ? 83', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NJMJDNKE@55?58B?5EC?556?58B?535?5?$DP?5?$DP?5?$DP?5?$DP?585?5F6@
CONST	SEGMENT
??_C@_0DB@NJMJDNKE@55?58B?5EC?556?58B?535?5?$DP?5?$DP?5?$DP?5?$DP?585?5F6@ DB '5'
	DB	'5 8B EC 56 8B 35 ? ? ? ? 85 F6 0F 84 ? ? ? ? 81', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NILMMPDH@55?58B?5EC?58D?551?508?58B?54D?508@
CONST	SEGMENT
??_C@_0BL@NILMMPDH@55?58B?5EC?58D?551?508?58B?54D?508@ DB '55 8B EC 8D 51'
	DB	' 08 8B 4D 08', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EHCBCFDJ@55?58B?5EC?583?5E4?5F0?583?5EC?57C?556?5F@
CONST	SEGMENT
??_C@_0CB@EHCBCFDJ@55?58B?5EC?583?5E4?5F0?583?5EC?57C?556?5F@ DB '55 8B E'
	DB	'C 83 E4 F0 83 EC 7C 56 FF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DLMGOELC@8B?597?5?$DP?5?$DP?5?$DP?5?$DP?556?58B@
CONST	SEGMENT
??_C@_0BE@DLMGOELC@8B?597?5?$DP?5?$DP?5?$DP?5?$DP?556?58B@ DB '8B 97 ? ? '
	DB	'? ? 56 8B', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FFELLHH@84?5C0?574?50A?5F3?50F?510?505?5?$DP?5?$DP?5?$DP?5?$DP@
CONST	SEGMENT
??_C@_0CG@FFELLHH@84?5C0?574?50A?5F3?50F?510?505?5?$DP?5?$DP?5?$DP?5?$DP@ DB '8'
	DB	'4 C0 74 0A F3 0F 10 05 ? ? ? ? EB 05', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HMEMPFIB@84?5C0?574?517?58B?587@
CONST	SEGMENT
??_C@_0BC@HMEMPFIB@84?5C0?574?517?58B?587@ DB '84 C0 74 17 8B 87', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HD@POPCBNPK@0F?584?5?$DP?5?$DP?5?$DP?5?$DP?58B?588?5?$DP?5?$DP?5?$DP?5?$DP?583?5@
CONST	SEGMENT
??_C@_0HD@POPCBNPK@0F?584?5?$DP?5?$DP?5?$DP?5?$DP?58B?588?5?$DP?5?$DP?5?$DP?5?$DP?583?5@ DB '0'
	DB	'F 84 ? ? ? ? 8B 88 ? ? ? ? 83 F9 FF 0F 84 ? ? ? ? 0F B7 C1 C1'
	DB	' E0 04 05 ? ? ? ? C1 E9 10 39 48 04 0F 85 ? ? ? ? 8B', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CEFANBNE@55?58B?5EC?551?553?556?58B?575?508?58B?5D@
CONST	SEGMENT
??_C@_0CH@CEFANBNE@55?58B?5EC?551?553?556?58B?575?508?58B?5D@ DB '55 8B E'
	DB	'C 51 53 56 8B 75 08 8B D9 57 6B', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@FGAABEAA@B9?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5?$DP?585?5C0?574?5@
CONST	SEGMENT
??_C@_0DH@FGAABEAA@B9?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5?$DP?585?5C0?574?5@ DB 'B'
	DB	'9 ? ? ? ? E8 ? ? ? ? 85 C0 74 0A 8B 10 8B C8 FF A2 AC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BNNHFHPN@55?58B?5EC?583?5EC?50C?553?556?58B?571@
CONST	SEGMENT
??_C@_0BO@BNNHFHPN@55?58B?5EC?583?5EC?50C?553?556?58B?571@ DB '55 8B EC 8'
	DB	'3 EC 0C 53 56 8B 71', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PNFFJNMC@B9?5?$DP?5?$DP?5?$DP?5?$DP?5A3?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5@
CONST	SEGMENT
??_C@_0CE@PNFFJNMC@B9?5?$DP?5?$DP?5?$DP?5?$DP?5A3?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5@ DB 'B'
	DB	'9 ? ? ? ? A3 ? ? ? ? E8 ? ? ? ? 5D', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PPIJPEML@55?58B?5EC?556?58B?575?50C?557?58B?5F9?5B@
CONST	SEGMENT
??_C@_0CM@PPIJPEML@55?58B?5EC?556?58B?575?50C?557?58B?5F9?5B@ DB '55 8B E'
	DB	'C 56 8B 75 0C 57 8B F9 B9 ? ? ? ? 89', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MBPLAPBK@55?58B?5EC?553?58B?55D?508?556?557?58B?5F@
CONST	SEGMENT
??_C@_0CK@MBPLAPBK@55?58B?5EC?553?58B?55D?508?556?557?58B?5F@ DB '55 8B E'
	DB	'C 53 8B 5D 08 56 57 8B F9 33 F6 39', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBFPJFAI@A1?5?$DP?5?$DP?5?$DP?5?$DP?574?538@
CONST	SEGMENT
??_C@_0BB@MBFPJFAI@A1?5?$DP?5?$DP?5?$DP?5?$DP?574?538@ DB 'A1 ? ? ? ? 74 '
	DB	'38', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PMDLCGGD@83?53D?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?557?58B?5F9?575?506@
CONST	SEGMENT
??_C@_0BP@PMDLCGGD@83?53D?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?557?58B?5F9?575?506@ DB '8'
	DB	'3 3D ? ? ? ? ? 57 8B F9 75 06', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GPJJHLHE@80?5B9?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?575?56C@
CONST	SEGMENT
??_C@_0BG@GPJJHLHE@80?5B9?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?575?56C@ DB '80 B'
	DB	'9 ? ? ? ? ? 75 6C', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CLINDDEG@55?58B?5EC?583?5EC?508?58B?515?5?$DP?5?$DP?5?$DP?5?$DP@
CONST	SEGMENT
??_C@_0CD@CLINDDEG@55?58B?5EC?583?5EC?508?58B?515?5?$DP?5?$DP?5?$DP?5?$DP@ DB '5'
	DB	'5 8B EC 83 EC 08 8B 15 ? ? ? ? 0F', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EEFECCOM@C7?500?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5?$DP?583?5EC?5@
CONST	SEGMENT
??_C@_0CL@EEFECCOM@C7?500?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5?$DP?583?5EC?5@ DB 'C'
	DB	'7 00 ? ? ? ? E8 ? ? ? ? 83 EC 08 8D 4E 74', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FHMDKEH@55?58B?5EC?551?556?58B?535?5?$DP?5?$DP?5?$DP?5?$DP?557@
CONST	SEGMENT
??_C@_0CD@FHMDKEH@55?58B?5EC?551?556?58B?535?5?$DP?5?$DP?5?$DP?5?$DP?557@ DB '5'
	DB	'5 8B EC 51 56 8B 35 ? ? ? ? 57 83', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JOAILMAE@81?5C6?5?$DP?5?$DP?5?$DP?5?$DP?58B?54E?50C?58B?556?504@
CONST	SEGMENT
??_C@_0CJ@JOAILMAE@81?5C6?5?$DP?5?$DP?5?$DP?5?$DP?58B?54E?50C?58B?556?504@ DB '8'
	DB	'1 C6 ? ? ? ? 8B 4E 0C 8B 56 04 89 4D E4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PAMFABDB@B9?5?$DP?5?$DP?5?$DP?5?$DP?5FF?550?514?55F@
CONST	SEGMENT
??_C@_0BH@PAMFABDB@B9?5?$DP?5?$DP?5?$DP?5?$DP?5FF?550?514?55F@ DB 'B9 ? ?'
	DB	' ? ? FF 50 14 5F', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MACNFAAE@B0?501?583?5FE@
CONST	SEGMENT
??_C@_0M@MACNFAAE@B0?501?583?5FE@ DB 'B0 01 83 FE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KJGDCOM@0F?544?5C8?533?5C0?55E?539?511?50F?594?5C@
CONST	SEGMENT
??_C@_0CE@KJGDCOM@0F?544?5C8?533?5C0?55E?539?511?50F?594?5C@ DB '0F 44 C8'
	DB	' 33 C0 5E 39 11 0F 94 C0 C3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DFKOCHGN@B9?5?$DP?5?$DP?5?$DP?5?$DP?5A1?5?$DP?5?$DP?5?$DP?5?$DP?5FF?510?5A1?5@
CONST	SEGMENT
??_C@_0CK@DFKOCHGN@B9?5?$DP?5?$DP?5?$DP?5?$DP?5A1?5?$DP?5?$DP?5?$DP?5?$DP?5FF?510?5A1?5@ DB 'B'
	DB	'9 ? ? ? ? A1 ? ? ? ? FF 10 A1 ? ? ? ? B9', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CEFDOBKF@8B?535?5?$DP?5?$DP?5?$DP?5?$DP?5FF?590?5?$DP?5?$DP?5?$DP?5?$DP?550?5@
CONST	SEGMENT
??_C@_0DJ@CEFDOBKF@8B?535?5?$DP?5?$DP?5?$DP?5?$DP?5FF?590?5?$DP?5?$DP?5?$DP?5?$DP?550?5@ DB '8'
	DB	'B 35 ? ? ? ? FF 90 ? ? ? ? 50 B9 ? ? ? ? FF 56 24 5E C3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KPMIAJJE@55?58B?5EC?551?556?58B?5F1?580?5BE?5?$DP?5?$DP?5@
CONST	SEGMENT
??_C@_0CI@KPMIAJJE@55?58B?5EC?551?556?58B?5F1?580?5BE?5?$DP?5?$DP?5@ DB '5'
	DB	'5 8B EC 51 56 8B F1 80 BE ? ? ? ? ? 74', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EIEEDCML@55?58B?5EC?5FF?575?518?5F3?50F?510?545?5?$DP@
CONST	SEGMENT
??_C@_0CD@EIEEDCML@55?58B?5EC?5FF?575?518?5F3?50F?510?545?5?$DP@ DB '55 8'
	DB	'B EC FF 75 18 F3 0F 10 45 ? 51', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@EIBMNNHJ@55?58B?5EC?583?5E4?5F8?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP@
CONST	SEGMENT
??_C@_0DL@EIBMNNHJ@55?58B?5EC?583?5E4?5F8?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP@ DB '5'
	DB	'5 8B EC 83 E4 F8 81 EC ? ? ? ? 53 56 8B F1 57 89 74 24 1C', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HDJCOIJC@55?58B?5EC?556?58B?5F1?551?58D@
CONST	SEGMENT
??_C@_0BI@HDJCOIJC@55?58B?5EC?556?58B?5F1?551?58D@ DB '55 8B EC 56 8B F1 '
	DB	'51 8D', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GLHNJMEN@8B?50D?5?$DP?5?$DP?5?$DP?5?$DP?58B?546?508?568@
CONST	SEGMENT
??_C@_0BK@GLHNJMEN@8B?50D?5?$DP?5?$DP?5?$DP?5?$DP?58B?546?508?568@ DB '8B'
	DB	' 0D ? ? ? ? 8B 46 08 68', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JIFLMJLL@55?58B?5EC?583?5E4?5C0?583?5EC?534?553?55@
CONST	SEGMENT
??_C@_0CH@JIFLMJLL@55?58B?5EC?583?5E4?5C0?583?5EC?534?553?55@ DB '55 8B E'
	DB	'C 83 E4 C0 83 EC 34 53 56 8B 75', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IJIMFMOE@55?58B?5EC?553?58B?55D?508?556?58B?5F1?58@
CONST	SEGMENT
??_C@_0CB@IJIMFMOE@55?58B?5EC?553?58B?55D?508?556?58B?5F1?58@ DB '55 8B E'
	DB	'C 53 8B 5D 08 56 8B F1 83', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DOALEGMD@51?556?58B?5F1?585?5F6?574?568?583@
CONST	SEGMENT
??_C@_0BL@DOALEGMD@51?556?58B?5F1?585?5F6?574?568?583@ DB '51 56 8B F1 85'
	DB	' F6 74 68 83', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CMLHGGBK@55?58B?5EC?583?5E4?5F8?583?5EC?564?553?55@
CONST	SEGMENT
??_C@_0CK@CMLHGGBK@55?58B?5EC?583?5E4?5F8?583?5EC?564?553?55@ DB '55 8B E'
	DB	'C 83 E4 F8 83 EC 64 53 56 57 8B F1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@CJDDHIEG@55?58B?5EC?583?5E4?5F8?551?553?556?557?58@
CONST	SEGMENT
??_C@_0DF@CJDDHIEG@55?58B?5EC?583?5E4?5F8?551?553?556?557?58@ DB '55 8B E'
	DB	'C 83 E4 F8 51 53 56 57 8B F1 E8 ? ? ? ? 8B 7D', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EOKMOEOO@56?56A?501?568?5?$DP?5?$DP?5?$DP?5?$DP?58B?5F1@
CONST	SEGMENT
??_C@_0BK@EOKMOEOO@56?56A?501?568?5?$DP?5?$DP?5?$DP?5?$DP?58B?5F1@ DB '56'
	DB	' 6A 01 68 ? ? ? ? 8B F1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KJIDDANE@55?58B?5EC?583?5E4?5F8?583?5EC?570?56A?55@
CONST	SEGMENT
??_C@_0CB@KJIDDANE@55?58B?5EC?583?5E4?5F8?583?5EC?570?56A?55@ DB '55 8B E'
	DB	'C 83 E4 F8 83 EC 70 6A 58', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EINGCJHB@vstdlib?4dll@
CONST	SEGMENT
??_C@_0M@EINGCJHB@vstdlib?4dll@ DB 'vstdlib.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IDMFBLEL@shaderapidx9?4dll@
CONST	SEGMENT
??_C@_0BB@IDMFBLEL@shaderapidx9?4dll@ DB 'shaderapidx9.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NKPNDPNB@vguimatsurface?4dll@
CONST	SEGMENT
??_C@_0BD@NKPNDPNB@vguimatsurface?4dll@ DB 'vguimatsurface.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PHFEFMEF@client?4dll@
CONST	SEGMENT
??_C@_0L@PHFEFMEF@client?4dll@ DB 'client.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@PLAPKDLB@Credits?5to?5https?3?1?1www?4github?4c@
CONST	SEGMENT
??_C@_0EE@PLAPKDLB@Credits?5to?5https?3?1?1www?4github?4c@ DB 'Credits to'
	DB	' https://www.github.com/0x000cb for the original build :)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IHGHPLEI@?$HM?5?$FL?$CL?$FN?5OTC?5initialized?4@
CONST	SEGMENT
??_C@_0BH@IHGHPLEI@?$HM?5?$FL?$CL?$FN?5OTC?5initialized?4@ DB '| [+] OTC '
	DB	'initialized.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DLJKLACG@?$HM?5?$FL?$HO?$FN?5Invoking?5OEP?4?4?4@
CONST	SEGMENT
??_C@_0BG@DLJKLACG@?$HM?5?$FL?$HO?$FN?5Invoking?5OEP?4?4?4@ DB '| [~] Inv'
	DB	'oking OEP...', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BBKHIBA@yajjihack?5@
CONST	SEGMENT
??_C@_0L@BBKHIBA@yajjihack?5@ DB 'yajjihack ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JMMIJEMM@USERNAME@
CONST	SEGMENT
??_C@_08JMMIJEMM@USERNAME@ DB 'USERNAME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEMOAPMJ@OTC?5Rehost@
CONST	SEGMENT
??_C@_0L@EEMOAPMJ@OTC?5Rehost@ DB 'OTC Rehost', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FALAIJHL@?$HM?5?$FL?$HO?$FN?5Updating?5watermark?4?4?4@
CONST	SEGMENT
??_C@_0BM@FALAIJHL@?$HM?5?$FL?$HO?$FN?5Updating?5watermark?4?4?4@ DB '| ['
	DB	'~] Updating watermark...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KFFMGAJH@?$HM?5?$FL?$HO?$FN?5Creating?5hook?5for?5interna@
CONST	SEGMENT
??_C@_0CN@KFFMGAJH@?$HM?5?$FL?$HO?$FN?5Creating?5hook?5for?5interna@ DB '|'
	DB	' [~] Creating hook for internal function...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JDCGCNGO@?$HM?5?$FL?$HO?$FN?5Updating?5netvars?4?4?4@
CONST	SEGMENT
??_C@_0BK@JDCGCNGO@?$HM?5?$FL?$HO?$FN?5Updating?5netvars?4?4?4@ DB '| [~]'
	DB	' Updating netvars...', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@MPINGACN@?$HM?5?$FL?$HO?$FN?5Filling?5the?5dependency?5ta@
CONST	SEGMENT
??_C@_0DC@MPINGACN@?$HM?5?$FL?$HO?$FN?5Filling?5the?5dependency?5ta@ DB '|'
	DB	' [~] Filling the dependency table... (~7-15 sec)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@CFAIMOHN@?$HM?5?$FL?$CL?$FN?5Wait?5until?5the?5framework?5@
CONST	SEGMENT
??_C@_0DI@CFAIMOHN@?$HM?5?$FL?$CL?$FN?5Wait?5until?5the?5framework?5@ DB '|'
	DB	' [+] Wait until the framework complete routine work...', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CAFJDLOK@?$HM?5?$FL?$HO?$FN?5Reconstructing?5hot?9points@
CONST	SEGMENT
??_C@_0CD@CAFJDLOK@?$HM?5?$FL?$HO?$FN?5Reconstructing?5hot?9points@ DB '|'
	DB	' [~] Reconstructing hot-points...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MHEJMGJD@?$HM?5?$FL?$HO?$FN?5Extracting?5segment?5to?5mem@
CONST	SEGMENT
??_C@_0CH@MHEJMGJD@?$HM?5?$FL?$HO?$FN?5Extracting?5segment?5to?5mem@ DB '|'
	DB	' [~] Extracting segment to memory....', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DNOPFKIA@?$HM?5?$FL?$CL?$FN?5All?5checks?5passed?4@
CONST	SEGMENT
??_C@_0BJ@DNOPFKIA@?$HM?5?$FL?$CL?$FN?5All?5checks?5passed?4@ DB '| [+] A'
	DB	'll checks passed.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@KKGOFNJE@?$HM?5?$FL?$CL?$FN?5Found?5the?5required?5msvc?5r@
CONST	SEGMENT
??_C@_0DL@KKGOFNJE@?$HM?5?$FL?$CL?$FN?5Found?5the?5required?5msvc?5r@ DB '|'
	DB	' [+] Found the required msvc redist build on your system.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IE@MADIDBIL@?$HM?5?$FL?$HO?$FN?5You?5can?5download?5and?5inst@
CONST	SEGMENT
??_C@_0IE@MADIDBIL@?$HM?5?$FL?$HO?$FN?5You?5can?5download?5and?5inst@ DB '|'
	DB	' [~] You can download and install the redist build from here:'
	DB	' https://www.microsoft.com/en-us/download/confirmation.aspx?i'
	DB	'd=52685.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@PFJPAFGG@?$HM?5?$FL?9?$FN?5Could?5not?5find?5the?5msvc?5r@
CONST	SEGMENT
??_C@_0EH@PFJPAFGG@?$HM?5?$FL?9?$FN?5Could?5not?5find?5the?5msvc?5r@ DB '|'
	DB	' [-] Could not find the msvc redist package installed on your'
	DB	' system.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@EOFJBFEH@?$HM?5?$FL?$CL?$FN?5Your?5windows?5version?5meet@
CONST	SEGMENT
??_C@_0ED@EOFJBFEH@?$HM?5?$FL?$CL?$FN?5Your?5windows?5version?5meet@ DB '|'
	DB	' [+] Your windows version meets the requirements for running '
	DB	'OTC.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@NHDBKKLG@?$HM?5?$FL?$HO?$FN?5Please?5upgrade?5to?57?5or?58?0@
CONST	SEGMENT
??_C@_0DC@NHDBKKLG@?$HM?5?$FL?$HO?$FN?5Please?5upgrade?5to?57?5or?58?0@ DB '|'
	DB	' [~] Please upgrade to 7 or 8, or 10. (PC build)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@OACAPHFB@?$HM?5?$FL?9?$FN?5I?5cannot?5run?5OTC?5on?5the?5c@
CONST	SEGMENT
??_C@_0DK@OACAPHFB@?$HM?5?$FL?9?$FN?5I?5cannot?5run?5OTC?5on?5the?5c@ DB '|'
	DB	' [-] I cannot run OTC on the current version of Windows.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PONPHMNH@?$HM?5?$FL?$HO?$FN?5Performing?5basic?5checks?4?4@
CONST	SEGMENT
??_C@_0CB@PONPHMNH@?$HM?5?$FL?$HO?$FN?5Performing?5basic?5checks?4?4@ DB '|'
	DB	' [~] Performing basic checks...', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BMFENILA@Loading?5up?5OTC?4?4?5@
CONST	SEGMENT
??_C@_0BC@BMFENILA@Loading?5up?5OTC?4?4?5@ DB 'Loading up OTC.. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KNCNPCCC@OTC@
CONST	SEGMENT
??_C@_03KNCNPCCC@OTC@ DB 'OTC', 00H			; `string'
PUBLIC	??$_Copy_memmove@PBQBDPAPBD@std@@YAPAPBDPBQBD0PAPBD@Z ; std::_Copy_memmove<char const * const *,char const * *>
PUBLIC	??$_Copy_memmove@PBURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAPAURelocatedNetVar@SegmentFramework@@PBU12@0PAU12@@Z ; std::_Copy_memmove<SegmentFramework::RelocatedNetVar const *,SegmentFramework::RelocatedNetVar *>
PUBLIC	??$_Uninitialized_copy_al_unchecked@QBDPBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0QAPBDAAV?$allocator@PBD@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<char const * const,char const *,std::allocator<char const *> >
PUBLIC	??$_Ptr_copy_cat@QBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBQBDABQAPBD@Z ; std::_Ptr_copy_cat<char const * const,char const *>
PUBLIC	??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z	; std::_Get_unwrapped<char const * const>
PUBLIC	??$_Uninitialized_copy_al_unchecked@$$CBURelocatedNetVar@SegmentFramework@@U12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QBU12@0QAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<SegmentFramework::RelocatedNetVar const ,SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??$_Ptr_copy_cat@$$CBURelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBURelocatedNetVar@SegmentFramework@@ABQAU23@@Z ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar const ,SegmentFramework::RelocatedNetVar>
PUBLIC	??$_Get_unwrapped@$$CBURelocatedNetVar@SegmentFramework@@@std@@YAPBURelocatedNetVar@SegmentFramework@@QBU12@@Z ; std::_Get_unwrapped<SegmentFramework::RelocatedNetVar const >
PUBLIC	??$_Copy_memmove@PAURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAPAURelocatedNetVar@SegmentFramework@@PAU12@00@Z ; std::_Copy_memmove<SegmentFramework::RelocatedNetVar *,SegmentFramework::RelocatedNetVar *>
PUBLIC	??$_Idl_distance@PBQBDPBQBD@std@@YAHABQBQBD0@Z	; std::_Idl_distance<char const * const *,char const * const *>
PUBLIC	??$_Uninitialized_copy@PBQBDPAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0PAPBDAAV?$allocator@PBD@0@@Z ; std::_Uninitialized_copy<char const * const *,char const * *,std::allocator<char const *> >
PUBLIC	??$_Distance1@PBQBD@std@@YAHPBQBD0Urandom_access_iterator_tag@0@@Z ; std::_Distance1<char const * const *>
PUBLIC	??$_Idl_distance@PBURelocatedNetVar@SegmentFramework@@PBU12@@std@@YAHABQBURelocatedNetVar@SegmentFramework@@0@Z ; std::_Idl_distance<SegmentFramework::RelocatedNetVar const *,SegmentFramework::RelocatedNetVar const *>
PUBLIC	??$_Uninitialized_copy@PBURelocatedNetVar@SegmentFramework@@PAU12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QBU12@0PAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z ; std::_Uninitialized_copy<SegmentFramework::RelocatedNetVar const *,SegmentFramework::RelocatedNetVar *,std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??$_Distance1@PBURelocatedNetVar@SegmentFramework@@@std@@YAHPBURelocatedNetVar@SegmentFramework@@0Urandom_access_iterator_tag@0@@Z ; std::_Distance1<SegmentFramework::RelocatedNetVar const *>
PUBLIC	??$_Seek_wrapped@URelocatedNetVar@SegmentFramework@@@std@@YAXAAPAURelocatedNetVar@SegmentFramework@@QAU12@@Z ; std::_Seek_wrapped<SegmentFramework::RelocatedNetVar>
PUBLIC	??$_Uninitialized_copy_al_unchecked@URelocatedNetVar@SegmentFramework@@U12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@00AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<SegmentFramework::RelocatedNetVar,SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??$_Ptr_copy_cat@URelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAURelocatedNetVar@SegmentFramework@@0@Z ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar,SegmentFramework::RelocatedNetVar>
PUBLIC	??$_Get_unwrapped_n@URelocatedNetVar@SegmentFramework@@H$0A@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@H@Z ; std::_Get_unwrapped_n<SegmentFramework::RelocatedNetVar,int,0>
PUBLIC	??$_Get_unwrapped@URelocatedNetVar@SegmentFramework@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@@Z ; std::_Get_unwrapped<SegmentFramework::RelocatedNetVar>
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1><>
PUBLIC	??$_Destroy_range1@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAXPAURelocatedNetVar@SegmentFramework@@0AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??$_Ucopy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPBQBD0PAPBD@Z ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * const *>
PUBLIC	??$distance@PBQBD@std@@YAHPBQBD0@Z		; std::distance<char const * const *>
PUBLIC	??$?0ABV?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PBD@1@@Z ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> const &>
PUBLIC	??$forward@ABV?$allocator@PBD@std@@@std@@YAABV?$allocator@PBD@0@ABV10@@Z ; std::forward<std::allocator<char const *> const &>
PUBLIC	??$_Ucopy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEPAURelocatedNetVar@SegmentFramework@@PBU23@0PAU23@@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Ucopy<SegmentFramework::RelocatedNetVar const *>
PUBLIC	??$distance@PBURelocatedNetVar@SegmentFramework@@@std@@YAHPBURelocatedNetVar@SegmentFramework@@0@Z ; std::distance<SegmentFramework::RelocatedNetVar const *>
PUBLIC	??$?0ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@$$V@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1><std::allocator<SegmentFramework::RelocatedNetVar> const &>
PUBLIC	??$forward@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAABV?$allocator@URelocatedNetVar@SegmentFramework@@@0@ABV10@@Z ; std::forward<std::allocator<SegmentFramework::RelocatedNetVar> const &>
PUBLIC	??$_Idl_distance@PAURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAHABQAURelocatedNetVar@SegmentFramework@@0@Z ; std::_Idl_distance<SegmentFramework::RelocatedNetVar *,SegmentFramework::RelocatedNetVar *>
PUBLIC	??$_Uninitialized_copy@PAURelocatedNetVar@SegmentFramework@@PAU12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@0PAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z ; std::_Uninitialized_copy<SegmentFramework::RelocatedNetVar *,SegmentFramework::RelocatedNetVar *,std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??$?0V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@$$V@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1><std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??$forward@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YA$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@AAV10@@Z ; std::forward<std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??$?0ABU?$less@PBD@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PBD@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1><std::less<char const *> const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Destroy_range@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAXPAURelocatedNetVar@SegmentFramework@@0AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z ; std::_Destroy_range<std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>
PUBLIC	??$?0ABV?$allocator@PBD@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > ><std::allocator<char const *> const &,void>
PUBLIC	??$_Range_construct_or_tidy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPBURelocatedNetVar@SegmentFramework@@0Uforward_iterator_tag@1@@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Range_construct_or_tidy<SegmentFramework::RelocatedNetVar const *>
PUBLIC	??$?0ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAE@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > ><std::allocator<SegmentFramework::RelocatedNetVar> const &,void>
PUBLIC	??$_Ucopy@PAURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEPAURelocatedNetVar@SegmentFramework@@PAU23@00@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Ucopy<SegmentFramework::RelocatedNetVar *>
PUBLIC	??$?0V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAE@$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > ><std::allocator<SegmentFramework::RelocatedNetVar>,void>
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myend
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@SAIABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@@Z ; std::_Default_allocator_traits<std::allocator<SegmentFramework::RelocatedNetVar> >::max_size
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAEAAV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_second
PUBLIC	??0?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@@Z ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >
PUBLIC	?deallocate@?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAEXQAURelocatedNetVar@SegmentFramework@@I@Z ; std::allocator<SegmentFramework::RelocatedNetVar>::deallocate
PUBLIC	?allocate@?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@I@Z ; std::allocator<SegmentFramework::RelocatedNetVar>::allocate
PUBLIC	?max_size@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::max_size
PUBLIC	?capacity@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::capacity
PUBLIC	?_Destroy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPAURelocatedNetVar@SegmentFramework@@0@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Destroy
PUBLIC	?_Xlength@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@CAXXZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Xlength
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Get_data
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myend
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QBEABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_first
PUBLIC	??0?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@@Z ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >
PUBLIC	?size@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::size
PUBLIC	?_Buy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAE_NI@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Buy
PUBLIC	?_Tidy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXXZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Tidy
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Getal
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Mylast
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@SA?AV?$allocator@URelocatedNetVar@SegmentFramework@@@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<SegmentFramework::RelocatedNetVar> >::select_on_container_copy_construction
PUBLIC	?begin@?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QBEPBURelocatedNetVar@SegmentFramework@@XZ ; std::initializer_list<SegmentFramework::RelocatedNetVar>::begin
PUBLIC	?end@?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QBEPBURelocatedNetVar@SegmentFramework@@XZ ; std::initializer_list<SegmentFramework::RelocatedNetVar>::end
PUBLIC	?begin@?$initializer_list@PBD@std@@QBEPBQBDXZ	; std::initializer_list<char const *>::begin
PUBLIC	?end@?$initializer_list@PBD@std@@QBEPBQBDXZ	; std::initializer_list<char const *>::end
PUBLIC	??0?$allocator@PBD@std@@QAE@XZ			; std::allocator<char const *>::allocator<char const *>
PUBLIC	??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
PUBLIC	??0?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ ; std::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >
PUBLIC	??0?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAE@XZ ; std::allocator<SegmentFramework::RelocatedNetVar>::allocator<SegmentFramework::RelocatedNetVar>
PUBLIC	??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@V?$initializer_list@URelocatedNetVar@SegmentFramework@@@1@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??1?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::~vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
PUBLIC	??0?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QAE@PBURelocatedNetVar@SegmentFramework@@0@Z ; std::initializer_list<SegmentFramework::RelocatedNetVar>::initializer_list<SegmentFramework::RelocatedNetVar>
PUBLIC	??0?$initializer_list@PBD@std@@QAE@PBQBD0@Z	; std::initializer_list<char const *>::initializer_list<char const *>
PUBLIC	??0SegmentFramework@@QAE@XZ			; SegmentFramework::SegmentFramework
PUBLIC	?__autoclassinit2@Segment@@QAEXI@Z		; Segment::__autoclassinit2
PUBLIC	??1Segment@@QAE@XZ				; Segment::~Segment
PUBLIC	??0Segment@@QAE@XZ				; Segment::Segment
PUBLIC	_DllMain@12
PUBLIC	??0RuntimeHandler@@QAE@AAVSegment@@@Z		; RuntimeHandler::RuntimeHandler
PUBLIC	??1SegmentFramework@@QAE@XZ			; SegmentFramework::~SegmentFramework
PUBLIC	??0SegmentFramework@@QAE@ABV0@@Z		; SegmentFramework::SegmentFramework
PUBLIC	?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ ; Segment::GetFramework
PUBLIC	??0SegmentHeader@@QAE@XZ			; SegmentHeader::SegmentHeader
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0SegmentHeader@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SegmentHeader@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0SegmentHeader@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SegmentHeader@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SegmentHeader@@QAE@XZ$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0SegmentFramework@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SegmentFramework@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0SegmentFramework@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SegmentFramework@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SegmentFramework@@QAE@ABV0@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$_DllMain@12 DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$_DllMain@12
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
	ORG $+4
__unwindtable$_DllMain@12 DD 0ffffffffH
	DD	FLAT:__unwindfunclet$_DllMain@12$9
	DD	00H
	DD	FLAT:__unwindfunclet$_DllMain@12$10
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_DllMain@12$7
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$_DllMain@12$0
	DD	03H
	DD	FLAT:__unwindfunclet$_DllMain@12$1
	DD	03H
	DD	FLAT:__unwindfunclet$_DllMain@12$2
	DD	03H
	DD	FLAT:__unwindfunclet$_DllMain@12$3
	DD	03H
	DD	FLAT:__unwindfunclet$_DllMain@12$4
	DD	03H
	DD	FLAT:__unwindfunclet$_DllMain@12$5
	DD	03H
	DD	FLAT:__unwindfunclet$_DllMain@12$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0Segment@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0Segment@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0Segment@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Segment@@QAE@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$??0Segment@@QAE@XZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??0Segment@@QAE@XZ$0
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0SegmentFramework@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0SegmentFramework@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0SegmentFramework@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0SegmentFramework@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0SegmentFramework@@QAE@XZ$1
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
;	COMDAT ??0SegmentHeader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0SegmentHeader@@QAE@XZ PROC				; SegmentHeader::SegmentHeader, COMDAT
; _this$ = ecx

; 50   :     SegmentHeader () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SegmentHeader@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 08	 sub	 esp, 8
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  0002b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00031	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00038	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
  0003d	89 06		 mov	 DWORD PTR [esi], eax
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h

; 50   :     SegmentHeader () {

  0003f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00046	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 390  : 		_Mylast(),

  0004d	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 391  : 		_Myend()

  00054	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h

; 51   :         FillImports ();

  0005b	8b ce		 mov	 ecx, esi
  0005d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00061	e8 00 00 00 00	 call	 ?FillImports@SegmentHeader@@AAEXXZ ; SegmentHeader::FillImports

; 52   :         FillRelocations ();

  00066	8b ce		 mov	 ecx, esi
  00068	e8 00 00 00 00	 call	 ?FillRelocations@SegmentHeader@@AAEXXZ ; SegmentHeader::FillRelocations

; 53   :     }

  0006d	8b c6		 mov	 eax, esi
  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5e		 pop	 esi
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SegmentHeader@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0SegmentHeader@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 08	 add	 ecx, 8
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__ehhandler$??0SegmentHeader@@QAE@XZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SegmentHeader@@QAE@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SegmentHeader@@QAE@XZ ENDP				; SegmentHeader::SegmentHeader
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
;	COMDAT ?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ PROC	; Segment::GetFramework, COMDAT
; _this$ = ecx

; 43   : 	SegmentFramework GetFramework () {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	57		 push	 edi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 44   : 		return m_Framework;

  00024	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00027	8d 71 14	 lea	 esi, DWORD PTR [ecx+20]
  0002a	56		 push	 esi
  0002b	8b cf		 mov	 ecx, edi
  0002d	e8 00 00 00 00	 call	 ??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
  00032	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00035	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003c	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
  00045	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  00048	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004c	51		 push	 ecx
  0004d	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00050	e8 00 00 00 00	 call	 ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
  00055	8b c7		 mov	 eax, edi

; 45   :     }

  00057	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00061	59		 pop	 ecx
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ$1:
  00000	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::~vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
__unwindfunclet$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ$2:
  00008	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  0000b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
__ehhandler$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ ENDP	; Segment::GetFramework
; Function compile flags: /Ogtp
;	COMDAT ??0SegmentFramework@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0SegmentFramework@@QAE@ABV0@@Z PROC			; SegmentFramework::SegmentFramework, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SegmentFramework@@QAE@ABV0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi
  0002a	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  0002d	56		 push	 esi
  0002e	e8 00 00 00 00	 call	 ??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@ABV01@@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
  00033	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  00036	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003d	8d 4f 0c	 lea	 ecx, DWORD PTR [edi+12]
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
  00046	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00049	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0004d	50		 push	 eax
  0004e	8d 4f 18	 lea	 ecx, DWORD PTR [edi+24]
  00051	e8 00 00 00 00	 call	 ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@ABV01@@Z ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
  00056	8b c7		 mov	 eax, edi
  00058	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0005b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00062	59		 pop	 ecx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SegmentFramework@@QAE@ABV0@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::~vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
__unwindfunclet$??0SegmentFramework@@QAE@ABV0@@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
__ehhandler$??0SegmentFramework@@QAE@ABV0@@Z:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  0001d	33 c8		 xor	 ecx, eax
  0001f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00024	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SegmentFramework@@QAE@ABV0@@Z
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SegmentFramework@@QAE@ABV0@@Z ENDP			; SegmentFramework::SegmentFramework
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??1SegmentFramework@@QAE@XZ
_TEXT	SEGMENT
??1SegmentFramework@@QAE@XZ PROC			; SegmentFramework::~SegmentFramework, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1913 : 		if (this->_Myfirst() != pointer())

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00006	85 c0		 test	 eax, eax
  00008	74 45		 je	 SHORT $LN6@SegmentFra

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0000a	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0000d	2b c8		 sub	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000f	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00012	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00018	72 16		 jb	 SHORT $LN82@SegmentFra

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  0001a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001d	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00020	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00022	83 c0 fc	 add	 eax, -4			; fffffffcH
  00025	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00028	0f 87 b1 00 00
	00		 ja	 $LN284@SegmentFra

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  0002e	8b c2		 mov	 eax, edx
$LN82@SegmentFra:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00030	51		 push	 ecx
  00031	50		 push	 eax
  00032	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00037	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  0003e	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  00041	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 1920 : 			this->_Myend() = pointer();

  00048	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN6@SegmentFra:

; 1913 : 		if (this->_Myfirst() != pointer())

  0004f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00052	85 c0		 test	 eax, eax
  00054	74 41		 je	 SHORT $LN109@SegmentFra

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00056	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00059	2b c8		 sub	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0005b	83 e1 fc	 and	 ecx, -4			; fffffffcH

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  0005e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00064	72 12		 jb	 SHORT $LN185@SegmentFra

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00066	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00069	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0006c	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0006e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00071	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00074	77 69		 ja	 SHORT $LN284@SegmentFra

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00076	8b c2		 mov	 eax, edx
$LN185@SegmentFra:

; 207  : 	::operator delete(_Ptr, _Bytes);

  00078	51		 push	 ecx
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  0007f	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00086	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  00089	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 1920 : 			this->_Myend() = pointer();

  00090	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LN109@SegmentFra:

; 1913 : 		if (this->_Myfirst() != pointer())

  00097	8b 06		 mov	 eax, DWORD PTR [esi]
  00099	85 c0		 test	 eax, eax
  0009b	74 40		 je	 SHORT $LN211@SegmentFra

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  0009d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a0	2b c8		 sub	 ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  000a2	83 e1 f8	 and	 ecx, -8			; fffffff8H

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  000a5	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000ab	72 12		 jb	 SHORT $LN287@SegmentFra

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  000ad	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000b0	83 c1 23	 add	 ecx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000b3	2b c2		 sub	 eax, edx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000b5	83 c0 fc	 add	 eax, -4			; fffffffcH
  000b8	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000bb	77 22		 ja	 SHORT $LN284@SegmentFra

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  000bd	8b c2		 mov	 eax, edx
$LN287@SegmentFra:

; 207  : 	::operator delete(_Ptr, _Bytes);

  000bf	51		 push	 ecx
  000c0	50		 push	 eax
  000c1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  000c6	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  000cc	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  000cf	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  000d6	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN211@SegmentFra:
  000dd	5e		 pop	 esi
  000de	c3		 ret	 0
$LN284@SegmentFra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN310@SegmentFra:
  000e5	cc		 int	 3
??1SegmentFramework@@QAE@XZ ENDP			; SegmentFramework::~SegmentFramework
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\headers\runtime\runtimehandler.h
;	COMDAT ??0RuntimeHandler@@QAE@AAVSegment@@@Z
_TEXT	SEGMENT
_segment$ = 8						; size = 4
??0RuntimeHandler@@QAE@AAVSegment@@@Z PROC		; RuntimeHandler::RuntimeHandler, COMDAT
; _this$ = ecx

; 9    :     RuntimeHandler (Segment& segment) : m_Segment (segment) {}

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 45 08	 mov	 eax, DWORD PTR _segment$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b c1		 mov	 eax, ecx
  0000a	5d		 pop	 ebp
  0000b	c2 04 00	 ret	 4
??0RuntimeHandler@@QAE@AAVSegment@@@Z ENDP		; RuntimeHandler::RuntimeHandler
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\headers\runtime\runtimehandler.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\logger.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\logger.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\gameframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\logger.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\logger.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\gameframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\libs\libs\hooklib\hooklib\hooklib\hooklib.c
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp
;	COMDAT _DllMain@12
_TEXT	SEGMENT
$T39 = -944						; size = 36
$T35 = -908						; size = 36
$T31 = -872						; size = 36
$T26 = -836						; size = 36
$T17 = -800						; size = 36
$T16 = -764						; size = 36
_runtime$42 = -728					; size = 4
_FixupInfo$43 = -724					; size = 20
_Address$44 = -704					; size = 4
_this$ = -704						; size = 4
_Base$45 = -700						; size = 4
_osVersionInfo$46 = -696				; size = 284
_osVersionInfo$47 = -412				; size = 276
_segment$48 = -136					; size = 56
_Size$49 = -80						; size = 4
_Size$50 = -76						; size = 4
_OldProtect$51 = -72					; size = 4
_logger$52 = -68					; size = 24
_watermark$53 = -44					; size = 16
_watermark$54 = -28					; size = 12
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_module$ = 8						; size = 4
_callReason$ = 12					; size = 4
_lpReserved$ = 16					; size = 4
_DllMain@12 PROC					; COMDAT

; 25   : BOOL APIENTRY DllMain (HMODULE module, DWORD callReason, LPVOID lpReserved) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$_DllMain@12
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a4 03 00
	00		 sub	 esp, 932		; 000003a4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 26   : 
; 27   :     //ALL DOCS INSIDE FUNCTIONS, AND HEADERS.
; 28   : 
; 29   :     if (callReason == DLL_PROCESS_ATTACH) {

  0002d	83 7d 0c 01	 cmp	 DWORD PTR _callReason$[ebp], 1
  00031	0f 85 aa 06 00
	00		 jne	 $LN255@DllMain
  00037	6a 38		 push	 56			; 00000038H
  00039	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _segment$48[ebp]
  0003f	6a 00		 push	 0
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 _memset
  00047	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  0004a	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _segment$48[ebp], 0
  00054	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _segment$48[ebp]

; 469  : 		_Mysize(0)

  0005a	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _segment$48[ebp+4], 0
  00064	89 85 40 fd ff
	ff		 mov	 DWORD PTR _this$[ebp], eax

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  0006a	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
  0006f	89 85 78 ff ff
	ff		 mov	 DWORD PTR _segment$48[ebp], eax
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h

; 50   :     SegmentHeader () {

  00075	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  0007c	c7 45 80 00 00
	00 00		 mov	 DWORD PTR _segment$48[ebp+8], 0

; 390  : 		_Mylast(),

  00083	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _segment$48[ebp+12], 0

; 391  : 		_Myend()

  0008a	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _segment$48[ebp+16], 0
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h

; 51   :         FillImports ();

  00091	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  00097	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0009b	e8 00 00 00 00	 call	 ?FillImports@SegmentHeader@@AAEXXZ ; SegmentHeader::FillImports

; 52   :         FillRelocations ();

  000a0	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  000a6	e8 00 00 00 00	 call	 ?FillRelocations@SegmentHeader@@AAEXXZ ; SegmentHeader::FillRelocations
  000ab	8d 4d 8c	 lea	 ecx, DWORD PTR _segment$48[ebp+20]
  000ae	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000b5	e8 00 00 00 00	 call	 ??0SegmentFramework@@QAE@XZ
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 31   :         Segment segment;

  000ba	0f 57 c0	 xorps	 xmm0, xmm0
  000bd	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3

; 32   :         Logger logger (Logger::LoggerType::CONSOLE);

  000c4	6a 00		 push	 0
  000c6	8d 4d bc	 lea	 ecx, DWORD PTR _logger$52[ebp]
  000c9	66 0f d6 45 cc	 movq	 QWORD PTR _logger$52[ebp+16], xmm0
  000ce	0f 11 45 bc	 movups	 XMMWORD PTR _logger$52[ebp], xmm0
  000d2	e8 00 00 00 00	 call	 ??0Logger@@QAE@W4LoggerType@0@@Z ; Logger::Logger
; File c:\users\henry\source\repos\otc\otc\otc\headers\runtime\runtimehandler.h

; 9    :     RuntimeHandler (Segment& segment) : m_Segment (segment) {}

  000d7	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _segment$48[ebp]
  000dd	89 85 28 fd ff
	ff		 mov	 DWORD PTR _runtime$42[ebp], eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 4    :     if (variable && value) {

  000e3	8b 45 08	 mov	 eax, DWORD PTR _module$[ebp]
  000e6	85 c0		 test	 eax, eax
  000e8	0f 84 bd 06 00
	00		 je	 $LN112@DllMain

; 5    :         *variable = value;

  000ee	a3 00 00 00 00	 mov	 DWORD PTR ?UnsafeLibraryPointer@Segment@@2KA, eax ; Segment::UnsafeLibraryPointer
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 39   :         logger.Info ("OTC");

  000f3	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  000f6	68 00 00 00 00	 push	 OFFSET ??_C@_03KNCNPCCC@OTC@
  000fb	50		 push	 eax
  000fc	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\logger.cpp

; 17   : 	switch (m_Type) {

  00101	8b 45 d0	 mov	 eax, DWORD PTR _logger$52[ebp+20]
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 39   :         logger.Info ("OTC");

  00104	83 c4 08	 add	 esp, 8
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\logger.cpp

; 17   : 	switch (m_Type) {

  00107	83 e8 00	 sub	 eax, 0
  0010a	74 23		 je	 SHORT $LN75@DllMain
  0010c	83 e8 01	 sub	 eax, 1
  0010f	75 35		 jne	 SHORT $LN80@DllMain

; 21   : 		  break;
; 22   : 
; 23   : 		case FILE:
; 24   : 			GLoggerFile << "\n" << std::endl;

  00111	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01EEMJAFIK@?6@
  00116	b9 00 00 00 00	 mov	 ecx, OFFSET ?GLoggerFile@@3V?$basic_ofstream@DU?$char_traits@D@std@@@std@@A ; GLoggerFile
  0011b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00120	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00125	8b c8		 mov	 ecx, eax
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0012d	eb 17		 jmp	 SHORT $LN80@DllMain
$LN75@DllMain:

; 18   : 
; 19   : 	    case CONSOLE:
; 20   : 		   m_Game.PrintNewLineToConsole (count);

  0012f	8b 7d bc	 mov	 edi, DWORD PTR _logger$52[ebp]
  00132	be 02 00 00 00	 mov	 esi, 2
$LL81@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\gameframework.cpp

; 4    : 	for (int lineIterator = 0; lineIterator < newLineCount; lineIterator++) m_PrintInterface ("\n");

  00137	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0013c	ff d7		 call	 edi
  0013e	83 c4 04	 add	 esp, 4
  00141	83 ee 01	 sub	 esi, 1
  00144	75 f1		 jne	 SHORT $LL81@DllMain
$LN80@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 44   :         logger.Info ("Loading up OTC.. ");

  00146	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BMFENILA@Loading?5up?5OTC?4?4?5@
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\logger.cpp

; 17   : 	switch (m_Type) {

  00154	8b 45 d0	 mov	 eax, DWORD PTR _logger$52[ebp+20]
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 44   :         logger.Info ("Loading up OTC.. ");

  00157	83 c4 08	 add	 esp, 8
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\logger.cpp

; 17   : 	switch (m_Type) {

  0015a	83 e8 00	 sub	 eax, 0
  0015d	74 23		 je	 SHORT $LN86@DllMain
  0015f	83 e8 01	 sub	 eax, 1
  00162	75 29		 jne	 SHORT $LN91@DllMain

; 21   : 		  break;
; 22   : 
; 23   : 		case FILE:
; 24   : 			GLoggerFile << "\n" << std::endl;

  00164	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_01EEMJAFIK@?6@
  00169	b9 00 00 00 00	 mov	 ecx, OFFSET ?GLoggerFile@@3V?$basic_ofstream@DU?$char_traits@D@std@@@std@@A ; GLoggerFile
  0016e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00173	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00178	8b c8		 mov	 ecx, eax
  0017a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00180	eb 0b		 jmp	 SHORT $LN91@DllMain
$LN86@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\gameframework.cpp

; 4    : 	for (int lineIterator = 0; lineIterator < newLineCount; lineIterator++) m_PrintInterface ("\n");

  00182	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00187	ff 55 bc	 call	 DWORD PTR _logger$52[ebp]
  0018a	83 c4 04	 add	 esp, 4
$LN91@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 48   :         logger.Info ("| [~] Performing basic checks...");

  0018d	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00190	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PONPHMNH@?$HM?5?$FL?$HO?$FN?5Performing?5basic?5checks?4?4@
  00195	50		 push	 eax
  00196	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 137  :     ZeroMemory (&osVersionInfo, sizeof (OSVERSIONINFO));

  0019b	68 14 01 00 00	 push	 276			; 00000114H
  001a0	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR _osVersionInfo$47[ebp]
  001a6	6a 00		 push	 0
  001a8	50		 push	 eax
  001a9	e8 00 00 00 00	 call	 _memset

; 138  : 
; 139  :     //This causes a little confused. 
; 140  :     //
; 141  :     //If we were unable to fill the structure, then we return true, because the function expects false, 
; 142  :     //this will lead to the fact that the initialization of the loader simply stops, and through the debugger you can see what is wrong. 
; 143  :     if (GetVersionEx (&osVersionInfo)) return true;

  001ae	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__GetVersionExW@4
  001b4	8d 85 64 fe ff
	ff		 lea	 eax, DWORD PTR _osVersionInfo$47[ebp]
  001ba	83 c4 14	 add	 esp, 20			; 00000014H
  001bd	50		 push	 eax
  001be	ff d6		 call	 esi
  001c0	85 c0		 test	 eax, eax
  001c2	0f 85 3b 05 00
	00		 jne	 $LN4@DllMain

; 144  : 
; 145  :     return ((osVersionInfo.dwMajorVersion > 5) || ((osVersionInfo.dwMajorVersion == 5) && (osVersionInfo.dwMinorVersion >= 1)));

  001c8	83 bd 68 fe ff
	ff 05		 cmp	 DWORD PTR _osVersionInfo$47[ebp+4], 5
  001cf	0f 87 2e 05 00
	00		 ja	 $LN4@DllMain
  001d5	75 0d		 jne	 SHORT $LN287@DllMain
  001d7	83 bd 6c fe ff
	ff 01		 cmp	 DWORD PTR _osVersionInfo$47[ebp+8], 1
  001de	0f 83 1f 05 00
	00		 jae	 $LN4@DllMain
$LN287@DllMain:

; 152  :     ZeroMemory (&osVersionInfo, sizeof(OSVERSIONINFO));

  001e4	68 14 01 00 00	 push	 276			; 00000114H
  001e9	8d 85 48 fd ff
	ff		 lea	 eax, DWORD PTR _osVersionInfo$46[ebp]
  001ef	6a 00		 push	 0
  001f1	50		 push	 eax
  001f2	e8 00 00 00 00	 call	 _memset
  001f7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 153  : 
; 154  :     //This causes a little confused. 
; 155  :     //
; 156  :     //If we were unable to fill the structure, then we return true, because the function expects false, 
; 157  :     //this will lead to the fact that the initialization of the loader simply stops, and through the debugger you can see what is wrong.
; 158  :     if (GetVersionEx ((LPOSVERSIONINFO) &osVersionInfo)) return true;

  001fa	8d 85 48 fd ff
	ff		 lea	 eax, DWORD PTR _osVersionInfo$46[ebp]
  00200	50		 push	 eax
  00201	ff d6		 call	 esi
  00203	85 c0		 test	 eax, eax
  00205	0f 85 f8 04 00
	00		 jne	 $LN4@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 51   :         if (Utils::IsWinXPOrLater () || Utils::IsWinServBuild ()) {

  0020b	80 bd 62 fe ff
	ff 01		 cmp	 BYTE PTR _osVersionInfo$46[ebp+282], 1
  00212	0f 84 eb 04 00
	00		 je	 $LN4@DllMain

; 54   :            return FALSE;
; 55   :         }
; 56   : 
; 57   :         logger.Info ("| [+] Your windows version meets the requirements for running OTC.");

  00218	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_0ED@EOFJBFEH@?$HM?5?$FL?$CL?$FN?5Your?5windows?5version?5meet@
  00220	50		 push	 eax
  00221	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  00226	83 c4 08	 add	 esp, 8

; 58   :         
; 59   :         //Pretty common issue.
; 60   :         if (!Utils::IsRedistPackagePresent ()) {

  00229	e8 00 00 00 00	 call	 ?IsRedistPackagePresent@Utils@@SA_NXZ ; Utils::IsRedistPackagePresent
  0022e	84 c0		 test	 al, al
  00230	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00233	75 15		 jne	 SHORT $LN5@DllMain

; 61   :             logger.Info ("| [-] Could not find the msvc redist package installed on your system.");

  00235	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@PFJPAFGG@?$HM?5?$FL?9?$FN?5Could?5not?5find?5the?5msvc?5r@
  0023a	50		 push	 eax
  0023b	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info

; 62   :             logger.Info ("| [~] You can download and install the redist build from here: https://www.microsoft.com/en-us/download/confirmation.aspx?id=52685.");

  00240	68 00 00 00 00	 push	 OFFSET ??_C@_0IE@MADIDBIL@?$HM?5?$FL?$HO?$FN?5You?5can?5download?5and?5inst@

; 63   :             return FALSE;

  00245	e9 cc 04 00 00	 jmp	 $LN290@DllMain
$LN5@DllMain:

; 64   :         }
; 65   : 
; 66   :         logger.Info ("| [+] Found the required msvc redist build on your system.");

  0024a	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@KKGOFNJE@?$HM?5?$FL?$CL?$FN?5Found?5the?5required?5msvc?5r@
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info

; 67   :         logger.Info ("| [+] All checks passed.");

  00255	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00258	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DNOPFKIA@?$HM?5?$FL?$CL?$FN?5All?5checks?5passed?4@
  0025d	50		 push	 eax
  0025e	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  00263	83 c4 10	 add	 esp, 16			; 00000010H

; 68   : 
; 69   :         logger.Space ();

  00266	8d 4d bc	 lea	 ecx, DWORD PTR _logger$52[ebp]
  00269	6a 01		 push	 1
  0026b	e8 00 00 00 00	 call	 ?Space@Logger@@QAEXH@Z	; Logger::Space

; 70   : 
; 71   :         logger.Info ("| [~] Extracting segment to memory....");

  00270	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00273	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@MHEJMGJD@?$HM?5?$FL?$HO?$FN?5Extracting?5segment?5to?5mem@
  00278	50		 push	 eax
  00279	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  0027e	83 c4 08	 add	 esp, 8
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 5    :     PanicUtils::SetImportant (&Segment::UnsafeAllocatedPointer, reinterpret_cast<DWORD> (VirtualAlloc (NULL, SegmentHeader::Datacase::ALLOCATION, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE)));

  00281	6a 40		 push	 64			; 00000040H
  00283	68 00 30 00 00	 push	 12288			; 00003000H
  00288	68 40 89 96 00	 push	 9865536			; 00968940H
  0028d	6a 00		 push	 0
  0028f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 4    :     if (variable && value) {

  00295	85 c0		 test	 eax, eax
  00297	0f 84 0e 05 00
	00		 je	 $LN112@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 8    :     PanicUtils::RequireNonNull (PanicUtils::Layers::INIT, reinterpret_cast<DWORD> (memcpy (reinterpret_cast<PVOID> (Segment::GetSafeAllocationPointer()), SegmentData, SegmentHeader::Datacase::SIZE)), "Allocated memory pointer is null");

  0029d	68 00 6a 18 00	 push	 1600000			; 00186a00H
  002a2	68 00 00 00 00	 push	 OFFSET ?SegmentData@@3QBEB ; SegmentData
  002a7	50		 push	 eax
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 5    :         *variable = value;

  002a8	a3 00 00 00 00	 mov	 DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA, eax ; Segment::UnsafeAllocatedPointer
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 8    :     PanicUtils::RequireNonNull (PanicUtils::Layers::INIT, reinterpret_cast<DWORD> (memcpy (reinterpret_cast<PVOID> (Segment::GetSafeAllocationPointer()), SegmentData, SegmentHeader::Datacase::SIZE)), "Allocated memory pointer is null");

  002ad	e8 00 00 00 00	 call	 _memcpy
  002b2	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  002b5	85 c0		 test	 eax, eax
  002b7	0f 84 7c 04 00
	00		 je	 $LN292@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 75   :         logger.Info ("| [~] Reconstructing hot-points...");

  002bd	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  002c0	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CAFJDLOK@?$HM?5?$FL?$HO?$FN?5Reconstructing?5hot?9points@
  002c5	50		 push	 eax
  002c6	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  002cb	83 c4 08	 add	 esp, 8

; 76   : 
; 77   :         runtime.ReconstructHotPoints ();

  002ce	8d 8d 28 fd ff
	ff		 lea	 ecx, DWORD PTR _runtime$42[ebp]
  002d4	e8 00 00 00 00	 call	 ?ReconstructHotPoints@RuntimeHandler@@QAEXXZ ; RuntimeHandler::ReconstructHotPoints

; 78   :         
; 79   :         logger.Info ("| [+] Wait until the framework complete routine work...");

  002d9	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  002dc	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@CFAIMOHN@?$HM?5?$FL?$CL?$FN?5Wait?5until?5the?5framework?5@
  002e1	50		 push	 eax
  002e2	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info

; 80   : 
; 81   :         logger.Info ("| [~] Filling the dependency table... (~7-15 sec)");

  002e7	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  002ea	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@MPINGACN@?$HM?5?$FL?$HO?$FN?5Filling?5the?5dependency?5ta@
  002ef	50		 push	 eax
  002f0	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  002f5	83 c4 10	 add	 esp, 16			; 00000010H

; 82   : 
; 83   :         segment.GetFramework().CreateDependencyTable ();

  002f8	8d 85 04 fd ff
	ff		 lea	 eax, DWORD PTR $T16[ebp]
  002fe	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  00304	50		 push	 eax
  00305	e8 00 00 00 00	 call	 ?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ ; Segment::GetFramework
  0030a	8b c8		 mov	 ecx, eax
  0030c	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
  00310	e8 00 00 00 00	 call	 ?CreateDependencyTable@SegmentFramework@@QAEXXZ ; SegmentFramework::CreateDependencyTable
  00315	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  0031b	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0031f	e8 00 00 00 00	 call	 ??1SegmentFramework@@QAE@XZ

; 84   : 
; 85   :         logger.Info ("| [~] Updating netvars...");

  00324	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00327	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@JDCGCNGO@?$HM?5?$FL?$HO?$FN?5Updating?5netvars?4?4?4@
  0032c	50		 push	 eax
  0032d	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  00332	83 c4 08	 add	 esp, 8

; 87   :         segment.GetFramework().UpdateNetVars ();

  00335	8d 85 e0 fc ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  0033b	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  00341	50		 push	 eax
  00342	e8 00 00 00 00	 call	 ?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ ; Segment::GetFramework
  00347	c6 45 fc 05	 mov	 BYTE PTR __$EHRec$[ebp+8], 5
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1679 : 		return (this->_Myfirst());

  0034b	8b 08		 mov	 ecx, DWORD PTR [eax]

; 1689 : 		return (this->_Mylast());

  0034d	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 54   :     for (const auto& netvar : m_netvars) {

  00350	3b cf		 cmp	 ecx, edi
  00352	74 1d		 je	 SHORT $LN127@DllMain
$LL128@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00354	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 55   :         *reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer () + netvar.rva) = netvar.new_value;

  0035a	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  0035d	85 d2		 test	 edx, edx
  0035f	0f 84 e0 03 00
	00		 je	 $LN263@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 54   :     for (const auto& netvar : m_netvars) {

  00365	8b 01		 mov	 eax, DWORD PTR [ecx]
  00367	83 c1 08	 add	 ecx, 8

; 55   :         *reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer () + netvar.rva) = netvar.new_value;

  0036a	89 34 02	 mov	 DWORD PTR [edx+eax], esi
  0036d	3b cf		 cmp	 ecx, edi
  0036f	75 e3		 jne	 SHORT $LL128@DllMain
$LN127@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 87   :         segment.GetFramework().UpdateNetVars ();

  00371	8d 8d e0 fc ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00377	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  0037b	e8 00 00 00 00	 call	 ??1SegmentFramework@@QAE@XZ

; 88   : 
; 89   :         logger.Info ("| [~] Creating hook for internal function...");

  00380	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00383	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@KFFMGAJH@?$HM?5?$FL?$HO?$FN?5Creating?5hook?5for?5interna@
  00388	50		 push	 eax
  00389	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  0038e	83 c4 08	 add	 esp, 8

; 91   :         segment.GetFramework().CreateHook ();

  00391	8d 85 bc fc ff
	ff		 lea	 eax, DWORD PTR $T26[ebp]
  00397	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  0039d	50		 push	 eax
  0039e	e8 00 00 00 00	 call	 ?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ ; Segment::GetFramework
  003a3	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  003a7	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  003ad	85 ff		 test	 edi, edi
  003af	0f 84 90 03 00
	00		 je	 $LN263@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 77   :       SetHook (reinterpret_cast<PVOID> (Segment::GetSafeAllocationPointer() + Datacase::VIRTUAL_EXECUTOR_RVA), &CustomVirtualCaller, reinterpret_cast<PVOID*> (&OriginalVirtualCaller)); //

  003b5	81 c7 30 3b 00
	00		 add	 edi, 15152		; 00003b30H
; File c:\users\henry\source\repos\otc\otc\otc\libs\libs\hooklib\hooklib\hooklib\hooklib.c

; 748  :     if (!Target || !Interceptor) return FALSE;

  003bb	0f 84 5e 01 00
	00		 je	 $LN166@DllMain

; 254  :     NTSTATUS Status = NtAllocateVirtualMemory(NtCurrentProcess(), &Base, Base ? 12 : 0, &Size, MEM_RESERVE | MEM_COMMIT, Protect);

  003c1	6a 40		 push	 64			; 00000040H
  003c3	68 00 30 00 00	 push	 12288			; 00003000H
  003c8	8d 45 b0	 lea	 eax, DWORD PTR _Size$49[ebp]

; 762  :     PHOOK_DATA Hook = Alloc(NULL, sizeof(HOOK_DATA), PAGE_EXECUTE_READWRITE);

  003cb	c7 45 b0 4c 00
	00 00		 mov	 DWORD PTR _Size$49[ebp], 76 ; 0000004cH

; 254  :     NTSTATUS Status = NtAllocateVirtualMemory(NtCurrentProcess(), &Base, Base ? 12 : 0, &Size, MEM_RESERVE | MEM_COMMIT, Protect);

  003d2	50		 push	 eax
  003d3	6a 00		 push	 0
  003d5	8d 85 44 fd ff
	ff		 lea	 eax, DWORD PTR _Base$45[ebp]

; 762  :     PHOOK_DATA Hook = Alloc(NULL, sizeof(HOOK_DATA), PAGE_EXECUTE_READWRITE);

  003db	c7 85 44 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _Base$45[ebp], 0

; 254  :     NTSTATUS Status = NtAllocateVirtualMemory(NtCurrentProcess(), &Base, Base ? 12 : 0, &Size, MEM_RESERVE | MEM_COMMIT, Protect);

  003e5	50		 push	 eax
  003e6	6a ff		 push	 -1
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtAllocateVirtualMemory@24

; 255  :     return NT_SUCCESS(Status) ? Base : NULL;

  003ee	33 f6		 xor	 esi, esi
  003f0	85 c0		 test	 eax, eax
  003f2	0f 49 b5 44 fd
	ff ff		 cmovns	 esi, DWORD PTR _Base$45[ebp]

; 764  :     if (!Hook) return FALSE;

  003f9	85 f6		 test	 esi, esi
  003fb	0f 84 1e 01 00
	00		 je	 $LN166@DllMain

; 765  : 
; 766  :     Hook->OriginalFunction = Target;

  00401	89 3e		 mov	 DWORD PTR [esi], edi

; 767  : 
; 768  : #ifdef _AMD64_
; 769  :     ULONG TrampolineSize = NeedAbsoluteJump ? ABS_TRAMPOLINE_SIZE : REL_TRAMPOLINE_SIZE;
; 770  :     SaveOriginalBytes(Hook, Target, TrampolineSize);
; 771  :     Hook->OriginalDataSize = TransitCode(Target, Hook->OriginalBeginning, TrampolineSize);
; 772  : #else
; 773  :     SaveOriginalBytes(Hook, Target, REL_TRAMPOLINE_SIZE);
; 774  :     Hook->OriginalDataSize = TransitCode(Target, Hook->OriginalBeginning, REL_TRAMPOLINE_SIZE);

  00403	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]

; 663  :     Hook->AffectedBytes = Size;

  00406	c7 46 08 05 00
	00 00		 mov	 DWORD PTR [esi+8], 5

; 664  :     for (unsigned int i = 0; i < Size; ++i)
; 665  :     {
; 666  :         Hook->OriginalBytes[i] = *((PBYTE)Target + i);

  0040d	8a 07		 mov	 al, BYTE PTR [edi]
  0040f	88 46 2c	 mov	 BYTE PTR [esi+44], al
  00412	8a 47 01	 mov	 al, BYTE PTR [edi+1]
  00415	88 46 2d	 mov	 BYTE PTR [esi+45], al
  00418	8a 47 02	 mov	 al, BYTE PTR [edi+2]
  0041b	88 46 2e	 mov	 BYTE PTR [esi+46], al
  0041e	8a 47 03	 mov	 al, BYTE PTR [edi+3]
  00421	88 46 2f	 mov	 BYTE PTR [esi+47], al
  00424	8a 47 04	 mov	 al, BYTE PTR [edi+4]

; 774  :     Hook->OriginalDataSize = TransitCode(Target, Hook->OriginalBeginning, REL_TRAMPOLINE_SIZE);

  00427	51		 push	 ecx
  00428	8b cf		 mov	 ecx, edi

; 666  :         Hook->OriginalBytes[i] = *((PBYTE)Target + i);

  0042a	88 46 30	 mov	 BYTE PTR [esi+48], al

; 774  :     Hook->OriginalDataSize = TransitCode(Target, Hook->OriginalBeginning, REL_TRAMPOLINE_SIZE);

  0042d	e8 00 00 00 00	 call	 _TransitCode
  00432	0f b6 c0	 movzx	 eax, al
  00435	83 c4 04	 add	 esp, 4
  00438	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 775  : #endif
; 776  : 
; 777  :     if (!Hook->OriginalDataSize)

  0043b	85 c0		 test	 eax, eax
  0043d	75 0c		 jne	 SHORT $LN168@DllMain

; 778  :     {
; 779  :         Free(Hook);

  0043f	8b ce		 mov	 ecx, esi
  00441	e8 00 00 00 00	 call	 _Free

; 780  :         return FALSE;

  00446	e9 d4 00 00 00	 jmp	 $LN166@DllMain
$LN168@DllMain:

; 781  :     }
; 782  : 
; 783  : #ifdef _AMD64_
; 784  :     WriteAbsoluteTrampoline((PBYTE)Hook->OriginalBeginning + Hook->OriginalDataSize, (PBYTE)Target + Hook->OriginalDataSize);
; 785  : #else
; 786  :     PBYTE WriteTo = (PBYTE)Hook->OriginalBeginning + Hook->OriginalDataSize;

  0044b	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]

; 791  : #ifdef _AMD64_
; 792  :     if (!NT_SUCCESS(Protect(Target, NeedAbsoluteJump ? ABS_TRAMPOLINE_SIZE : REL_TRAMPOLINE_SIZE, PAGE_EXECUTE_READWRITE, &OldProtect)))
; 793  : #else
; 794  :     if (!NT_SUCCESS(Protect(Target, REL_TRAMPOLINE_SIZE, PAGE_EXECUTE_READWRITE, &OldProtect)))

  0044e	c7 45 b4 05 00
	00 00		 mov	 DWORD PTR _Size$50[ebp], 5
  00455	03 c8		 add	 ecx, eax
  00457	89 bd 40 fd ff
	ff		 mov	 DWORD PTR _Address$44[ebp], edi
  0045d	03 c7		 add	 eax, edi

; 524  :     *(PULONG)((PBYTE)WriteTo + sizeof(BYTE)) = (ULONG)((PBYTE)Dest - ((PBYTE)Src + 5));

  0045f	2b c1		 sub	 eax, ecx
  00461	83 e8 05	 sub	 eax, 5
  00464	89 41 01	 mov	 DWORD PTR [ecx+1], eax

; 269  :     return NtProtectVirtualMemory(NtCurrentProcess(), &Address, &Size, Protect, OldProtect);

  00467	8d 45 b8	 lea	 eax, DWORD PTR _OldProtect$51[ebp]
  0046a	50		 push	 eax
  0046b	6a 40		 push	 64			; 00000040H
  0046d	8d 45 b4	 lea	 eax, DWORD PTR _Size$50[ebp]

; 523  :     *(PBYTE)(WriteTo) = 0xE9;

  00470	c6 01 e9	 mov	 BYTE PTR [ecx], 233	; 000000e9H

; 269  :     return NtProtectVirtualMemory(NtCurrentProcess(), &Address, &Size, Protect, OldProtect);

  00473	50		 push	 eax
  00474	8d 85 40 fd ff
	ff		 lea	 eax, DWORD PTR _Address$44[ebp]

; 790  :     ULONG OldProtect = 0;

  0047a	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _OldProtect$51[ebp], 0

; 269  :     return NtProtectVirtualMemory(NtCurrentProcess(), &Address, &Size, Protect, OldProtect);

  00481	50		 push	 eax
  00482	6a ff		 push	 -1
  00484	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtProtectVirtualMemory@20

; 794  :     if (!NT_SUCCESS(Protect(Target, REL_TRAMPOLINE_SIZE, PAGE_EXECUTE_READWRITE, &OldProtect)))

  0048a	85 c0		 test	 eax, eax
  0048c	79 0c		 jns	 SHORT $LN169@DllMain

; 795  : #endif
; 796  :     {
; 797  :         Free(Hook);

  0048e	8b ce		 mov	 ecx, esi
  00490	e8 00 00 00 00	 call	 _Free

; 798  :         return FALSE;

  00495	e9 85 00 00 00	 jmp	 $LN166@DllMain
$LN169@DllMain:

; 799  :     }
; 800  : 
; 801  :     SuspendThreads();

  0049a	e8 00 00 00 00	 call	 _SuspendThreads

; 524  :     *(PULONG)((PBYTE)WriteTo + sizeof(BYTE)) = (ULONG)((PBYTE)Dest - ((PBYTE)Src + 5));

  0049f	b8 00 00 00 00	 mov	 eax, OFFSET ?CustomVirtualCaller@SegmentFramework@@SIIPAXH@Z ; SegmentFramework::CustomVirtualCaller
  004a4	c6 07 e9	 mov	 BYTE PTR [edi], 233	; 000000e9H
  004a7	2b c7		 sub	 eax, edi

; 828  :     Protect(Target, REL_TRAMPOLINE_SIZE, OldProtect, &OldProtect);

  004a9	8b cf		 mov	 ecx, edi

; 524  :     *(PULONG)((PBYTE)WriteTo + sizeof(BYTE)) = (ULONG)((PBYTE)Dest - ((PBYTE)Src + 5));

  004ab	83 e8 05	 sub	 eax, 5
  004ae	89 47 01	 mov	 DWORD PTR [edi+1], eax

; 823  :     if (Original) *Original = Hook->OriginalBeginning;

  004b1	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  004b4	a3 00 00 00 00	 mov	 DWORD PTR ?OriginalVirtualCaller@SegmentFramework@@2P6IIPAXH@ZA, eax ; SegmentFramework::OriginalVirtualCaller

; 824  : 
; 825  : #ifdef _AMD64_
; 826  :     Protect(Target, NeedAbsoluteJump ? ABS_TRAMPOLINE_SIZE : REL_TRAMPOLINE_SIZE, OldProtect, &OldProtect);
; 827  : #else
; 828  :     Protect(Target, REL_TRAMPOLINE_SIZE, OldProtect, &OldProtect);

  004b9	8d 45 b8	 lea	 eax, DWORD PTR _OldProtect$51[ebp]
  004bc	50		 push	 eax
  004bd	ff 75 b8	 push	 DWORD PTR _OldProtect$51[ebp]
  004c0	e8 00 00 00 00	 call	 _Protect

; 35   :     return (void*)__readfsdword(0x18);

  004c5	64 a1 18 00 00
	00		 mov	 eax, DWORD PTR fs:24

; 837  :     EnumProcesses(FixupContextsCallback, &FixupInfo);

  004cb	8d 95 2c fd ff
	ff		 lea	 edx, DWORD PTR _FixupInfo$43[ebp]
  004d1	83 c4 08	 add	 esp, 8
  004d4	b9 00 00 00 00	 mov	 ecx, OFFSET _FixupContextsCallback
  004d9	8b 40 20	 mov	 eax, DWORD PTR [eax+32]
  004dc	89 85 2c fd ff
	ff		 mov	 DWORD PTR _FixupInfo$43[ebp], eax

; 35   :     return (void*)__readfsdword(0x18);

  004e2	64 a1 18 00 00
	00		 mov	 eax, DWORD PTR fs:24

; 833  :     FixupInfo.CurrentTid = __tid();

  004e8	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  004eb	89 85 30 fd ff
	ff		 mov	 DWORD PTR _FixupInfo$43[ebp+4], eax

; 834  :     FixupInfo.AffectedCode = Target;
; 835  :     FixupInfo.OriginalCode = Hook->OriginalBeginning;

  004f1	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  004f4	89 bd 34 fd ff
	ff		 mov	 DWORD PTR _FixupInfo$43[ebp+8], edi
  004fa	89 85 38 fd ff
	ff		 mov	 DWORD PTR _FixupInfo$43[ebp+12], eax

; 836  :     FixupInfo.Size = Hook->OriginalDataSize;

  00500	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00503	89 85 3c fd ff
	ff		 mov	 DWORD PTR _FixupInfo$43[ebp+16], eax

; 837  :     EnumProcesses(FixupContextsCallback, &FixupInfo);

  00509	e8 00 00 00 00	 call	 _EnumProcesses@8

; 838  : 
; 839  :     NtFlushInstructionCache(NtCurrentProcess(), NULL, 0);

  0050e	6a 00		 push	 0
  00510	6a 00		 push	 0
  00512	6a ff		 push	 -1
  00514	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__NtFlushInstructionCache@12

; 840  :     ResumeThreads();

  0051a	e8 00 00 00 00	 call	 _ResumeThreads
$LN166@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 91   :         segment.GetFramework().CreateHook ();

  0051f	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  00525	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00529	e8 00 00 00 00	 call	 ??1SegmentFramework@@QAE@XZ

; 92   : 
; 93   :         logger.Info ("| [~] Updating watermark...");

  0052e	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00531	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@FALAIJHL@?$HM?5?$FL?$HO?$FN?5Updating?5watermark?4?4?4@
  00536	50		 push	 eax
  00537	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  0053c	83 c4 08	 add	 esp, 8

; 97   :         segment.GetFramework().UpdateWatermark (getenv ("USERNAME"), "OTC Rehost");

  0053f	8d 85 98 fc ff
	ff		 lea	 eax, DWORD PTR $T31[ebp]
  00545	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  0054b	50		 push	 eax
  0054c	e8 00 00 00 00	 call	 ?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ ; Segment::GetFramework
  00551	68 00 00 00 00	 push	 OFFSET ??_C@_08JMMIJEMM@USERNAME@
  00556	c6 45 fc 07	 mov	 BYTE PTR __$EHRec$[ebp+8], 7
  0055a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__getenv
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 114  :        std::strncpy (watermark, mark, 16);                                                                                                                       //

  00560	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__strncpy
  00566	6a 10		 push	 16			; 00000010H
  00568	50		 push	 eax
  00569	8d 45 d4	 lea	 eax, DWORD PTR _watermark$53[ebp]
  0056c	50		 push	 eax
  0056d	ff d7		 call	 edi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  0056f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 114  :        std::strncpy (watermark, mark, 16);                                                                                                                       //

  00575	83 c4 10	 add	 esp, 16			; 00000010H
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00578	85 c9		 test	 ecx, ecx
  0057a	0f 84 d4 01 00
	00		 je	 $LN293@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h

; 25   : 		return UnsafeAllocatedPointer;

  00580	81 c1 81 d3 12
	00		 add	 ecx, 1233793		; 0012d381H
  00586	8d 55 d4	 lea	 edx, DWORD PTR _watermark$53[ebp]
  00589	be 04 00 00 00	 mov	 esi, 4
  0058e	66 90		 npad	 2
$LL205@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 126  :         std::memcpy (reinterpret_cast <DWORD*> (base + offsetToInstructions + instructionsIterator), compressedArray + segmentedCharIterator, instructionCharMoveCount);

  00590	8b 02		 mov	 eax, DWORD PTR [edx]

; 127  :         segmentedCharIterator += arrayCharCycleUpdate;

  00592	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  00595	89 01		 mov	 DWORD PTR [ecx], eax
  00597	8d 49 07	 lea	 ecx, DWORD PTR [ecx+7]
  0059a	83 ee 01	 sub	 esi, 1
  0059d	75 f1		 jne	 SHORT $LL205@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  0059f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  005a4	85 c0		 test	 eax, eax
  005a6	0f 84 b7 01 00
	00		 je	 $LN294@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 128  :        std::memmove (reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer() + 0x1), player, 0x20);                                                        //

  005ac	6a 20		 push	 32			; 00000020H
  005ae	40		 inc	 eax
  005af	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EEMOAPMJ@OTC?5Rehost@
  005b4	50		 push	 eax
  005b5	e8 00 00 00 00	 call	 _memmove
  005ba	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 97   :         segment.GetFramework().UpdateWatermark (getenv ("USERNAME"), "OTC Rehost");

  005bd	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  005c1	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  005c7	e8 00 00 00 00	 call	 ??1SegmentFramework@@QAE@XZ

; 98   :         segment.GetFramework().UpdateMenuWatermark ("yajjihack ");

  005cc	8d 85 74 fc ff
	ff		 lea	 eax, DWORD PTR $T35[ebp]
  005d2	50		 push	 eax
  005d3	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  005d9	e8 00 00 00 00	 call	 ?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ ; Segment::GetFramework
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 146  :        std::strncpy (watermark, value, 12);                                                                                                                      //

  005de	6a 0c		 push	 12			; 0000000cH
  005e0	8d 45 e4	 lea	 eax, DWORD PTR _watermark$54[ebp]
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 98   :         segment.GetFramework().UpdateMenuWatermark ("yajjihack ");

  005e3	c6 45 fc 08	 mov	 BYTE PTR __$EHRec$[ebp+8], 8
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 146  :        std::strncpy (watermark, value, 12);                                                                                                                      //

  005e7	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BBKHIBA@yajjihack?5@
  005ec	50		 push	 eax
  005ed	ff d7		 call	 edi
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  005ef	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 146  :        std::strncpy (watermark, value, 12);                                                                                                                      //

  005f5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  005f8	85 c9		 test	 ecx, ecx
  005fa	0f 84 72 01 00
	00		 je	 $LN295@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segment.h

; 25   : 		return UnsafeAllocatedPointer;

  00600	81 c1 5f 02 0e
	00		 add	 ecx, 918111		; 000e025fH
  00606	8d 55 e4	 lea	 edx, DWORD PTR _watermark$54[ebp]
  00609	be 03 00 00 00	 mov	 esi, 3
  0060e	66 90		 npad	 2
$LL225@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\utils.cpp

; 126  :         std::memcpy (reinterpret_cast <DWORD*> (base + offsetToInstructions + instructionsIterator), compressedArray + segmentedCharIterator, instructionCharMoveCount);

  00610	8b 02		 mov	 eax, DWORD PTR [edx]

; 127  :         segmentedCharIterator += arrayCharCycleUpdate;

  00612	8d 52 04	 lea	 edx, DWORD PTR [edx+4]
  00615	89 01		 mov	 DWORD PTR [ecx], eax
  00617	8d 49 07	 lea	 ecx, DWORD PTR [ecx+7]
  0061a	83 ee 01	 sub	 esi, 1
  0061d	75 f1		 jne	 SHORT $LL225@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 98   :         segment.GetFramework().UpdateMenuWatermark ("yajjihack ");

  0061f	8d 8d 74 fc ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  00625	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00629	e8 00 00 00 00	 call	 ??1SegmentFramework@@QAE@XZ

; 100  :         logger.Info ("| [~] Invoking OEP...");

  0062e	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00631	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DLJKLACG@?$HM?5?$FL?$HO?$FN?5Invoking?5OEP?4?4?4@
  00636	50		 push	 eax
  00637	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  0063c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 100  :         logger.Info ("| [~] Invoking OEP...");

  00641	83 c4 08	 add	 esp, 8
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00644	85 c0		 test	 eax, eax
  00646	0f 84 35 01 00
	00		 je	 $LN296@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 81   :     SegmentHeader::DLLMAIN_CALLBACK DllMain = reinterpret_cast <SegmentHeader::DLLMAIN_CALLBACK> (Segment::GetSafeAllocationPointer() + SegmentHeader::Datacase::OEP);

  0064c	8d 88 8c 73 04
	00		 lea	 ecx, DWORD PTR [eax+291724]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00652	85 c9		 test	 ecx, ecx
  00654	0f 84 36 01 00
	00		 je	 $LN297@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\cpp\runtime\runtimehandler.cpp

; 85   :     DllMain (reinterpret_cast<HMODULE> (Segment::GetSafeAllocationPointer()), DLL_PROCESS_ATTACH, NULL);

  0065a	56		 push	 esi
  0065b	6a 01		 push	 1
  0065d	50		 push	 eax
  0065e	ff d1		 call	 ecx
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 106  :         segment.GetFramework().SetMenuStatus (false);

  00660	8d 85 50 fc ff
	ff		 lea	 eax, DWORD PTR $T39[ebp]
  00666	50		 push	 eax
  00667	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  0066d	e8 00 00 00 00	 call	 ?GetFramework@Segment@@QAE?AVSegmentFramework@@XZ ; Segment::GetFramework
  00672	c6 45 fc 09	 mov	 BYTE PTR __$EHRec$[ebp+8], 9
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 13   :     if (!value) {

  00676	a1 00 00 00 00	 mov	 eax, DWORD PTR ?UnsafeAllocatedPointer@Segment@@2KA ; Segment::UnsafeAllocatedPointer
  0067b	85 c0		 test	 eax, eax
  0067d	0f 84 19 01 00
	00		 je	 $LN298@DllMain
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 106  :         segment.GetFramework().SetMenuStatus (false);

  00683	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
; File c:\users\henry\source\repos\otc\otc\otc\cpp\frameworks\segmentframework.cpp

; 159  :     *reinterpret_cast<DWORD*> (Segment::GetSafeAllocationPointer() + Datacase::MENU_STATUS_RVA) = status;

  00689	89 b0 67 5f 48
	00		 mov	 DWORD PTR [eax+4743015], esi
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 106  :         segment.GetFramework().SetMenuStatus (false);

  0068f	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
  00693	e8 00 00 00 00	 call	 ??1SegmentFramework@@QAE@XZ

; 107  : 
; 108  :         logger.Info ("| [+] OTC initialized.");

  00698	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  0069b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@IHGHPLEI@?$HM?5?$FL?$CL?$FN?5OTC?5initialized?4@
  006a0	50		 push	 eax
  006a1	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  006a6	83 c4 08	 add	 esp, 8

; 109  : 
; 110  :         logger.Space ();

  006a9	8d 4d bc	 lea	 ecx, DWORD PTR _logger$52[ebp]
  006ac	6a 01		 push	 1
  006ae	e8 00 00 00 00	 call	 ?Space@Logger@@QAEXH@Z	; Logger::Space

; 111  :        
; 112  :       
; 113  :         logger.Info ("Credits to https://www.github.com/0x000cb for the original build :)");

  006b3	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  006b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EE@PLAPKDLB@Credits?5to?5https?3?1?1www?4github?4c@
  006bb	50		 push	 eax
  006bc	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  006c1	83 c4 08	 add	 esp, 8

; 114  : 
; 115  :         logger.Space (2);

  006c4	8d 4d bc	 lea	 ecx, DWORD PTR _logger$52[ebp]
  006c7	6a 02		 push	 2
  006c9	e8 00 00 00 00	 call	 ?Space@Logger@@QAEXH@Z	; Logger::Space
  006ce	8d 4d 8c	 lea	 ecx, DWORD PTR _segment$48[ebp+20]
  006d1	e8 00 00 00 00	 call	 ??1SegmentFramework@@QAE@XZ
  006d6	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  006dc	e8 00 00 00 00	 call	 ??1SegmentHeader@@QAE@XZ
$LN255@DllMain:

; 116  : 
; 117  :     }
; 118  : 
; 119  :     return TRUE;

  006e1	b8 01 00 00 00	 mov	 eax, 1
$LN1@DllMain:

; 120  : }

  006e6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  006e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  006f0	59		 pop	 ecx
  006f1	5f		 pop	 edi
  006f2	5e		 pop	 esi
  006f3	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  006f6	33 cd		 xor	 ecx, ebp
  006f8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  006fd	8b e5		 mov	 esp, ebp
  006ff	5d		 pop	 ebp
  00700	c2 0c 00	 ret	 12			; 0000000cH
$LN4@DllMain:

; 52   :            logger.Info ("| [-] I cannot run OTC on the current version of Windows.");

  00703	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00706	68 00 00 00 00	 push	 OFFSET ??_C@_0DK@OACAPHFB@?$HM?5?$FL?9?$FN?5I?5cannot?5run?5OTC?5on?5the?5c@
  0070b	50		 push	 eax
  0070c	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info

; 53   :            logger.Info ("| [~] Please upgrade to 7 or 8, or 10. (PC build)");

  00711	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@NHDBKKLG@?$HM?5?$FL?$HO?$FN?5Please?5upgrade?5to?57?5or?58?0@
$LN290@DllMain:

; 63   :             return FALSE;

  00716	8d 45 bc	 lea	 eax, DWORD PTR _logger$52[ebp]
  00719	50		 push	 eax
  0071a	e8 00 00 00 00	 call	 ?Info@Logger@@QAAXPBDZZ	; Logger::Info
  0071f	83 c4 10	 add	 esp, 16			; 00000010H
  00722	8d 4d 8c	 lea	 ecx, DWORD PTR _segment$48[ebp+20]
  00725	e8 00 00 00 00	 call	 ??1SegmentFramework@@QAE@XZ
  0072a	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  00730	e8 00 00 00 00	 call	 ??1SegmentHeader@@QAE@XZ
  00735	33 c0		 xor	 eax, eax
  00737	eb ad		 jmp	 SHORT $LN1@DllMain
$LN292@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  00739	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0CB@OJCABHLM@Allocated?5memory?5pointer?5is?5nul@
  0073e	33 c9		 xor	 ecx, ecx
  00740	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN263@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 120  : }

  00745	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  0074a	b9 01 00 00 00	 mov	 ecx, 1
  0074f	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN293@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\cpp\utils\panicutils.cpp

; 14   :         PanicUtils::Release (layer, reason);

  00754	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  00759	b9 01 00 00 00	 mov	 ecx, 1
  0075e	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN294@DllMain:
  00763	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  00768	b9 01 00 00 00	 mov	 ecx, 1
  0076d	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN295@DllMain:
  00772	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  00777	b9 01 00 00 00	 mov	 ecx, 1
  0077c	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN296@DllMain:
  00781	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  00786	b9 01 00 00 00	 mov	 ecx, 1
  0078b	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN297@DllMain:
  00790	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BC@MFGAJMC@OEP?5value?5is?5null@
  00795	33 c9		 xor	 ecx, ecx
  00797	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN298@DllMain:
  0079c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BM@FGCKGLBN@Allocation?5pointer?5is?5null?4@
  007a1	b9 01 00 00 00	 mov	 ecx, 1
  007a6	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN112@DllMain:
; File c:\users\henry\source\repos\otc\otc\otc\dllmain.cpp

; 120  : }

  007ab	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_0BL@CHOBNDMJ@Variable?5or?5value?5is?5null?4@
  007b0	b9 01 00 00 00	 mov	 ecx, 1
  007b5	e8 00 00 00 00	 call	 ?Release@PanicUtils@@SAXW4Layers@1@PBD@Z ; PanicUtils::Release
$LN289@DllMain:
  007ba	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$_DllMain@12$9:
  00000	8b 8d 40 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$_DllMain@12$10:
  0000b	8b 8d 40 fd ff
	ff		 mov	 ecx, DWORD PTR _this$[ebp]
  00011	83 c1 08	 add	 ecx, 8
  00014	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$_DllMain@12$7:
  00019	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  0001f	e9 00 00 00 00	 jmp	 ??1SegmentHeader@@QAE@XZ
__unwindfunclet$_DllMain@12$0:
  00024	8d 8d 78 ff ff
	ff		 lea	 ecx, DWORD PTR _segment$48[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1Segment@@QAE@XZ
__unwindfunclet$_DllMain@12$1:
  0002f	8d 8d 04 fd ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00035	e9 00 00 00 00	 jmp	 ??1SegmentFramework@@QAE@XZ
__unwindfunclet$_DllMain@12$2:
  0003a	8d 8d e0 fc ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00040	e9 00 00 00 00	 jmp	 ??1SegmentFramework@@QAE@XZ
__unwindfunclet$_DllMain@12$3:
  00045	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  0004b	e9 00 00 00 00	 jmp	 ??1SegmentFramework@@QAE@XZ
__unwindfunclet$_DllMain@12$4:
  00050	8d 8d 98 fc ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  00056	e9 00 00 00 00	 jmp	 ??1SegmentFramework@@QAE@XZ
__unwindfunclet$_DllMain@12$5:
  0005b	8d 8d 74 fc ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  00061	e9 00 00 00 00	 jmp	 ??1SegmentFramework@@QAE@XZ
__unwindfunclet$_DllMain@12$6:
  00066	8d 8d 50 fc ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  0006c	e9 00 00 00 00	 jmp	 ??1SegmentFramework@@QAE@XZ
__ehhandler$_DllMain@12:
  00071	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00075	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00078	8b 8a 50 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-944]
  0007e	33 c8		 xor	 ecx, eax
  00080	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00085	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00088	33 c8		 xor	 ecx, eax
  0008a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0008f	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$_DllMain@12
  00094	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
_DllMain@12 ENDP
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h
;	COMDAT ??0Segment@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0Segment@@QAE@XZ PROC					; Segment::Segment, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0Segment@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	56		 push	 esi
  00015	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001a	33 c5		 xor	 eax, ebp
  0001c	50		 push	 eax
  0001d	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00020	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00026	8b f1		 mov	 esi, ecx
  00028	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi
  0002b	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  0002e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00034	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  0003b	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
  00040	89 06		 mov	 DWORD PTR [esi], eax
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h

; 50   :     SegmentHeader () {

  00042	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00049	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 390  : 		_Mylast(),

  00050	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 391  : 		_Myend()

  00057	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File c:\users\henry\source\repos\otc\otc\otc\headers\segment\segmentheader.h

; 51   :         FillImports ();

  0005e	8b ce		 mov	 ecx, esi
  00060	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00064	e8 00 00 00 00	 call	 ?FillImports@SegmentHeader@@AAEXXZ ; SegmentHeader::FillImports

; 52   :         FillRelocations ();

  00069	8b ce		 mov	 ecx, esi
  0006b	e8 00 00 00 00	 call	 ?FillRelocations@SegmentHeader@@AAEXXZ ; SegmentHeader::FillRelocations
  00070	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00073	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  0007a	e8 00 00 00 00	 call	 ??0SegmentFramework@@QAE@XZ
  0007f	8b c6		 mov	 eax, esi
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5e		 pop	 esi
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Segment@@QAE@XZ$2:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
__unwindfunclet$??0Segment@@QAE@XZ$3:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 08	 add	 ecx, 8
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__unwindfunclet$??0Segment@@QAE@XZ$0:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	e9 00 00 00 00	 jmp	 ??1SegmentHeader@@QAE@XZ
__ehhandler$??0Segment@@QAE@XZ:
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 4a ec	 mov	 ecx, DWORD PTR [edx-20]
  00025	33 c8		 xor	 ecx, eax
  00027	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0Segment@@QAE@XZ
  00031	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0Segment@@QAE@XZ ENDP					; Segment::Segment
; Function compile flags: /Ogtp
;	COMDAT ??1Segment@@QAE@XZ
_TEXT	SEGMENT
??1Segment@@QAE@XZ PROC					; Segment::~Segment, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00006	e8 00 00 00 00	 call	 ??1SegmentFramework@@QAE@XZ
  0000b	8b ce		 mov	 ecx, esi
  0000d	5e		 pop	 esi
  0000e	e9 00 00 00 00	 jmp	 ??1SegmentHeader@@QAE@XZ
??1Segment@@QAE@XZ ENDP					; Segment::~Segment
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ?__autoclassinit2@Segment@@QAEXI@Z
_TEXT	SEGMENT
_classSize$dead$ = 8					; size = 4
?__autoclassinit2@Segment@@QAEXI@Z PROC			; Segment::__autoclassinit2, COMDAT
; _this$ = ecx
  00000	6a 38		 push	 56			; 00000038H
  00002	6a 00		 push	 0
  00004	51		 push	 ecx
  00005	e8 00 00 00 00	 call	 _memset
  0000a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0000d	c2 04 00	 ret	 4
?__autoclassinit2@Segment@@QAEXI@Z ENDP			; Segment::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0SegmentFramework@@QAE@XZ
_TEXT	SEGMENT
$T36 = -384						; size = 344
$T20 = -40						; size = 16
$T4 = -24						; size = 8
_this$ = -20						; size = 4
$T44 = -16						; size = 1
$T28 = -16						; size = 1
$T12 = -16						; size = 1
_this$GSCopy$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
??0SegmentFramework@@QAE@XZ PROC			; SegmentFramework::SegmentFramework, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0SegmentFramework@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 74 01 00
	00		 sub	 esp, 372		; 00000174H
  00017	56		 push	 esi
  00018	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001d	33 c5		 xor	 eax, ebp
  0001f	50		 push	 eax
  00020	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00023	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00029	8b f1		 mov	 esi, ecx
  0002b	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 981  : 		}

  0002e	89 75 f0	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 729  : 		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  00031	8d 45 f0	 lea	 eax, DWORD PTR $T4[ebp+8]
  00034	ff 75 f0	 push	 DWORD PTR $T12[ebp]
  00037	c7 45 e8 50 a2
	95 00		 mov	 DWORD PTR $T4[ebp], 9806416 ; 0095a250H
  0003e	50		 push	 eax
  0003f	8d 45 e8	 lea	 eax, DWORD PTR $T4[ebp]
  00042	c7 45 ec 28 39
	00 00		 mov	 DWORD PTR $T4[ebp+4], 14632 ; 00003928H
  00049	50		 push	 eax

; 389  : 		: _Myfirst(),

  0004a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 390  : 		_Mylast(),

  00050	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 391  : 		_Myend()

  00057	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 729  : 		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  0005e	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPBURelocatedNetVar@SegmentFramework@@0Uforward_iterator_tag@1@@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Range_construct_or_tidy<SegmentFramework::RelocatedNetVar const *>
  00063	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0006a	8d 45 e8	 lea	 eax, DWORD PTR $T20[ebp+16]
  0006d	ff 75 f0	 push	 DWORD PTR $T28[ebp]
  00070	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00073	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR $T20[ebp], OFFSET ??_C@_0L@PHFEFMEF@client?4dll@
  0007a	50		 push	 eax
  0007b	8d 45 d8	 lea	 eax, DWORD PTR $T20[ebp]
  0007e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+4], OFFSET ??_C@_0BD@NKPNDPNB@vguimatsurface?4dll@
  00085	50		 push	 eax
  00086	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+8], OFFSET ??_C@_0BB@IDMFBLEL@shaderapidx9?4dll@
  0008d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR $T20[ebp+12], OFFSET ??_C@_0M@EINGCJHB@vstdlib?4dll@

; 389  : 		: _Myfirst(),

  00094	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 390  : 		_Mylast(),

  0009a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  000a1	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 729  : 		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  000a8	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>
  000ad	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000b1	8d 4e 18	 lea	 ecx, DWORD PTR [esi+24]
  000b4	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp], OFFSET ??_C@_0CB@KJIDDANE@55?58B?5EC?583?5E4?5F8?583?5EC?570?56A?55@
  000be	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+4], OFFSET ??_C@_0BK@EOKMOEOO@56?56A?501?568?5?$DP?5?$DP?5?$DP?5?$DP?58B?5F1@
  000c8	c7 85 88 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+8], OFFSET ??_C@_0DF@CJDDHIEG@55?58B?5EC?583?5E4?5F8?551?553?556?557?58@
  000d2	c7 85 8c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+12], OFFSET ??_C@_0CK@CMLHGGBK@55?58B?5EC?583?5E4?5F8?583?5EC?564?553?55@
  000dc	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+16], OFFSET ??_C@_0BL@DOALEGMD@51?556?58B?5F1?585?5F6?574?568?583@
  000e6	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+20], OFFSET ??_C@_0CB@IJIMFMOE@55?58B?5EC?553?58B?55D?508?556?58B?5F1?58@
  000f0	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+24], OFFSET ??_C@_0CH@JIFLMJLL@55?58B?5EC?583?5E4?5C0?583?5EC?534?553?55@
  000fa	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+28], OFFSET ??_C@_0BK@GLHNJMEN@8B?50D?5?$DP?5?$DP?5?$DP?5?$DP?58B?546?508?568@
  00104	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+32], OFFSET ??_C@_0BI@HDJCOIJC@55?58B?5EC?556?58B?5F1?551?58D@
  0010e	c7 85 a4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+36], OFFSET ??_C@_0DL@EIBMNNHJ@55?58B?5EC?583?5E4?5F8?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP@
  00118	c7 85 a8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+40], OFFSET ??_C@_0CD@EIEEDCML@55?58B?5EC?5FF?575?518?5F3?50F?510?545?5?$DP@
  00122	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+44], OFFSET ??_C@_0CI@KPMIAJJE@55?58B?5EC?551?556?58B?5F1?580?5BE?5?$DP?5?$DP?5@
  0012c	c7 85 b0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+48], OFFSET ??_C@_0DJ@CEFDOBKF@8B?535?5?$DP?5?$DP?5?$DP?5?$DP?5FF?590?5?$DP?5?$DP?5?$DP?5?$DP?550?5@
  00136	c7 85 b4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+52], OFFSET ??_C@_0CK@DFKOCHGN@B9?5?$DP?5?$DP?5?$DP?5?$DP?5A1?5?$DP?5?$DP?5?$DP?5?$DP?5FF?510?5A1?5@
  00140	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+56], OFFSET ??_C@_0CE@KJGDCOM@0F?544?5C8?533?5C0?55E?539?511?50F?594?5C@
  0014a	c7 85 bc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+60], OFFSET ??_C@_0M@MACNFAAE@B0?501?583?5FE@
  00154	c7 85 c0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+64], OFFSET ??_C@_0BH@PAMFABDB@B9?5?$DP?5?$DP?5?$DP?5?$DP?5FF?550?514?55F@
  0015e	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+68], OFFSET ??_C@_0CJ@JOAILMAE@81?5C6?5?$DP?5?$DP?5?$DP?5?$DP?58B?54E?50C?58B?556?504@
  00168	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+72], OFFSET ??_C@_0CD@FHMDKEH@55?58B?5EC?551?556?58B?535?5?$DP?5?$DP?5?$DP?5?$DP?557@
  00172	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+76], OFFSET ??_C@_0CL@EEFECCOM@C7?500?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5?$DP?583?5EC?5@
  0017c	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+80], OFFSET ??_C@_0CD@CLINDDEG@55?58B?5EC?583?5EC?508?58B?515?5?$DP?5?$DP?5?$DP?5?$DP@
  00186	c7 85 d4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+84], OFFSET ??_C@_0BG@GPJJHLHE@80?5B9?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?575?56C@
  00190	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+88], OFFSET ??_C@_0BP@PMDLCGGD@83?53D?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?557?58B?5F9?575?506@
  0019a	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+92], OFFSET ??_C@_0BB@MBFPJFAI@A1?5?$DP?5?$DP?5?$DP?5?$DP?574?538@
  001a4	c7 85 e0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+96], OFFSET ??_C@_0CK@MBPLAPBK@55?58B?5EC?553?58B?55D?508?556?557?58B?5F@
  001ae	c7 85 e4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+100], OFFSET ??_C@_0CM@PPIJPEML@55?58B?5EC?556?58B?575?50C?557?58B?5F9?5B@
  001b8	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+104], OFFSET ??_C@_0CE@PNFFJNMC@B9?5?$DP?5?$DP?5?$DP?5?$DP?5A3?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5@
  001c2	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+108], OFFSET ??_C@_0BO@BNNHFHPN@55?58B?5EC?583?5EC?50C?553?556?58B?571@
  001cc	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+112], OFFSET ??_C@_0DH@FGAABEAA@B9?5?$DP?5?$DP?5?$DP?5?$DP?5E8?5?$DP?5?$DP?5?$DP?5?$DP?585?5C0?574?5@
  001d6	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+116], OFFSET ??_C@_0CH@CEFANBNE@55?58B?5EC?551?553?556?58B?575?508?58B?5D@
  001e0	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+120], OFFSET ??_C@_0HD@POPCBNPK@0F?584?5?$DP?5?$DP?5?$DP?5?$DP?58B?588?5?$DP?5?$DP?5?$DP?5?$DP?583?5@
  001ea	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+124], OFFSET ??_C@_0BC@HMEMPFIB@84?5C0?574?517?58B?587@
  001f4	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+128], OFFSET ??_C@_0CG@FFELLHH@84?5C0?574?50A?5F3?50F?510?505?5?$DP?5?$DP?5?$DP?5?$DP@
  001fe	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+132], OFFSET ??_C@_0BE@DLMGOELC@8B?597?5?$DP?5?$DP?5?$DP?5?$DP?556?58B@
  00208	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+136], OFFSET ??_C@_0CB@EHCBCFDJ@55?58B?5EC?583?5E4?5F0?583?5EC?57C?556?5F@
  00212	c7 85 0c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+140], OFFSET ??_C@_0BL@NILMMPDH@55?58B?5EC?58D?551?508?58B?54D?508@
  0021c	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+144], OFFSET ??_C@_0DB@NJMJDNKE@55?58B?5EC?556?58B?535?5?$DP?5?$DP?5?$DP?5?$DP?585?5F6@
  00226	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+148], OFFSET ??_C@_0CF@GJBCBAFI@8B?501?5FF?5B1?5?$DP?5?$DP?5?$DP?5?$DP?5FF?590?5?$DP?5?$DP?5?$DP@
  00230	c7 85 18 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+152], OFFSET ??_C@_0BI@BINPCKGE@55?58B?5EC?583?5EC?558?556?557@
  0023a	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+156], OFFSET ??_C@_0BI@PHFBLDMI@53?556?58B?5F1?557?58B?54E?53C@
  00244	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+160], OFFSET ??_C@_0CB@FABLCKIN@55?58B?5EC?556?58B?575?508?557?5FF?575?51@
  0024e	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+164], OFFSET ??_C@_0DG@PEDGIBOM@55?58B?5EC?583?5E4?5F8?583?5EC?50C?553?55@
  00258	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+168], OFFSET ??_C@_0CN@OIDCGODA@55?58B?5EC?583?5E4?5F8?583?5EC?50C?553?58@
  00262	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+172], OFFSET ??_C@_0CN@EECAACMO@55?58B?5EC?583?5E4?5F8?583?5EC?51C?553?55@
  0026c	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+176], OFFSET ??_C@_0BN@IIAHNBAC@F3?50F?510?5A6?5?$DP?5?$DP?5?$DP?5?$DP?5F3?50F?511@
  00276	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+180], OFFSET ??_C@_0CJ@IBABLOEE@56?58B?5F1?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?557?58B?501@
  00280	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+184], OFFSET ??_C@_0CD@FBPNHNGE@55?58B?5EC?583?5EC?510?5A1?5?$DP?5?$DP?5?$DP?5?$DP?589@
  0028a	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+188], OFFSET ??_C@_0CP@PEBOMIDC@57?58B?5F9?58B?507?58B?580?5?$DP?5?$DP?5?$DP?5?$DP?5FF@
  00294	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+192], OFFSET ??_C@_0DA@OAEFGDOI@55?58B?5EC?583?5E4?5F8?583?5EC?55C?553?58@
  0029e	c7 85 44 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+196], OFFSET ??_C@_0CH@OFLNLCEJ@55?58B?5EC?583?5E4?5F8?583?5EC?530?556?55@
  002a8	ff 75 f0	 push	 DWORD PTR $T44[ebp]
  002ab	8d 45 d8	 lea	 eax, DWORD PTR $T36[ebp+344]
  002ae	c7 85 48 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+200], OFFSET ??_C@_0DF@HBNAIIIO@55?58B?5EC?556?5FF?575?508?58B?5F1?58B?50@
  002b8	50		 push	 eax
  002b9	8d 85 80 fe ff
	ff		 lea	 eax, DWORD PTR $T36[ebp]
  002bf	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+204], OFFSET ??_C@_0BC@NOOJPJHB@85?5C0?575?530?538?586@
  002c9	50		 push	 eax
  002ca	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+208], OFFSET ??_C@_0BD@LIBFMOBN@C7?546?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?543@
  002d4	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+212], OFFSET ??_C@_0BC@CLEEDAAD@85?5C0?574?52D?583?57D@
  002de	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+216], OFFSET ??_C@_0P@CGNIIJII@75?504?5B0?501?55F@
  002e8	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+220], OFFSET ??_C@_0BC@LFBMICMP@84?5C0?575?50D?5F6?587@
  002f2	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+224], OFFSET ??_C@_0CG@FHMIJDND@84?5C0?575?538?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?58B?501@
  002fc	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+228], OFFSET ??_C@_0CE@LKCAGEIP@84?5C0?575?509?55F?55E?55B?58B?5E5?55D?5C@
  00306	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+232], OFFSET ??_C@_0CJ@FCOBLFNE@55?58B?5EC?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP?553?556?557@
  00310	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+236], OFFSET ??_C@_0BK@GIPFPJPJ@F3?50F?510?54D?5?$DP?584?5C0?574?512@
  0031a	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+240], OFFSET ??_C@_0BE@NOPHJDIG@FF?5D0?5A1?5?$DP?5?$DP?5?$DP?5?$DP?5B9@
  00324	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+244], OFFSET ??_C@_0BH@MDINMCPF@E8?5?$DP?5?$DP?5?$DP?5?$DP?5FF?576?50C?58D@
  0032e	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+248], OFFSET ??_C@_0CK@NDFMKNFD@80?53D?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?574?516?5A1?5?$DP?5?$DP?5?$DP?5@
  00338	c7 85 7c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T36[ebp+252], OFFSET ??_C@_0DH@GGEIJINE@8B?535?5?$DP?5?$DP?5?$DP?5?$DP?5FF?510?50F?5B7?5C0?5B9@
  00342	c7 45 80 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+256], OFFSET ??_C@_0BG@DEDHDCDI@83?5BE?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?57F?567@
  00349	c7 45 84 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+260], OFFSET ??_C@_0CA@CCMNJOJN@E8?5?$DP?5?$DP?5?$DP?5?$DP?5EB?502?533?5C0?557?58B?5BE@
  00350	c7 45 88 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+264], OFFSET ??_C@_0CG@HDEAFJAI@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?5D0?585?5D2?575?507?532@
  00357	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+268], OFFSET ??_C@_0DC@HPKDGOAA@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?546?504?55F?55E?55B?58B@
  0035e	c7 45 90 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+272], OFFSET ??_C@_0M@OEHPONHC@75?54B?50F?557@
  00365	c7 45 94 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+276], OFFSET ??_C@_0CC@NJGBBMJN@0F?5B7?505?5?$DP?5?$DP?5?$DP?5?$DP?53D?5?$DP?5?$DP?5?$DP?5?$DP?574?5@
  0036c	c7 45 98 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+280], OFFSET ??_C@_0M@OFBMICFD@56?58D?551?53C@
  00373	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+284], OFFSET ??_C@_0BN@JDGIHKEL@E8?5?$DP?5?$DP?5?$DP?5?$DP?583?57D?5D8?500?57C?50F@
  0037a	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+288], OFFSET ??_C@_0DH@BDJAJANF@55?58B?5EC?583?5E4?5F8?581?5EC?5?$DP?5?$DP?5?$DP?5?$DP@
  00381	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+292], OFFSET ??_C@_0BB@HJKEOCJD@E8?5?$DP?5?$DP?5?$DP?5?$DP?599?52B@
  00388	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+296], OFFSET ??_C@_0CF@KKAIIKCM@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?50F?557?5@
  0038f	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+300], OFFSET ??_C@_0M@GHAFGLNO@8D?54E?574?58B@
  00396	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+304], OFFSET ??_C@_0CD@CLINDDEG@55?58B?5EC?583?5EC?508?58B?515?5?$DP?5?$DP?5?$DP?5?$DP@
  0039d	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+308], OFFSET ??_C@_0BB@HJKEOCJD@E8?5?$DP?5?$DP?5?$DP?5?$DP?599?52B@
  003a4	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+312], OFFSET ??_C@_0CF@KKAIIKCM@E8?5?$DP?5?$DP?5?$DP?5?$DP?58B?50D?5?$DP?5?$DP?5?$DP?5?$DP?50F?557?5@
  003ab	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+316], OFFSET ??_C@_0CB@HIJCDHC@8B?50D?5?$DP?5?$DP?5?$DP?5?$DP?5F6?587?5?$DP?5?$DP?5?$DP?5?$DP?5?$DP?58@
  003b2	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+320], OFFSET ??_C@_0BN@NCEFIOGI@55?58B?5EC?5F3?50F?510?545?5?$DP?556?56A@
  003b9	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+324], OFFSET ??_C@_0CE@IFHNNPNM@55?58B?5EC?583?5E4?5F8?58B?545?50C?583?5E@
  003c0	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+328], OFFSET ??_C@_0BI@EHNMLEME@FF?550?518?589?544?524?514?5EB@
  003c7	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+332], OFFSET ??_C@_0BE@MLEIBKML@A2?5?$DP?5?$DP?5?$DP?5?$DP?58B?545?5E8@
  003ce	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+336], OFFSET ??_C@_0CB@LHJAFMPF@55?58B?5EC?583?5E4?5F8?551?553?556?58B?5D@
  003d5	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR $T36[ebp+340], OFFSET ??_C@_0BL@HOLHFMKH@55?58B?5EC?583?5EC?548?553?58B?55D@

; 389  : 		: _Myfirst(),

  003dc	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 390  : 		_Mylast(),

  003e2	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  003e9	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 729  : 		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  003f0	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>
  003f5	8b c6		 mov	 eax, esi
  003f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00401	59		 pop	 ecx
  00402	5e		 pop	 esi
  00403	8b e5		 mov	 esp, ebp
  00405	5d		 pop	 ebp
  00406	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0SegmentFramework@@QAE@XZ$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::~vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
__unwindfunclet$??0SegmentFramework@@QAE@XZ$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$GSCopy$[ebp]
  0000b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000e	e9 00 00 00 00	 jmp	 ??1?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@XZ ; std::vector<char const *,std::allocator<char const *> >::~vector<char const *,std::allocator<char const *> >
__ehhandler$??0SegmentFramework@@QAE@XZ:
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a 84 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-380]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0SegmentFramework@@QAE@XZ
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0SegmentFramework@@QAE@XZ ENDP			; SegmentFramework::SegmentFramework
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\initializer_list
;	COMDAT ??0?$initializer_list@PBD@std@@QAE@PBQBD0@Z
_TEXT	SEGMENT
__First_arg$ = 8					; size = 4
__Last_arg$ = 12					; size = 4
??0?$initializer_list@PBD@std@@QAE@PBQBD0@Z PROC	; std::initializer_list<char const *>::initializer_list<char const *>, COMDAT
; _this$ = ecx

; 37   : 		{	// construct with pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 36   : 		: _First(_First_arg), _Last(_Last_arg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 38   : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0?$initializer_list@PBD@std@@QAE@PBQBD0@Z ENDP	; std::initializer_list<char const *>::initializer_list<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\initializer_list
;	COMDAT ??0?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QAE@PBURelocatedNetVar@SegmentFramework@@0@Z
_TEXT	SEGMENT
__First_arg$ = 8					; size = 4
__Last_arg$ = 12					; size = 4
??0?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QAE@PBURelocatedNetVar@SegmentFramework@@0@Z PROC ; std::initializer_list<SegmentFramework::RelocatedNetVar>::initializer_list<SegmentFramework::RelocatedNetVar>, COMDAT
; _this$ = ecx

; 37   : 		{	// construct with pointers

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 36   : 		: _First(_First_arg), _Last(_Last_arg)

  00003	8b 45 08	 mov	 eax, DWORD PTR __First_arg$[ebp]
  00006	89 01		 mov	 DWORD PTR [ecx], eax
  00008	8b 45 0c	 mov	 eax, DWORD PTR __Last_arg$[ebp]
  0000b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 38   : 		}

  0000e	8b c1		 mov	 eax, ecx
  00010	5d		 pop	 ebp
  00011	c2 08 00	 ret	 8
??0?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QAE@PBURelocatedNetVar@SegmentFramework@@0@Z ENDP ; std::initializer_list<SegmentFramework::RelocatedNetVar>::initializer_list<SegmentFramework::RelocatedNetVar>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??1?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::~vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; _this$ = ecx

; 893  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN4@vector

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e2 f8	 and	 edx, -8			; fffffff8H

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00011	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN80@vector

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN77@vector

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b c1		 mov	 eax, ecx
$LN80@vector:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN4@vector:
  00049	5e		 pop	 esi

; 895  : 		}

  0004a	c3		 ret	 0
$LN77@vector:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN103@vector:
  00051	cc		 int	 3
??1?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::~vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T32 = -1						; size = 1
__Right$ = 8						; size = 4
??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@ABV01@@Z PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; _this$ = ecx

; 734  : 		{	// construct by copying _Right

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR __Right$[ebp]

; 389  : 		: _Myfirst(),

  0000b	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0

; 390  : 		_Mylast(),

  00011	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 391  : 		_Myend()

  00018	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  0001f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00022	2b 06		 sub	 eax, DWORD PTR [esi]
  00024	c1 f8 03	 sar	 eax, 3

; 735  : 		if (_Buy(_Right.size()))

  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ?_Buy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAE_NI@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Buy
  0002d	84 c0		 test	 al, al
  0002f	74 25		 je	 SHORT $LN85@vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 211  : 	const auto _UFirst = _Get_unwrapped(_First);

  00031	8b 16		 mov	 edx, DWORD PTR [esi]
  00033	57		 push	 edi

; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00034	8b 3b		 mov	 edi, DWORD PTR [ebx]

; 214  : 	_Seek_wrapped(_Dest,

  00036	51		 push	 ecx
  00037	8d 4d ff	 lea	 ecx, DWORD PTR $T32[ebp]
  0003a	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@URelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAURelocatedNetVar@SegmentFramework@@0@Z ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar,SegmentFramework::RelocatedNetVar>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0003f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00042	2b f2		 sub	 esi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00044	56		 push	 esi
  00045	52		 push	 edx
  00046	57		 push	 edi
  00047	e8 00 00 00 00	 call	 _memmove
  0004c	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0004f	8d 0c 3e	 lea	 ecx, DWORD PTR [esi+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 738  : 			this->_Mylast() = _Ucopy(_Right._Myfirst(), _Right._Mylast(), this->_Myfirst());

  00052	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx

; 739  : 			_CATCH_ALL
; 740  : 			_Tidy();
; 741  : 			_RERAISE;
; 742  : 			_CATCH_END
; 743  : 			}
; 744  : 		}

  00055	5f		 pop	 edi
$LN85@vector:
  00056	5e		 pop	 esi
  00057	8b c3		 mov	 eax, ebx
  00059	5b		 pop	 ebx
  0005a	8b e5		 mov	 esp, ebp
  0005c	5d		 pop	 ebp
  0005d	c2 04 00	 ret	 4
??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@V?$initializer_list@URelocatedNetVar@SegmentFramework@@@1@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z
_TEXT	SEGMENT
$T6 = -4						; size = 1
__Ilist$ = 8						; size = 8
__Al$dead$ = 16						; size = 4
??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@V?$initializer_list@URelocatedNetVar@SegmentFramework@@@1@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; _this$ = ecx

; 728  : 		{	// construct from initializer_list, optional allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 729  : 		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  00005	ff 75 fc	 push	 DWORD PTR $T6[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 75 0c	 push	 DWORD PTR __Ilist$[ebp+4]
  0000d	ff 75 08	 push	 DWORD PTR __Ilist$[ebp]

; 389  : 		: _Myfirst(),

  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 390  : 		_Mylast(),

  00016	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 391  : 		_Myend()

  0001d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 729  : 		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  00024	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPBURelocatedNetVar@SegmentFramework@@0Uforward_iterator_tag@1@@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Range_construct_or_tidy<SegmentFramework::RelocatedNetVar const *>

; 730  : 		}

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??0?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@V?$initializer_list@URelocatedNetVar@SegmentFramework@@@1@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAE@XZ PROC ; std::allocator<SegmentFramework::RelocatedNetVar>::allocator<SegmentFramework::RelocatedNetVar>, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAE@XZ ENDP ; std::allocator<SegmentFramework::RelocatedNetVar>::allocator<SegmentFramework::RelocatedNetVar>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map
;	COMDAT ??0?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC ; std::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >, COMDAT
; _this$ = ecx

; 115  : 		{	// construct empty map from defaults

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\map

; 116  : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c3		 ret	 0
??0?$map@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >::map<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z
_TEXT	SEGMENT
$T6 = -4						; size = 1
__Ilist$ = 8						; size = 8
__Al$dead$ = 16						; size = 4
??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z PROC ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >, COMDAT
; _this$ = ecx

; 728  : 		{	// construct from initializer_list, optional allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi

; 729  : 		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  00005	ff 75 fc	 push	 DWORD PTR $T6[ebp]
  00008	8b f1		 mov	 esi, ecx
  0000a	ff 75 0c	 push	 DWORD PTR __Ilist$[ebp+4]
  0000d	ff 75 08	 push	 DWORD PTR __Ilist$[ebp]

; 389  : 		: _Myfirst(),

  00010	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 390  : 		_Mylast(),

  00016	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 391  : 		_Myend()

  0001d	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 729  : 		_Range_construct_or_tidy(_Ilist.begin(), _Ilist.end(), random_access_iterator_tag{});

  00024	e8 00 00 00 00	 call	 ??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>

; 730  : 		}

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	8b e5		 mov	 esp, ebp
  0002e	5d		 pop	 ebp
  0002f	c2 0c 00	 ret	 12			; 0000000cH
??0?$vector@PBDV?$allocator@PBD@std@@@std@@QAE@V?$initializer_list@PBD@1@ABV?$allocator@PBD@1@@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::vector<char const *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@PBD@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PBD@std@@QAE@XZ PROC			; std::allocator<char const *>::allocator<char const *>, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@PBD@std@@QAE@XZ ENDP			; std::allocator<char const *>::allocator<char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\initializer_list
;	COMDAT ?end@?$initializer_list@PBD@std@@QBEPBQBDXZ
_TEXT	SEGMENT
?end@?$initializer_list@PBD@std@@QBEPBQBDXZ PROC	; std::initializer_list<char const *>::end, COMDAT
; _this$ = ecx

; 47   : 		return (_Last);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 		}

  00003	c3		 ret	 0
?end@?$initializer_list@PBD@std@@QBEPBQBDXZ ENDP	; std::initializer_list<char const *>::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\initializer_list
;	COMDAT ?begin@?$initializer_list@PBD@std@@QBEPBQBDXZ
_TEXT	SEGMENT
?begin@?$initializer_list@PBD@std@@QBEPBQBDXZ PROC	; std::initializer_list<char const *>::begin, COMDAT
; _this$ = ecx

; 42   : 		return (_First);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		}

  00002	c3		 ret	 0
?begin@?$initializer_list@PBD@std@@QBEPBQBDXZ ENDP	; std::initializer_list<char const *>::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\initializer_list
;	COMDAT ?end@?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QBEPBURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?end@?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QBEPBURelocatedNetVar@SegmentFramework@@XZ PROC ; std::initializer_list<SegmentFramework::RelocatedNetVar>::end, COMDAT
; _this$ = ecx

; 47   : 		return (_Last);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 48   : 		}

  00003	c3		 ret	 0
?end@?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QBEPBURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::initializer_list<SegmentFramework::RelocatedNetVar>::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\initializer_list
;	COMDAT ?begin@?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QBEPBURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?begin@?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QBEPBURelocatedNetVar@SegmentFramework@@XZ PROC ; std::initializer_list<SegmentFramework::RelocatedNetVar>::begin, COMDAT
; _this$ = ecx

; 42   : 		return (_First);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 43   : 		}

  00002	c3		 ret	 0
?begin@?$initializer_list@URelocatedNetVar@SegmentFramework@@@std@@QBEPBURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::initializer_list<SegmentFramework::RelocatedNetVar>::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@SA?AV?$allocator@URelocatedNetVar@SegmentFramework@@@2@ABV32@@Z
_TEXT	SEGMENT
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@SA?AV?$allocator@URelocatedNetVar@SegmentFramework@@@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<SegmentFramework::RelocatedNetVar> >::select_on_container_copy_construction, COMDAT
; ___$ReturnUdt$ = ecx
; __Al$dead$ = edx

; 897  : 		return (_Al);

  00000	8b c1		 mov	 eax, ecx

; 898  : 		}

  00002	c3		 ret	 0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@SA?AV?$allocator@URelocatedNetVar@SegmentFramework@@@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SegmentFramework::RelocatedNetVar> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Mylast, COMDAT
; _this$ = ecx

; 591  : 		return (_Get_data()._Mylast);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 592  : 		}

  00003	c3		 ret	 0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myfirst, COMDAT
; _this$ = ecx

; 581  : 		return (_Get_data()._Myfirst);

  00000	8b c1		 mov	 eax, ecx

; 582  : 		}

  00002	c3		 ret	 0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Getal, COMDAT
; _this$ = ecx

; 550  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 551  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Tidy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXXZ PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Tidy, COMDAT
; _this$ = ecx

; 1910 : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1911 : 		this->_Orphan_all();
; 1912 : 
; 1913 : 		if (this->_Myfirst() != pointer())

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 40		 je	 SHORT $LN2@Tidy

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00009	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000c	2b d0		 sub	 edx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000e	83 e2 f8	 and	 edx, -8			; fffffff8H

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00011	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00017	72 12		 jb	 SHORT $LN78@Tidy

; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b c1		 sub	 eax, ecx

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	83 c0 fc	 add	 eax, -4			; fffffffcH
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 22		 ja	 SHORT $LN75@Tidy

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b c1		 mov	 eax, ecx
$LN78@Tidy:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002b	52		 push	 edx
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1918 : 			this->_Myfirst() = pointer();

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 207  : 	::operator delete(_Ptr, _Bytes);

  00038	83 c4 08	 add	 esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1919 : 			this->_Mylast() = pointer();

  0003b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 1920 : 			this->_Myend() = pointer();

  00042	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
$LN2@Tidy:

; 1922 : 		}

  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
$LN75@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN100@Tidy:
  00051	cc		 int	 3
?_Tidy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXXZ ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Buy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAE_NI@Z
_TEXT	SEGMENT
__Newcapacity$ = 8					; size = 4
?_Buy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAE_NI@Z PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Buy, COMDAT
; _this$ = ecx

; 1872 : 		{	// allocate array with _Newcapacity elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi

; 1873 : 		this->_Myfirst() = pointer();
; 1874 : 		this->_Mylast() = pointer();
; 1875 : 		this->_Myend() = pointer();
; 1876 : 
; 1877 : 		if (_Newcapacity == 0)

  00007	8b 7d 08	 mov	 edi, DWORD PTR __Newcapacity$[ebp]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  00017	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  0001e	85 ff		 test	 edi, edi
  00020	75 08		 jne	 SHORT $LN2@Buy

; 1878 : 			{
; 1879 : 			return (false);

  00022	5f		 pop	 edi
  00023	32 c0		 xor	 al, al

; 1892 : 		}

  00025	5e		 pop	 esi
  00026	5d		 pop	 ebp
  00027	c2 04 00	 ret	 4
$LN2@Buy:

; 1880 : 			}
; 1881 : 
; 1882 : 		if (_Newcapacity > max_size())

  0002a	81 ff ff ff ff
	1f		 cmp	 edi, 536870911		; 1fffffffH
  00030	77 7f		 ja	 SHORT $LN99@Buy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 25   : 	size_t _Result = _Count * _Ty_size;

  00032	c1 e7 03	 shl	 edi, 3

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00035	81 ff 00 10 00
	00		 cmp	 edi, 4096		; 00001000H
  0003b	72 3d		 jb	 SHORT $LN45@Buy

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  0003d	8d 47 23	 lea	 eax, DWORD PTR [edi+35]

; 94   : 	if (_Block_size <= _Bytes)

  00040	83 c9 ff	 or	 ecx, -1
  00043	3b c7		 cmp	 eax, edi
  00045	0f 46 c1	 cmovbe	 eax, ecx

; 52   : 		return (::operator new(_Bytes));

  00048	50		 push	 eax
  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0004e	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00050	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00053	85 c9		 test	 ecx, ecx
  00055	74 1d		 je	 SHORT $LN54@Buy

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  00057	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0005a	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  0005d	89 48 fc	 mov	 DWORD PTR [eax-4], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00060	89 06		 mov	 DWORD PTR [esi], eax

; 1888 : 		this->_Mylast() = this->_Myfirst();

  00062	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	03 c7		 add	 eax, edi
  00069	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  0006c	b0 01		 mov	 al, 1
  0006e	5f		 pop	 edi

; 1892 : 		}

  0006f	5e		 pop	 esi
  00070	5d		 pop	 ebp
  00071	c2 04 00	 ret	 4
$LN54@Buy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN45@Buy:

; 188  : 	if (_Bytes != 0)

  0007a	85 ff		 test	 edi, edi
  0007c	74 1d		 je	 SHORT $LN46@Buy

; 52   : 		return (::operator new(_Bytes));

  0007e	57		 push	 edi
  0007f	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  00084	89 06		 mov	 DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 52   : 		return (::operator new(_Bytes));

  00086	83 c4 04	 add	 esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1888 : 		this->_Mylast() = this->_Myfirst();

  00089	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  0008c	8b 06		 mov	 eax, DWORD PTR [esi]
  0008e	03 c7		 add	 eax, edi
  00090	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  00093	b0 01		 mov	 al, 1
  00095	5f		 pop	 edi

; 1892 : 		}

  00096	5e		 pop	 esi
  00097	5d		 pop	 ebp
  00098	c2 04 00	 ret	 4
$LN46@Buy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0

; 193  : 	return (nullptr);

  0009b	33 c0		 xor	 eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1887 : 		this->_Myfirst() = this->_Getal().allocate(_Newcapacity);

  0009d	89 06		 mov	 DWORD PTR [esi], eax

; 1888 : 		this->_Mylast() = this->_Myfirst();

  0009f	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 1889 : 		this->_Myend() = this->_Myfirst() + _Newcapacity;

  000a2	8b 06		 mov	 eax, DWORD PTR [esi]
  000a4	03 c7		 add	 eax, edi
  000a6	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 1890 : 
; 1891 : 		return (true);

  000a9	b0 01		 mov	 al, 1
  000ab	5f		 pop	 edi

; 1892 : 		}

  000ac	5e		 pop	 esi
  000ad	5d		 pop	 ebp
  000ae	c2 04 00	 ret	 4
$LN99@Buy:

; 1883 : 			{
; 1884 : 			_Xlength();

  000b1	e8 00 00 00 00	 call	 ?_Xlength@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@CAXXZ ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Xlength
$LN97@Buy:
  000b6	cc		 int	 3
?_Buy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAE_NI@Z ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Buy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?size@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::size, COMDAT
; _this$ = ecx

; 1704 : 		return (static_cast<size_type>(this->_Mylast() - this->_Myfirst()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1705 : 		}

  00008	c3		 ret	 0
?size@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$dead$ = 8					; size = 4
??0?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@@Z PROC ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >, COMDAT
; _this$ = ecx

; 1085 : 		{	// construct empty tree from comparator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	89 75 fc	 mov	 DWORD PTR _this$[ebp], esi

; 468  : 		: _Myhead(),

  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00010	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00017	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
  0001c	89 06		 mov	 DWORD PTR [esi], eax

; 1086 : 		}

  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	8b e5		 mov	 esp, ebp
  00023	5d		 pop	 ebp
  00024	c2 04 00	 ret	 4
??0?$_Tree@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QBEABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QBEABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 297  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 298  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QBEABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myend, COMDAT
; _this$ = ecx

; 596  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 597  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAPAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Get_data, COMDAT
; _this$ = ecx

; 560  : 		return (_Mypair._Get_second());

  00000	8b c1		 mov	 eax, ecx

; 561  : 		}

  00002	c3		 ret	 0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Getal, COMDAT
; _this$ = ecx

; 545  : 		return (_Mypair._Get_first());

  00000	8b c1		 mov	 eax, ecx

; 546  : 		}

  00002	c3		 ret	 0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEAAV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Orphan_all, COMDAT
; _this$dead$ = ecx

; 535  : 		_Get_data()._Orphan_all();
; 536  : 		}

  00000	c3		 ret	 0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Destroy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPAURelocatedNetVar@SegmentFramework@@0@Z
_TEXT	SEGMENT
__First$dead$ = 8					; size = 4
__Last$dead$ = 12					; size = 4
?_Destroy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPAURelocatedNetVar@SegmentFramework@@0@Z PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Destroy, COMDAT
; _this$dead$ = ecx

; 1849 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1850 : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPAURelocatedNetVar@SegmentFramework@@0@Z ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?capacity@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::capacity, COMDAT
; _this$ = ecx

; 1715 : 		return (static_cast<size_type>(this->_Myend() - this->_Myfirst()));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 01		 sub	 eax, DWORD PTR [ecx]
  00005	c1 f8 03	 sar	 eax, 3

; 1716 : 		}

  00008	c3		 ret	 0
?capacity@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?max_size@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::max_size, COMDAT
; _this$dead$ = ecx

; 1709 : 		return (_Min_value(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 1710 : 			_Alty_traits::max_size(this->_Getal())));
; 1711 : 		}

  00005	c3		 ret	 0
?max_size@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@QBEIXZ ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?allocate@?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@I@Z PROC ; std::allocator<SegmentFramework::RelocatedNetVar>::allocate, COMDAT
; _this$dead$ = ecx

; 996  : 		{	// allocate array of _Count elements

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 25   : 	size_t _Result = _Count * _Ty_size;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]

; 26   : 	if (_Max_possible < _Count)

  0000d	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00012	76 05		 jbe	 SHORT $LN4@allocate

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);

  00014	83 c9 ff	 or	 ecx, -1

; 182  : 	if (_Bytes >= _Big_allocation_threshold)

  00017	eb 08		 jmp	 SHORT $LN27@allocate
$LN4@allocate:
  00019	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001f	72 2d		 jb	 SHORT $LN7@allocate
$LN27@allocate:

; 93   : 	size_t _Block_size = _Non_user_size + _Bytes;

  00021	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]

; 94   : 	if (_Block_size <= _Bytes)

  00024	83 ca ff	 or	 edx, -1
  00027	3b c1		 cmp	 eax, ecx
  00029	0f 46 c2	 cmovbe	 eax, edx

; 52   : 		return (::operator new(_Bytes));

  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 100  : 	const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00032	8b c8		 mov	 ecx, eax

; 52   : 		return (::operator new(_Bytes));

  00034	83 c4 04	 add	 esp, 4

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00037	85 c9		 test	 ecx, ecx
  00039	74 0d		 je	 SHORT $LN16@allocate

; 102  : 	void * const _Ptr = reinterpret_cast<void *>((_Ptr_container + _Non_user_size)
; 103  : 		& ~(_Big_allocation_alignment - 1));

  0003b	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  0003e	83 e0 e0	 and	 eax, -32		; ffffffe0H

; 104  : 	static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

  00041	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00044	5d		 pop	 ebp
  00045	c2 04 00	 ret	 4
$LN16@allocate:

; 101  : 	_STL_VERIFY(_Ptr_container != 0, "invalid argument");	// validate even in release since we're doing p[-1]

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@allocate:

; 188  : 	if (_Bytes != 0)

  0004e	85 c9		 test	 ecx, ecx
  00050	74 0d		 je	 SHORT $LN8@allocate

; 52   : 		return (::operator new(_Bytes));

  00052	51		 push	 ecx
  00053	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00058	83 c4 04	 add	 esp, 4

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN8@allocate:

; 193  : 	return (nullptr);

  0005f	33 c0		 xor	 eax, eax

; 997  : 		return (static_cast<_Ty *>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count))));
; 998  : 		}

  00061	5d		 pop	 ebp
  00062	c2 04 00	 ret	 4
$LN28@allocate:
?allocate@?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAEPAURelocatedNetVar@SegmentFramework@@I@Z ENDP ; std::allocator<SegmentFramework::RelocatedNetVar>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?deallocate@?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAEXQAURelocatedNetVar@SegmentFramework@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAEXQAURelocatedNetVar@SegmentFramework@@I@Z PROC ; std::allocator<SegmentFramework::RelocatedNetVar>::deallocate, COMDAT
; _this$dead$ = ecx

; 990  : 		{	// deallocate object at _Ptr

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 991  : 		// no overflow check on the following multiply; we assume _Allocate did that check
; 992  : 		_Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR __Ptr$[ebp]
  00009	8d 14 c5 00 00
	00 00		 lea	 edx, DWORD PTR [eax*8]

; 201  : 	if (_Bytes >= _Big_allocation_threshold)

  00010	81 fa 00 10 00
	00		 cmp	 edx, 4096		; 00001000H
  00016	72 14		 jb	 SHORT $LN15@deallocate

; 115  : 	_Bytes += _Non_user_size;

  00018	56		 push	 esi

; 116  : 
; 117  : 	const uintptr_t * const _Ptr_user = reinterpret_cast<uintptr_t *>(_Ptr);
; 118  : 	const uintptr_t _Ptr_container = _Ptr_user[-1];

  00019	8b 71 fc	 mov	 esi, DWORD PTR [ecx-4]
  0001c	83 c2 23	 add	 edx, 35			; 00000023H

; 119  : 
; 120  : 	// If the following asserts, it likely means that we are performing
; 121  : 	// an aligned delete on memory coming from an unaligned allocation.
; 122  : 	_STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 123  : 
; 124  : 	// Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 125  : 	// in range [_Min_back_shift, _Non_user_size]
; 126  :   #ifdef _DEBUG
; 127  : 	constexpr uintptr_t _Min_back_shift = 2 * sizeof(void *);
; 128  :   #else /* ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv */
; 129  : 	constexpr uintptr_t _Min_back_shift = sizeof(void *);
; 130  :   #endif /* _DEBUG */
; 131  : 	const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001f	2b ce		 sub	 ecx, esi

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00021	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00024	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00027	77 11		 ja	 SHORT $LN12@deallocate

; 133  : 	_Ptr = reinterpret_cast<void *>(_Ptr_container);

  00029	8b ce		 mov	 ecx, esi
  0002b	5e		 pop	 esi
$LN15@deallocate:

; 207  : 	::operator delete(_Ptr, _Bytes);

  0002c	52		 push	 edx
  0002d	51		 push	 ecx
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00033	83 c4 08	 add	 esp, 8

; 993  : 		}

  00036	5d		 pop	 ebp
  00037	c2 08 00	 ret	 8
$LN12@deallocate:

; 132  : 	_STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@deallocate:
  00040	cc		 int	 3
?deallocate@?$allocator@URelocatedNetVar@SegmentFramework@@@std@@QAEXQAURelocatedNetVar@SegmentFramework@@I@Z ENDP ; std::allocator<SegmentFramework::RelocatedNetVar>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
;	COMDAT ??0?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@@Z
_TEXT	SEGMENT
__Parg$dead$ = 8					; size = 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@@Z PROC ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >, COMDAT
; _this$ = ecx

; 791  : 		{	// construct from comparator

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 468  : 		: _Myhead(),

  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 469  : 		_Mysize(0)

  00009	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 808  : 		_Get_data()._Myhead = _Buyheadnode();

  00010	e8 00 00 00 00	 call	 ?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@2@XZ ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Buyheadnode
  00015	89 06		 mov	 DWORD PTR [esi], eax

; 792  : 		_Construct();
; 793  : 		}

  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??0?$_Tree_comp_alloc@V?$_Tmap_traits@PBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@U?$less@PBD@2@V?$allocator@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@PBD@1@@Z ENDP ; std::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >::_Tree_comp_alloc<std::_Tmap_traits<char const *,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> >,std::less<char const *>,std::allocator<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > >,0> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 307  : 		return (_Myval2);

  00000	8b c1		 mov	 eax, ecx

; 308  : 		}

  00002	c3		 ret	 0
?_Get_second@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAEAAV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAEAAV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 292  : 		return (*this);

  00000	8b c1		 mov	 eax, ecx

; 293  : 		}

  00002	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAEAAV?$allocator@URelocatedNetVar@SegmentFramework@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@SAIABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@@Z
_TEXT	SEGMENT
?max_size@?$_Default_allocator_traits@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@SAIABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<SegmentFramework::RelocatedNetVar> >::max_size, COMDAT
; ___formal$dead$ = ecx

; 892  : 		return (static_cast<size_t>(-1) / sizeof(value_type));

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 893  : 		}

  00005	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@SAIABV?$allocator@URelocatedNetVar@SegmentFramework@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<SegmentFramework::RelocatedNetVar> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myend, COMDAT
; _this$ = ecx

; 601  : 		return (_Get_data()._Myend);

  00000	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]

; 602  : 		}

  00003	c3		 ret	 0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QBEABQAURelocatedNetVar@SegmentFramework@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAE@$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$?0V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAE@$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > ><std::allocator<SegmentFramework::RelocatedNetVar>,void>, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 431  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 431  : 		}

  00016	c2 04 00	 ret	 4
??$?0V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAE@$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > ><std::allocator<SegmentFramework::RelocatedNetVar>,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PAURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEPAURelocatedNetVar@SegmentFramework@@PAU23@00@Z
_TEXT	SEGMENT
$T6 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PAURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEPAURelocatedNetVar@SegmentFramework@@PAU23@00@Z PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Ucopy<SegmentFramework::RelocatedNetVar *>, COMDAT
; _this$dead$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 214  : 	_Seek_wrapped(_Dest,

  0000f	51		 push	 ecx
  00010	8d 4d ff	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@URelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAURelocatedNetVar@SegmentFramework@@0@Z ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar,SegmentFramework::RelocatedNetVar>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	2b fa		 sub	 edi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0001a	57		 push	 edi
  0001b	52		 push	 edx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1824 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEPAURelocatedNetVar@SegmentFramework@@PAU23@00@Z ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Ucopy<SegmentFramework::RelocatedNetVar *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAE@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$?0ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAE@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > ><std::allocator<SegmentFramework::RelocatedNetVar> const &,void>, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 431  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 431  : 		}

  00016	c2 04 00	 ret	 4
??$?0ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@@std@@QAE@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > >::_Vector_alloc<std::_Vec_base_types<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> > ><std::allocator<SegmentFramework::RelocatedNetVar> const &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Range_construct_or_tidy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPBURelocatedNetVar@SegmentFramework@@0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__First$GSCopy$1$ = -8					; size = 4
$T9 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Range_construct_or_tidy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPBURelocatedNetVar@SegmentFramework@@0Uforward_iterator_tag@1@@Z PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Range_construct_or_tidy<SegmentFramework::RelocatedNetVar const *>, COMDAT
; _this$ = ecx

; 704  : 		{	// initialize with [_First, _Last), avoid leaking, forward iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 1235 : 	return (_Last - _First);

  00010	2b f8		 sub	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 704  : 		{	// initialize with [_First, _Last), avoid leaking, forward iterators

  00012	89 45 f8	 mov	 DWORD PTR __First$GSCopy$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 1235 : 	return (_Last - _First);

  00015	8b c7		 mov	 eax, edi
  00017	c1 f8 03	 sar	 eax, 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 705  : 		if (_Buy(_Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)))))

  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?_Buy@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAE_NI@Z ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Buy
  00020	84 c0		 test	 al, al
  00022	74 20		 je	 SHORT $LN5@Range_cons
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00024	56		 push	 esi
  00025	8b 33		 mov	 esi, DWORD PTR [ebx]

; 214  : 	_Seek_wrapped(_Dest,

  00027	51		 push	 ecx
  00028	8d 4d ff	 lea	 ecx, DWORD PTR $T9[ebp]
  0002b	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@$$CBURelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBURelocatedNetVar@SegmentFramework@@ABQAU23@@Z ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar const ,SegmentFramework::RelocatedNetVar>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00030	57		 push	 edi
  00031	ff 75 f8	 push	 DWORD PTR __First$GSCopy$1$[ebp]
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0003d	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 708  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());

  00040	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00043	5e		 pop	 esi
$LN5@Range_cons:

; 709  : 			_CATCH_ALL
; 710  : 			_Tidy();
; 711  : 			_RERAISE;
; 712  : 			_CATCH_END
; 713  : 			}
; 714  : 		}

  00044	5f		 pop	 edi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
??$_Range_construct_or_tidy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEXPBURelocatedNetVar@SegmentFramework@@0Uforward_iterator_tag@1@@Z ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Range_construct_or_tidy<SegmentFramework::RelocatedNetVar const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$?0ABV?$allocator@PBD@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$?0ABV?$allocator@PBD@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > ><std::allocator<char const *> const &,void>, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 431  : 		}

  00006	8b c1		 mov	 eax, ecx

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 431  : 		}

  00016	c2 04 00	 ret	 4
??$?0ABV?$allocator@PBD@std@@X@?$_Vector_alloc@U?$_Vec_base_types@PBDV?$allocator@PBD@std@@@std@@@std@@QAE@ABV?$allocator@PBD@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > >::_Vector_alloc<std::_Vec_base_types<char const *,std::allocator<char const *> > ><std::allocator<char const *> const &,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__First$GSCopy$1$ = -8					; size = 4
$T9 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>, COMDAT
; _this$ = ecx

; 704  : 		{	// initialize with [_First, _Last), avoid leaking, forward iterators

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00009	53		 push	 ebx
  0000a	57		 push	 edi
  0000b	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	8b d9		 mov	 ebx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 1235 : 	return (_Last - _First);

  00010	2b f8		 sub	 edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 704  : 		{	// initialize with [_First, _Last), avoid leaking, forward iterators

  00012	89 45 f8	 mov	 DWORD PTR __First$GSCopy$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 1235 : 	return (_Last - _First);

  00015	8b c7		 mov	 eax, edi
  00017	c1 f8 02	 sar	 eax, 2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 705  : 		if (_Buy(_Convert_size<size_type>(static_cast<size_t>(_STD distance(_First, _Last)))))

  0001a	50		 push	 eax
  0001b	e8 00 00 00 00	 call	 ?_Buy@?$vector@PBDV?$allocator@PBD@std@@@std@@AAE_NI@Z ; std::vector<char const *,std::allocator<char const *> >::_Buy
  00020	84 c0		 test	 al, al
  00022	74 20		 je	 SHORT $LN5@Range_cons
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));

  00024	56		 push	 esi
  00025	8b 33		 mov	 esi, DWORD PTR [ebx]

; 214  : 	_Seek_wrapped(_Dest,

  00027	51		 push	 ecx
  00028	8d 4d ff	 lea	 ecx, DWORD PTR $T9[ebp]
  0002b	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@QBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBQBDABQAPBD@Z ; std::_Ptr_copy_cat<char const * const,char const *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00030	57		 push	 edi
  00031	ff 75 f8	 push	 DWORD PTR __First$GSCopy$1$[ebp]
  00034	56		 push	 esi
  00035	e8 00 00 00 00	 call	 _memmove
  0003a	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  0003d	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 708  : 			this->_Mylast() = _Ucopy(_First, _Last, this->_Myfirst());

  00040	89 43 04	 mov	 DWORD PTR [ebx+4], eax
  00043	5e		 pop	 esi
$LN5@Range_cons:

; 709  : 			_CATCH_ALL
; 710  : 			_Tidy();
; 711  : 			_RERAISE;
; 712  : 			_CATCH_END
; 713  : 			}
; 714  : 		}

  00044	5f		 pop	 edi
  00045	5b		 pop	 ebx
  00046	8b e5		 mov	 esp, ebp
  00048	5d		 pop	 ebp
  00049	c2 0c 00	 ret	 12			; 0000000cH
??$_Range_construct_or_tidy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEXPBQBD0Uforward_iterator_tag@1@@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Range_construct_or_tidy<char const * const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAXPAURelocatedNetVar@SegmentFramework@@0AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z
_TEXT	SEGMENT
__Al$dead$ = 8						; size = 4
??$_Destroy_range@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAXPAURelocatedNetVar@SegmentFramework@@0AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z PROC ; std::_Destroy_range<std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; __First$dead$ = ecx
; __Last$dead$ = edx

; 1155 : 		// note that this is an optimization for debug mode codegen;
; 1156 : 		// in release mode the BE removes all of this
; 1157 : 	using _Val = typename _Alloc::value_type;
; 1158 : 	_Destroy_range1(_First, _Last, _Al, bool_constant<conjunction_v<
; 1159 : 		is_trivially_destructible<_Val>,
; 1160 : 		_Uses_default_destroy<_Alloc, _Val *>>>{});
; 1161 : 	}

  00000	c3		 ret	 0
??$_Destroy_range@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAXPAURelocatedNetVar@SegmentFramework@@0AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT
; __Count$ = ecx

; 24   : 	constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 25   : 	size_t _Result = _Count * _Ty_size;
; 26   : 	if (_Max_possible < _Count)

  00000	83 ca ff	 or	 edx, -1
  00003	8d 04 cd 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*8]
  0000a	81 f9 ff ff ff
	1f		 cmp	 ecx, 536870911		; 1fffffffH
  00010	0f 47 c2	 cmova	 eax, edx

; 27   : 		{	// multiply overflow, try allocating all of memory and assume the
; 28   : 			// allocation function will throw bad_alloc
; 29   : 		_Result = static_cast<size_t>(-1);
; 30   : 		}
; 31   : 
; 32   : 	return (_Result);
; 33   : 	}

  00013	c3		 ret	 0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABU?$less@PBD@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PBD@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
_<_Val2_0>$dead$ = 16					; size = 4
??$?0ABU?$less@PBD@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PBD@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1><std::less<char const *> const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 469  : 		_Mysize(0)

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  0000f	c2 0c 00	 ret	 12			; 0000000cH
??$?0ABU?$less@PBD@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@PBD@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@PBD@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1>::_Compressed_pair<std::less<char const *>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>,1><std::less<char const *> const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YA$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@AAV10@@Z
_TEXT	SEGMENT
??$forward@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YA$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@AAV10@@Z PROC ; std::forward<std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YA$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@AAV10@@Z ENDP ; std::forward<std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@$$V@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@$$V@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1><std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00016	c2 08 00	 ret	 8
??$?0V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@$$V@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1><std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAURelocatedNetVar@SegmentFramework@@PAU12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@0PAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z
_TEXT	SEGMENT
$T4 = -1						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PAURelocatedNetVar@SegmentFramework@@PAU12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@0PAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z PROC ; std::_Uninitialized_copy<SegmentFramework::RelocatedNetVar *,SegmentFramework::RelocatedNetVar *,std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000a	8b f1		 mov	 esi, ecx

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);
; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 214  : 	_Seek_wrapped(_Dest,

  0000c	51		 push	 ecx
  0000d	8d 4d ff	 lea	 ecx, DWORD PTR $T4[ebp]
  00010	8b da		 mov	 ebx, edx
  00012	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@URelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAURelocatedNetVar@SegmentFramework@@0@Z ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar,SegmentFramework::RelocatedNetVar>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00017	2b de		 sub	 ebx, esi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00024	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 219  : 	return (_Dest);

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 220  : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninitialized_copy@PAURelocatedNetVar@SegmentFramework@@PAU12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@0PAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z ENDP ; std::_Uninitialized_copy<SegmentFramework::RelocatedNetVar *,SegmentFramework::RelocatedNetVar *,std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PAURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAHABQAURelocatedNetVar@SegmentFramework@@0@Z
_TEXT	SEGMENT
??$_Idl_distance@PAURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAHABQAURelocatedNetVar@SegmentFramework@@0@Z PROC ; std::_Idl_distance<SegmentFramework::RelocatedNetVar *,SegmentFramework::RelocatedNetVar *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	2b 01		 sub	 eax, DWORD PTR [ecx]
  00004	c1 f8 03	 sar	 eax, 3

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00007	c3		 ret	 0
??$_Idl_distance@PAURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAHABQAURelocatedNetVar@SegmentFramework@@0@Z ENDP ; std::_Idl_distance<SegmentFramework::RelocatedNetVar *,SegmentFramework::RelocatedNetVar *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAABV?$allocator@URelocatedNetVar@SegmentFramework@@@0@ABV10@@Z
_TEXT	SEGMENT
??$forward@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAABV?$allocator@URelocatedNetVar@SegmentFramework@@@0@ABV10@@Z PROC ; std::forward<std::allocator<SegmentFramework::RelocatedNetVar> const &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAABV?$allocator@URelocatedNetVar@SegmentFramework@@@0@ABV10@@Z ENDP ; std::forward<std::allocator<SegmentFramework::RelocatedNetVar> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@$$V@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@$$V@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z PROC ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1><std::allocator<SegmentFramework::RelocatedNetVar> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@URelocatedNetVar@SegmentFramework@@@std@@$$V@?$_Compressed_pair@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@V?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@URelocatedNetVar@SegmentFramework@@@1@@Z ENDP ; std::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1>::_Compressed_pair<std::allocator<SegmentFramework::RelocatedNetVar>,std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >,1><std::allocator<SegmentFramework::RelocatedNetVar> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$distance@PBURelocatedNetVar@SegmentFramework@@@std@@YAHPBURelocatedNetVar@SegmentFramework@@0@Z
_TEXT	SEGMENT
??$distance@PBURelocatedNetVar@SegmentFramework@@@std@@YAHPBURelocatedNetVar@SegmentFramework@@0@Z PROC ; std::distance<SegmentFramework::RelocatedNetVar const *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1235 : 	return (_Last - _First);

  00000	2b d1		 sub	 edx, ecx
  00002	c1 fa 03	 sar	 edx, 3

; 1241 : 	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));

  00005	8b c2		 mov	 eax, edx

; 1242 : 	}

  00007	c3		 ret	 0
??$distance@PBURelocatedNetVar@SegmentFramework@@@std@@YAHPBURelocatedNetVar@SegmentFramework@@0@Z ENDP ; std::distance<SegmentFramework::RelocatedNetVar const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEPAURelocatedNetVar@SegmentFramework@@PBU23@0PAU23@@Z
_TEXT	SEGMENT
$T6 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEPAURelocatedNetVar@SegmentFramework@@PBU23@0PAU23@@Z PROC ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Ucopy<SegmentFramework::RelocatedNetVar const *>, COMDAT
; _this$dead$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 214  : 	_Seek_wrapped(_Dest,

  0000f	51		 push	 ecx
  00010	8d 4d ff	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@$$CBURelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBURelocatedNetVar@SegmentFramework@@ABQAU23@@Z ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar const ,SegmentFramework::RelocatedNetVar>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	2b fa		 sub	 edi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0001a	57		 push	 edi
  0001b	52		 push	 edx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1824 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PBURelocatedNetVar@SegmentFramework@@@?$vector@URelocatedNetVar@SegmentFramework@@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@AAEPAURelocatedNetVar@SegmentFramework@@PBU23@0PAU23@@Z ENDP ; std::vector<SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >::_Ucopy<SegmentFramework::RelocatedNetVar const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\type_traits
;	COMDAT ??$forward@ABV?$allocator@PBD@std@@@std@@YAABV?$allocator@PBD@0@ABV10@@Z
_TEXT	SEGMENT
??$forward@ABV?$allocator@PBD@std@@@std@@YAABV?$allocator@PBD@0@ABV10@@Z PROC ; std::forward<std::allocator<char const *> const &>, COMDAT
; __Arg$ = ecx

; 1574 : 	return (static_cast<_Ty&&>(_Arg));

  00000	8b c1		 mov	 eax, ecx

; 1575 : 	}

  00002	c3		 ret	 0
??$forward@ABV?$allocator@PBD@std@@@std@@YAABV?$allocator@PBD@0@ABV10@@Z ENDP ; std::forward<std::allocator<char const *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0ABV?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PBD@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$dead$ = 12					; size = 4
??$?0ABV?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PBD@1@@Z PROC ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> const &>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 390  : 		_Mylast(),

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 391  : 		_Myend()

  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 288  : 		}

  00016	c2 08 00	 ret	 8
??$?0ABV?$allocator@PBD@std@@$$V@?$_Compressed_pair@V?$allocator@PBD@std@@V?$_Vector_val@U?$_Simple_types@PBD@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABV?$allocator@PBD@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1>::_Compressed_pair<std::allocator<char const *>,std::_Vector_val<std::_Simple_types<char const *> >,1><std::allocator<char const *> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$distance@PBQBD@std@@YAHPBQBD0@Z
_TEXT	SEGMENT
??$distance@PBQBD@std@@YAHPBQBD0@Z PROC			; std::distance<char const * const *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1235 : 	return (_Last - _First);

  00000	2b d1		 sub	 edx, ecx
  00002	c1 fa 02	 sar	 edx, 2

; 1241 : 	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));

  00005	8b c2		 mov	 eax, edx

; 1242 : 	}

  00007	c3		 ret	 0
??$distance@PBQBD@std@@YAHPBQBD0@Z ENDP			; std::distance<char const * const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??$_Ucopy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPBQBD0PAPBD@Z
_TEXT	SEGMENT
$T6 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Ucopy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPBQBD0PAPBD@Z PROC ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * const *>, COMDAT
; _this$dead$ = ecx

; 1822 : 		{	// copy [_First, _Last) to raw _Dest, using allocator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00007	56		 push	 esi
  00008	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  0000b	57		 push	 edi
  0000c	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 214  : 	_Seek_wrapped(_Dest,

  0000f	51		 push	 ecx
  00010	8d 4d ff	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@QBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBQBDABQAPBD@Z ; std::_Ptr_copy_cat<char const * const,char const *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00018	2b fa		 sub	 edi, edx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0001a	57		 push	 edi
  0001b	52		 push	 edx
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 _memmove
  00022	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00025	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector

; 1823 : 		return (_Uninitialized_copy(_First, _Last, _Dest, this->_Getal()));

  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 1824 : 		}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PBQBD@?$vector@PBDV?$allocator@PBD@std@@@std@@AAEPAPBDPBQBD0PAPBD@Z ENDP ; std::vector<char const *,std::allocator<char const *> >::_Ucopy<char const * const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAXPAURelocatedNetVar@SegmentFramework@@0AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
___formal$ = 12						; size = 1
??$_Destroy_range1@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAXPAURelocatedNetVar@SegmentFramework@@0AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; ___formal$dead$ = ecx
; ___formal$dead$ = edx

; 1146 : 		// nothing to do
; 1147 : 	}

  00000	c3		 ret	 0
??$_Destroy_range1@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAXPAURelocatedNetVar@SegmentFramework@@0AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 468  : 		: _Myhead(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  00006	8b c1		 mov	 eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xtree

; 469  : 		_Mysize(0)

  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 279  : 		}

  0000f	c2 04 00	 ret	 4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > > > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >, COMDAT
; _this$ = ecx

; 389  : 		: _Myfirst(),

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 393  : 		}

  00006	8b c1		 mov	 eax, ecx
  00008	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
  0000f	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0
  00016	c3		 ret	 0
??0?$_Vector_val@U?$_Simple_types@URelocatedNetVar@SegmentFramework@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >::_Vector_val<std::_Simple_types<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory0
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >, COMDAT
; _this$ = ecx

; 980  : 		{	// construct default allocator (do nothing)
; 981  : 		}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0?$allocator@U?$_Tree_node@U?$pair@QBDV?$vector@UImportInfo@SegmentHeader@@V?$allocator@UImportInfo@SegmentHeader@@@std@@@std@@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >::allocator<std::_Tree_node<std::pair<char const * const,std::vector<SegmentHeader::ImportInfo,std::allocator<SegmentHeader::ImportInfo> > >,void *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@URelocatedNetVar@SegmentFramework@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@URelocatedNetVar@SegmentFramework@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@@Z PROC ; std::_Get_unwrapped<SegmentFramework::RelocatedNetVar>, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@URelocatedNetVar@SegmentFramework@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@@Z ENDP ; std::_Get_unwrapped<SegmentFramework::RelocatedNetVar>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped_n@URelocatedNetVar@SegmentFramework@@H$0A@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@H@Z
_TEXT	SEGMENT
??$_Get_unwrapped_n@URelocatedNetVar@SegmentFramework@@H$0A@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@H@Z PROC ; std::_Get_unwrapped_n<SegmentFramework::RelocatedNetVar,int,0>, COMDAT
; __Src$ = ecx
; ___formal$dead$ = edx

; 809  : 	return (_Src);

  00000	8b c1		 mov	 eax, ecx

; 810  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped_n@URelocatedNetVar@SegmentFramework@@H$0A@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@H@Z ENDP ; std::_Get_unwrapped_n<SegmentFramework::RelocatedNetVar,int,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@URelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAURelocatedNetVar@SegmentFramework@@0@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$_Ptr_copy_cat@URelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAURelocatedNetVar@SegmentFramework@@0@Z PROC ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar,SegmentFramework::RelocatedNetVar>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 1070 : 	return {};

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00003	8b c1		 mov	 eax, ecx

; 1071 : 	}

  00005	c3		 ret	 0
??$_Ptr_copy_cat@URelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAURelocatedNetVar@SegmentFramework@@0@Z ENDP ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar,SegmentFramework::RelocatedNetVar>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@URelocatedNetVar@SegmentFramework@@U12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@00AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_copy_al_unchecked@URelocatedNetVar@SegmentFramework@@U12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@00AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<SegmentFramework::RelocatedNetVar,SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 203  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@URelocatedNetVar@SegmentFramework@@U12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QAU12@00AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<SegmentFramework::RelocatedNetVar,SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Seek_wrapped@URelocatedNetVar@SegmentFramework@@@std@@YAXAAPAURelocatedNetVar@SegmentFramework@@QAU12@@Z
_TEXT	SEGMENT
??$_Seek_wrapped@URelocatedNetVar@SegmentFramework@@@std@@YAXAAPAURelocatedNetVar@SegmentFramework@@QAU12@@Z PROC ; std::_Seek_wrapped<SegmentFramework::RelocatedNetVar>, COMDAT
; __It$ = ecx
; __UIt$ = edx

; 872  : 	_It = _UIt;

  00000	89 11		 mov	 DWORD PTR [ecx], edx

; 873  : 	}

  00002	c3		 ret	 0
??$_Seek_wrapped@URelocatedNetVar@SegmentFramework@@@std@@YAXAAPAURelocatedNetVar@SegmentFramework@@QAU12@@Z ENDP ; std::_Seek_wrapped<SegmentFramework::RelocatedNetVar>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Distance1@PBURelocatedNetVar@SegmentFramework@@@std@@YAHPBURelocatedNetVar@SegmentFramework@@0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Distance1@PBURelocatedNetVar@SegmentFramework@@@std@@YAHPBURelocatedNetVar@SegmentFramework@@0Urandom_access_iterator_tag@0@@Z PROC ; std::_Distance1<SegmentFramework::RelocatedNetVar const *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1235 : 	return (_Last - _First);

  00000	2b d1		 sub	 edx, ecx
  00002	c1 fa 03	 sar	 edx, 3
  00005	8b c2		 mov	 eax, edx

; 1236 : 	}

  00007	c3		 ret	 0
??$_Distance1@PBURelocatedNetVar@SegmentFramework@@@std@@YAHPBURelocatedNetVar@SegmentFramework@@0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Distance1<SegmentFramework::RelocatedNetVar const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PBURelocatedNetVar@SegmentFramework@@PAU12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QBU12@0PAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z
_TEXT	SEGMENT
$T4 = -1						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PBURelocatedNetVar@SegmentFramework@@PAU12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QBU12@0PAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z PROC ; std::_Uninitialized_copy<SegmentFramework::RelocatedNetVar const *,SegmentFramework::RelocatedNetVar *,std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000a	8b f1		 mov	 esi, ecx

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);
; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 214  : 	_Seek_wrapped(_Dest,

  0000c	51		 push	 ecx
  0000d	8d 4d ff	 lea	 ecx, DWORD PTR $T4[ebp]
  00010	8b da		 mov	 ebx, edx
  00012	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@$$CBURelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBURelocatedNetVar@SegmentFramework@@ABQAU23@@Z ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar const ,SegmentFramework::RelocatedNetVar>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00017	2b de		 sub	 ebx, esi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00024	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 219  : 	return (_Dest);

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 220  : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninitialized_copy@PBURelocatedNetVar@SegmentFramework@@PAU12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QBU12@0PAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@@Z ENDP ; std::_Uninitialized_copy<SegmentFramework::RelocatedNetVar const *,SegmentFramework::RelocatedNetVar *,std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PBURelocatedNetVar@SegmentFramework@@PBU12@@std@@YAHABQBURelocatedNetVar@SegmentFramework@@0@Z
_TEXT	SEGMENT
??$_Idl_distance@PBURelocatedNetVar@SegmentFramework@@PBU12@@std@@YAHABQBURelocatedNetVar@SegmentFramework@@0@Z PROC ; std::_Idl_distance<SegmentFramework::RelocatedNetVar const *,SegmentFramework::RelocatedNetVar const *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	2b 01		 sub	 eax, DWORD PTR [ecx]
  00004	c1 f8 03	 sar	 eax, 3

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00007	c3		 ret	 0
??$_Idl_distance@PBURelocatedNetVar@SegmentFramework@@PBU12@@std@@YAHABQBURelocatedNetVar@SegmentFramework@@0@Z ENDP ; std::_Idl_distance<SegmentFramework::RelocatedNetVar const *,SegmentFramework::RelocatedNetVar const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Distance1@PBQBD@std@@YAHPBQBD0Urandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$_Distance1@PBQBD@std@@YAHPBQBD0Urandom_access_iterator_tag@0@@Z PROC ; std::_Distance1<char const * const *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 1235 : 	return (_Last - _First);

  00000	2b d1		 sub	 edx, ecx
  00002	c1 fa 02	 sar	 edx, 2
  00005	8b c2		 mov	 eax, edx

; 1236 : 	}

  00007	c3		 ret	 0
??$_Distance1@PBQBD@std@@YAHPBQBD0Urandom_access_iterator_tag@0@@Z ENDP ; std::_Distance1<char const * const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PBQBDPAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0PAPBDAAV?$allocator@PBD@0@@Z
_TEXT	SEGMENT
$T4 = -1						; size = 1
__Dest$ = 8						; size = 4
__Al$dead$ = 12						; size = 4
??$_Uninitialized_copy@PBQBDPAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0PAPBDAAV?$allocator@PBD@0@@Z PROC ; std::_Uninitialized_copy<char const * const *,char const * *,std::allocator<char const *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 209  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b 7d 08	 mov	 edi, DWORD PTR __Dest$[ebp]
  0000a	8b f1		 mov	 esi, ecx

; 210  : 		// note: only called internally from elsewhere in the STL
; 211  : 	const auto _UFirst = _Get_unwrapped(_First);
; 212  : 	const auto _ULast = _Get_unwrapped(_Last);
; 213  : 	const auto _UDest = _Get_unwrapped_n(_Dest, _Idl_distance<_InIt>(_UFirst, _ULast));
; 214  : 	_Seek_wrapped(_Dest,

  0000c	51		 push	 ecx
  0000d	8d 4d ff	 lea	 ecx, DWORD PTR $T4[ebp]
  00010	8b da		 mov	 ebx, edx
  00012	e8 00 00 00 00	 call	 ??$_Ptr_copy_cat@QBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBQBDABQAPBD@Z ; std::_Ptr_copy_cat<char const * const,char const *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  00017	2b de		 sub	 ebx, esi

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 10	 add	 esp, 16			; 00000010H

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00024	8d 04 3b	 lea	 eax, DWORD PTR [ebx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 219  : 	return (_Dest);

  00027	5f		 pop	 edi
  00028	5e		 pop	 esi
  00029	5b		 pop	 ebx

; 220  : 	}

  0002a	8b e5		 mov	 esp, ebp
  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
??$_Uninitialized_copy@PBQBDPAPBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0PAPBDAAV?$allocator@PBD@0@@Z ENDP ; std::_Uninitialized_copy<char const * const *,char const * *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Idl_distance@PBQBDPBQBD@std@@YAHABQBQBD0@Z
_TEXT	SEGMENT
??$_Idl_distance@PBQBDPBQBD@std@@YAHABQBQBD0@Z PROC	; std::_Idl_distance<char const * const *,char const * const *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 945  : 	if constexpr (_Is_random_iter_v<_Iter>)
; 946  : 		{
; 947  : 		return (static_cast<_Iter_diff_t<_Checked>>(_Last - _First));

  00000	8b 02		 mov	 eax, DWORD PTR [edx]
  00002	2b 01		 sub	 eax, DWORD PTR [ecx]
  00004	c1 f8 02	 sar	 eax, 2

; 948  : 		}
; 949  : 	else
; 950  : 		{
; 951  : 		(void)_First;
; 952  : 		(void)_Last;
; 953  : 		return _Distance_unknown{};
; 954  : 		}
; 955  : 	}

  00007	c3		 ret	 0
??$_Idl_distance@PBQBDPBQBD@std@@YAHABQBQBD0@Z ENDP	; std::_Idl_distance<char const * const *,char const * const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PAURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAPAURelocatedNetVar@SegmentFramework@@PAU12@00@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PAURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAPAURelocatedNetVar@SegmentFramework@@PAU12@00@Z PROC ; std::_Copy_memmove<SegmentFramework::RelocatedNetVar *,SegmentFramework::RelocatedNetVar *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 2405 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PAURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAPAURelocatedNetVar@SegmentFramework@@PAU12@00@Z ENDP ; std::_Copy_memmove<SegmentFramework::RelocatedNetVar *,SegmentFramework::RelocatedNetVar *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@$$CBURelocatedNetVar@SegmentFramework@@@std@@YAPBURelocatedNetVar@SegmentFramework@@QBU12@@Z
_TEXT	SEGMENT
??$_Get_unwrapped@$$CBURelocatedNetVar@SegmentFramework@@@std@@YAPBURelocatedNetVar@SegmentFramework@@QBU12@@Z PROC ; std::_Get_unwrapped<SegmentFramework::RelocatedNetVar const >, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@$$CBURelocatedNetVar@SegmentFramework@@@std@@YAPBURelocatedNetVar@SegmentFramework@@QBU12@@Z ENDP ; std::_Get_unwrapped<SegmentFramework::RelocatedNetVar const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@$$CBURelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBURelocatedNetVar@SegmentFramework@@ABQAU23@@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$_Ptr_copy_cat@$$CBURelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBURelocatedNetVar@SegmentFramework@@ABQAU23@@Z PROC ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar const ,SegmentFramework::RelocatedNetVar>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 1070 : 	return {};

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00003	8b c1		 mov	 eax, ecx

; 1071 : 	}

  00005	c3		 ret	 0
??$_Ptr_copy_cat@$$CBURelocatedNetVar@SegmentFramework@@U12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBURelocatedNetVar@SegmentFramework@@ABQAU23@@Z ENDP ; std::_Ptr_copy_cat<SegmentFramework::RelocatedNetVar const ,SegmentFramework::RelocatedNetVar>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@$$CBURelocatedNetVar@SegmentFramework@@U12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QBU12@0QAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_copy_al_unchecked@$$CBURelocatedNetVar@SegmentFramework@@U12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QBU12@0QAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<SegmentFramework::RelocatedNetVar const ,SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 203  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@$$CBURelocatedNetVar@SegmentFramework@@U12@V?$allocator@URelocatedNetVar@SegmentFramework@@@std@@@std@@YAPAURelocatedNetVar@SegmentFramework@@QBU12@0QAU12@AAV?$allocator@URelocatedNetVar@SegmentFramework@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<SegmentFramework::RelocatedNetVar const ,SegmentFramework::RelocatedNetVar,std::allocator<SegmentFramework::RelocatedNetVar> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z
_TEXT	SEGMENT
??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z PROC		; std::_Get_unwrapped<char const * const>, COMDAT
; __Ptr$ = ecx

; 663  : 	return (_Ptr);

  00000	8b c1		 mov	 eax, ecx

; 664  : 	}

  00002	c3		 ret	 0
??$_Get_unwrapped@QBD@std@@YAPBQBDQBQBD@Z ENDP		; std::_Get_unwrapped<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Ptr_copy_cat@QBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBQBDABQAPBD@Z
_TEXT	SEGMENT
___formal$dead$ = 8					; size = 4
??$_Ptr_copy_cat@QBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBQBDABQAPBD@Z PROC ; std::_Ptr_copy_cat<char const * const,char const *>, COMDAT
; ___$ReturnUdt$ = ecx
; ___formal$dead$ = edx

; 1070 : 	return {};

  00000	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00003	8b c1		 mov	 eax, ecx

; 1071 : 	}

  00005	c3		 ret	 0
??$_Ptr_copy_cat@QBDPBD@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQBQBDABQAPBD@Z ENDP ; std::_Ptr_copy_cat<char const * const,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@QBDPBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0QAPBDAAV?$allocator@PBD@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
___formal$dead$ = 12					; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$_Uninitialized_copy_al_unchecked@QBDPBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0QAPBDAAV?$allocator@PBD@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<char const * const,char const *,std::allocator<char const *> >, COMDAT
; __First$ = ecx
; __Last$ = edx

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 201  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility

; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);

  0000a	2b f9		 sub	 edi, ecx

; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xmemory

; 202  : 	return (_Copy_memmove(_First, _Last, _Dest));

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 203  : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Uninitialized_copy_al_unchecked@QBDPBDV?$allocator@PBD@std@@@std@@YAPAPBDQBQBD0QAPBDAAV?$allocator@PBD@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<char const * const,char const *,std::allocator<char const *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PBURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAPAURelocatedNetVar@SegmentFramework@@PBU12@0PAU12@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PBURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAPAURelocatedNetVar@SegmentFramework@@PBU12@0PAU12@@Z PROC ; std::_Copy_memmove<SegmentFramework::RelocatedNetVar const *,SegmentFramework::RelocatedNetVar *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 2405 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PBURelocatedNetVar@SegmentFramework@@PAU12@@std@@YAPAURelocatedNetVar@SegmentFramework@@PBU12@0PAU12@@Z ENDP ; std::_Copy_memmove<SegmentFramework::RelocatedNetVar const *,SegmentFramework::RelocatedNetVar *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xutility
;	COMDAT ??$_Copy_memmove@PBQBDPAPBD@std@@YAPAPBDPBQBD0PAPBD@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
??$_Copy_memmove@PBQBDPAPBD@std@@YAPAPBDPBQBD0PAPBD@Z PROC ; std::_Copy_memmove<char const * const *,char const * *>, COMDAT
; __First$ = ecx
; __Last$ = edx

; 2398 : 	{	// implement copy-like function as memmove

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2399 : 	const char * const _First_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_First));
; 2400 : 	const char * const _Last_ch = const_cast<const char *>(reinterpret_cast<const volatile char *>(_Last));
; 2401 : 	char * const _Dest_ch = const_cast<char *>(reinterpret_cast<volatile char *>(_Dest));
; 2402 : 	const auto _Count = static_cast<size_t>(_Last_ch - _First_ch);
; 2403 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

  00004	8b 75 08	 mov	 esi, DWORD PTR __Dest$[ebp]
  00007	57		 push	 edi
  00008	8b fa		 mov	 edi, edx
  0000a	2b f9		 sub	 edi, ecx
  0000c	57		 push	 edi
  0000d	51		 push	 ecx
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 _memmove
  00014	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2404 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

  00017	8d 04 37	 lea	 eax, DWORD PTR [edi+esi]
  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi

; 2405 : 	}

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
??$_Copy_memmove@PBQBDPAPBD@std@@YAPAPBDPBQBD0PAPBD@Z ENDP ; std::_Copy_memmove<char const * const *,char const * *>
_TEXT	ENDS
END
